[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advent of Code",
    "section": "",
    "text": "This is a brain dump of my attempts for Advent of Code (adventofcode.com)\nClick on any of the yellow stars to see my solution for that day."
  },
  {
    "objectID": "year_2021/day_01/index.html",
    "href": "year_2021/day_01/index.html",
    "title": "2021 - Day 1",
    "section": "",
    "text": "Code\nmeasurements <- scan(\"input.txt\")\nstr(measurements)\n\n\n num [1:2000] 159 158 174 196 197 194 209 213 214 222 ..."
  },
  {
    "objectID": "year_2021/day_01/index.html#part-1",
    "href": "year_2021/day_01/index.html#part-1",
    "title": "2021 - Day 1",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nsum(measurements[-1] > measurements[-length(measurements)])\n\n\n[1] 1583"
  },
  {
    "objectID": "year_2021/day_01/index.html#part-2",
    "href": "year_2021/day_01/index.html#part-2",
    "title": "2021 - Day 1",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nrollSums <- function(x) {\n  N <- length(x)\n  ids <- outer(seq_len(N - 2), 0:2, `+`)\n  apply(ids, 1, \\(y) sum(x[y]))\n}\n\nsum(diff(rollSums(measurements)) > 0)\n\n\n[1] 1627\n\n\n\nVectorised\n\n\nCode\nrollSums2 <- function(x) {\n  N <- length(x)\n  x[-1:-2] + x[c(-1, -N)] + x[c(-(N - 1), -N)]\n}\nsum(diff(rollSums2(measurements)) > 0)\n\n\n[1] 1627\n\n\nCode\nrollIncrease <- function(x) {\n  N <- length(x)\n  x[-1:-3] + x[c(-1, -2, -N)] + x[c(-1, -(N - 1), -N)] >\n    x[-N + 0:2] + x[c(-1, -(N - 1), -N)] + x[c(-1, -2, -N)]\n}\n\nsum(rollIncrease(measurements))\n\n\n[1] 1627"
  },
  {
    "objectID": "year_2021/day_02/index.html",
    "href": "year_2021/day_02/index.html",
    "title": "2021 - Day 2",
    "section": "",
    "text": "Code\ndirections <- read.delim(\n  \"input.txt\",\n  sep = \" \",\n  header = FALSE,\n  col.names = c(\"direction\", \"length\")\n)\nstr(directions)\n\n\n'data.frame':   1000 obs. of  2 variables:\n $ direction: chr  \"forward\" \"forward\" \"down\" \"forward\" ...\n $ length   : int  2 2 7 6 7 4 7 2 4 2 ..."
  },
  {
    "objectID": "year_2021/day_02/index.html#part-1",
    "href": "year_2021/day_02/index.html#part-1",
    "title": "2021 - Day 2",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nsum(directions$length[directions$direction == \"forward\"]) *\n  (sum(directions$length[directions$direction == \"down\"]) -\n        sum(directions$length[directions$direction == \"up\"]))\n\n\n[1] 1635930"
  },
  {
    "objectID": "year_2021/day_02/index.html#part-2",
    "href": "year_2021/day_02/index.html#part-2",
    "title": "2021 - Day 2",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nfindDepth <- function(directions, i = 1, n = nrow(directions), depth = 0, horizontal = 0, aim = 0) {\n  if (directions$direction[i] == \"forward\") {\n    horizontal <- horizontal + directions$length[i]\n    depth <- depth + aim * directions$length[i]\n  } else {\n    position <- if (directions$direction[i] == \"up\") -1 else 1\n    aim <- aim + directions$length[i] * position\n  }\n\n  if (i == n) {\n    horizontal * depth\n  } else {\n    findDepth(directions, i = i + 1, n = n, depth = depth, horizontal = horizontal, aim = aim)\n  }\n}\n\nfindDepth(directions)\n\n\n[1] 1781819478"
  },
  {
    "objectID": "year_2021/day_03/index.html",
    "href": "year_2021/day_03/index.html",
    "title": "2021 - Day 3",
    "section": "",
    "text": "Code\ninput <- readLines(\"input.txt\")\nstr(input)\n\n\n chr [1:1000] \"001001100101\" \"010100011100\" \"100000110001\" \"001111110101\" ...\n\n\nCode\nreports <- t(sapply(strsplit(input, \"\"), as.numeric))\nbin2dec <- function(x) strtoi(paste(x, collapse = \"\"), base = 2)"
  },
  {
    "objectID": "year_2021/day_03/index.html#part-1",
    "href": "year_2021/day_03/index.html#part-1",
    "title": "2021 - Day 3",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nmost_common_value <- round(apply(reports, 2, mean) + .Machine$double.eps)\nleast_common_value <- 1 - most_common_value\nbin2dec(most_common_value) * bin2dec(least_common_value)\n\n\n[1] 3901196"
  },
  {
    "objectID": "year_2021/day_03/index.html#part-2",
    "href": "year_2021/day_03/index.html#part-2",
    "title": "2021 - Day 3",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\noxygen_report <- co2_report <- reports\nfor (i in 1:12) {\n  if (nrow(oxygen_report) > 1 && is.matrix(oxygen_report)) {\n    oxygen_report <- oxygen_report[\n      oxygen_report[, i] == round(mean(oxygen_report[, i]) + .Machine$double.eps),\n    ]\n  }\n  if (nrow(co2_report) > 1 && is.matrix(co2_report)) {\n    co2_report <- co2_report[\n      co2_report[, i] == 1 - round(mean(co2_report[, i]) + .Machine$double.eps),\n    ]\n  }\n}\nbin2dec(oxygen_report) * bin2dec(co2_report)\n\n\n[1] 4412188\n\n\n\nImproved\n\n\nCode\nfindRating <- function(reports, report_type = c(\"oxygen\", \"co2\"), i = 1) {\n  report_type <- match.arg(report_type)\n\n  needed_value <- round(mean(reports[, i] + .Machine$double.eps))\n  if (report_type == \"co2\") needed_value <- 1 - needed_value\n  reports <- reports[reports[, i] == needed_value, , drop = FALSE]\n\n  if (nrow(reports) == 1) {\n    bin2dec(reports)\n  } else {\n    findRating(reports, report_type = report_type, i = i + 1)\n  }\n}\n\nfindRating(reports, \"oxygen\") * findRating(reports, \"co2\")\n\n\n[1] 4412188"
  },
  {
    "objectID": "year_2021/day_04/index.html",
    "href": "year_2021/day_04/index.html",
    "title": "2021 - Day 4",
    "section": "",
    "text": "Code\nbingo_calls <- readLines(\"calls.txt\")\nbingo_calls <- as.numeric(strsplit(bingo_calls, \",\")[[1]])\n\nstr(bingo_calls)\n\n\n num [1:100] 37 60 87 13 34 72 45 49 61 27 ...\n\n\nCode\nbingo_input <- readLines(\"input.txt\")\nbingo_input <- bingo_input[bingo_input != \"\"]\n\nstr(bingo_input)\n\n\n chr [1:500] \"66 78  7 45 92\" \"39 38 62 81 77\" \" 9 73 25 97 99\" ...\n\n\nCode\nbingo_boards <- sapply(split(bingo_input, (seq_along(bingo_input) - 1) %/% 5), \\(x) {\n  do.call(rbind, lapply(strsplit(trimws(x), \" +\"), as.numeric))\n})\nbingo_boards <- array(bingo_boards, dim = c(5, 5, 100))"
  },
  {
    "objectID": "year_2021/day_04/index.html#part-1",
    "href": "year_2021/day_04/index.html#part-1",
    "title": "2021 - Day 4",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nfindBingoWinner <- function(bingo_boards, bingo_calls, \n                            bingo_match = array(FALSE, dim = dim(bingo_boards)), i = 1) {\n  bingo_match <- bingo_match | bingo_boards == bingo_calls[i]\n\n  full_column <- which(apply(apply(bingo_match, 2, colSums), 1, \\(x) any(x == 5)))\n  full_row <- which(apply(apply(bingo_match, 1, colSums), 1, \\(x) any(x == 5)))\n  if (length(full_column) > 0 | length(full_row) > 0) {\n    index <- unique(c(full_column, full_row))\n    list(board = bingo_boards[, , index], calls = bingo_match[, , index], last_call = bingo_calls[i])\n  } else {\n    findBingoWinner(bingo_boards, bingo_calls, bingo_match, i = i + 1)\n  }\n}\n\nwinning_board <- findBingoWinner(bingo_boards, bingo_calls)\nsum(winning_board$board[!winning_board$calls]) * winning_board$last_call\n\n\n[1] 34506"
  },
  {
    "objectID": "year_2021/day_04/index.html#part-2",
    "href": "year_2021/day_04/index.html#part-2",
    "title": "2021 - Day 4",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nfindBingoLoser <- function(bingo_boards, bingo_calls, \n                           bingo_match = array(FALSE, dim = dim(bingo_boards)), i = 1) {\n  bingo_match_input <- bingo_match\n  bingo_match <- bingo_match | bingo_boards == bingo_calls[i]\n\n  full_column <- sum(apply(apply(bingo_match, 2, colSums), 1, \\(x) any(x == 5)))\n  full_row <- sum(apply(apply(bingo_match, 1, colSums), 1, \\(x) any(x == 5)))\n\n  if (full_column == 100) {\n    index <- which(apply(apply(bingo_match_input, 2, colSums), 1, \\(x) all(x != 5)))\n    list(board = bingo_boards[, , index], calls = bingo_match[, , index], last_call = bingo_calls[i])\n  } else if (full_row == 100) {\n    index <- which(apply(apply(bingo_match_input, 1, colSums), 1, \\(x) all(x != 5)))\n    list(board = bingo_boards[, , index], calls = bingo_match[, , index], last_call = bingo_calls[i])\n  } else {\n    findBingoLoser(bingo_boards, bingo_calls, bingo_match, i = i + 1)\n  }\n}\n\nlosing_board <- findBingoLoser(bingo_boards, bingo_calls)\nsum(losing_board$board[!losing_board$calls]) * losing_board$last_call\n\n\n[1] 7686"
  },
  {
    "objectID": "year_2021/day_05/index.html",
    "href": "year_2021/day_05/index.html",
    "title": "2021 - Day 5",
    "section": "",
    "text": "Code\ninput <- readLines(\"input.txt\")\nstr(input)\n\n\n chr [1:500] \"593,10 -> 593,98\" \"777,236 -> 964,236\" \"650,575 -> 476,575\" ...\n\n\n\n\n\n\nCode\ngetNDuplicatedPoints <- function(lines, include_diagonals = FALSE) {\n  all_positions <- lapply(lines, \\(x) {\n    # x1, y1, x2, y2\n    line <- as.integer(strsplit(x, \",| -> \")[[1]])\n    if (line[1] == line[3] || line[2] == line[4] || include_diagonals) {\n      data.frame(x = seq(line[1], line[3]), y = seq(line[2], line[4]))\n    } else {\n      data.frame(x = integer(0), y = integer(0))\n    }\n  })\n\n  all_positions_combined <- do.call(rbind, all_positions)\n  nrow(unique(all_positions_combined[duplicated(all_positions_combined), ]))\n}"
  },
  {
    "objectID": "year_2021/day_05/index.html#part-1",
    "href": "year_2021/day_05/index.html#part-1",
    "title": "2021 - Day 5",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\ngetNDuplicatedPoints(input)\n\n\n[1] 7468"
  },
  {
    "objectID": "year_2021/day_05/index.html#part-2",
    "href": "year_2021/day_05/index.html#part-2",
    "title": "2021 - Day 5",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\ngetNDuplicatedPoints(input, include_diagonals = TRUE)\n\n\n[1] 22364"
  },
  {
    "objectID": "year_2021/day_06/index.html",
    "href": "year_2021/day_06/index.html",
    "title": "2021 - Day 6",
    "section": "",
    "text": "Code\nfish <- as.integer(strsplit(readLines(\"input.txt\"), \",\")[[1]])\nstr(fish)\n\n\n int [1:300] 4 1 4 1 3 3 1 4 3 3 ..."
  },
  {
    "objectID": "year_2021/day_06/index.html#part-1",
    "href": "year_2021/day_06/index.html#part-1",
    "title": "2021 - Day 6",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nfindNFish <- function(fish, i = 1, n = 80) {\n  new_fish <- sum(fish == 0)\n  fish <- fish - 1\n  fish[fish == -1] <- 6\n  fish <- append(fish, rep(8, new_fish))\n  if (i < n) {\n    findNFish(fish, i + 1, n)\n  } else {\n    length(fish)\n  }\n}\n\nfindNFish(fish)\n\n\n[1] 350149"
  },
  {
    "objectID": "year_2021/day_06/index.html#part-2",
    "href": "year_2021/day_06/index.html#part-2",
    "title": "2021 - Day 6",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nfindNewFish <- function(fish_table, i = 1, n = 80) {\n  fish_table$days <- fish_table$days - 1\n  if (-1 %in% fish_table$days) {\n    fish_table$freq[fish_table$days == 6] <- sum(\n      subset(fish_table, days %in% c(6, -1))$freq\n    )\n    fish_table$days[fish_table$days == -1] <- 8\n  }\n\n  if (i < n) {\n    findNewFish(fish_table, i + 1, n)\n  } else {\n    fish_table\n  }\n}\n\nfindNFish <- function(fish, n = 80) {\n  fish_table <- table(fish)\n  fish_df <- data.frame(\n    days = as.integer(names(fish_table)),\n    freq = as.numeric(fish_table)\n  )\n  fish_df <- findNewFish(fish_df, n = n)\n  sum(fish_df$freq)\n}\n\nfindNFish(fish, n = 256)"
  },
  {
    "objectID": "year_2021/day_06/index.html#part-2-attempt-2",
    "href": "year_2021/day_06/index.html#part-2-attempt-2",
    "title": "2021 - Day 6",
    "section": "Part 2 Attempt 2",
    "text": "Part 2 Attempt 2\n\n\nCode\nperiods <- 0:8\nfish <- factor(scan(\"input.txt\", what = numeric(), sep = \",\", quiet = TRUE), periods)\nfish_cnt <- unclass(table(fish))\n\nn <- 256\nfor (i in seq(0, n %/% 7)) {\n  days <- min(7, n - i * 7)\n  tmp_fish_cnt <- setNames(fish_cnt, (periods - days) %% 9)\n  fish_cnt[periods >= days] <- 0\n  fish_cnt <- fish_cnt + tmp_fish_cnt[as.character(periods)]\n}\nsum(fish_cnt)\n\n\n[1] 1.590328e+12"
  },
  {
    "objectID": "year_2021/day_07/index.html",
    "href": "year_2021/day_07/index.html",
    "title": "2021 - Day 7",
    "section": "",
    "text": "Code\nmovements <- scan(\"input.txt\", what = numeric(), sep = \",\", quiet = TRUE)\nstr(movements)\n\n\n num [1:1000] 1101 1 29 67 1102 ..."
  },
  {
    "objectID": "year_2021/day_07/index.html#part-1",
    "href": "year_2021/day_07/index.html#part-1",
    "title": "2021 - Day 7",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nmin(vapply(\n  seq(min(movements), max(movements)), \n  \\(x) sum(abs(movements - x)), \n  numeric(1)\n))\n\n\n[1] 337488"
  },
  {
    "objectID": "year_2021/day_07/index.html#part-2",
    "href": "year_2021/day_07/index.html#part-2",
    "title": "2021 - Day 7",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\ntriangle_numbers <- sapply(seq(min(movements), max(movements)), \\(x) sum(seq(x)))\ntriangle_numbers[1] <- 0\nmin(sapply(\n  seq(min(movements), max(movements)), \n  \\(x) sum(triangle_numbers[abs(movements - x) + 1])\n))\n\n\n[1] 89647695"
  },
  {
    "objectID": "year_2021/day_08/index.html",
    "href": "year_2021/day_08/index.html",
    "title": "2021 - Day 8",
    "section": "",
    "text": "Code\ncol_names <- c(paste0(\"P\", 1:10), \"SEP\", paste0(\"I\", 1:4))\nnumbers <- read.delim(\"input.txt\", sep = \" \", header = FALSE, col.names = col_names)\nstr(numbers)\n\n\n'data.frame':   200 obs. of  15 variables:\n $ P1 : chr  \"afebd\" \"eabcdg\" \"fbeadcg\" \"adgcbe\" ...\n $ P2 : chr  \"ecdgfb\" \"fc\" \"fdcge\" \"bgaef\" ...\n $ P3 : chr  \"gacfed\" \"fbce\" \"deb\" \"cab\" ...\n $ P4 : chr  \"dgaeb\" \"dbfagc\" \"gcdeaf\" \"gbfadec\" ...\n $ P5 : chr  \"bf\" \"cagbdfe\" \"fdgb\" \"deacg\" ...\n $ P6 : chr  \"acefd\" \"cbdge\" \"bd\" \"bdcg\" ...\n $ P7 : chr  \"fgdabec\" \"fgc\" \"bedacg\" \"cfegad\" ...\n $ P8 : chr  \"bfd\" \"gfade\" \"cedbf\" \"gbcea\" ...\n $ P9 : chr  \"bedcaf\" \"ecdgfb\" \"feabc\" \"fbeadc\" ...\n $ P10: chr  \"bafc\" \"gfedc\" \"fcgdeb\" \"cb\" ...\n $ SEP: chr  \"|\" \"|\" \"|\" \"|\" ...\n $ I1 : chr  \"afcbed\" \"cf\" \"dbcfeg\" \"bgcd\" ...\n $ I2 : chr  \"fb\" \"fgbacd\" \"cbeagd\" \"gdcb\" ...\n $ I3 : chr  \"bfd\" \"fecb\" \"ebd\" \"acb\" ...\n $ I4 : chr  \"bdf\" \"becdg\" \"db\" \"gabced\" ..."
  },
  {
    "objectID": "year_2021/day_08/index.html#part-1",
    "href": "year_2021/day_08/index.html#part-1",
    "title": "2021 - Day 8",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nsum(sapply(numbers[, paste0(\"I\", 1:4)], nchar) %in% c(2, 3, 4, 7))\n\n\n[1] 554"
  },
  {
    "objectID": "year_2021/day_08/index.html#part-2",
    "href": "year_2021/day_08/index.html#part-2",
    "title": "2021 - Day 8",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\ngetNumberOrder <- function(x) {\n  y <- setNames(character(10), paste0(\"N\", 0:9))\n  x <- x[order(nchar(x), x)]\n  # 1, 4, 7, 8\n  y[c(2, 8, 5, 9)] <- x[c(1, 2, 3, 10)]\n  # 2\n  y[3] <- x[4:6][sapply(strsplit(x[4:6], \"\"), \\(y) sum(y %in% strsplit(x[3], \"\")[[1]]) == 2)]\n  # 3\n  y[4] <- x[4:6][sapply(strsplit(x[4:6], \"\"), \\(y) all(strsplit(x[1], \"\")[[1]] %in% y))]\n  # 5\n  y[6] <- setdiff(x[4:6], y[3:4])\n  # 6\n  y[7] <- x[7:9][sapply(strsplit(x[7:9], \"\"), \\(y) !all(strsplit(x[2], \"\")[[1]] %in% y))]\n  # 9\n  y[10] <- x[7:9][sapply(strsplit(x[7:9], \"\"), \\(y) all(strsplit(x[3], \"\")[[1]] %in% y))]\n  # 0\n  y[1] <- setdiff(x[7:9], y[c(7, 10)])\n  y\n}\n\ngetNumber <- function(x) {\n  y <- match(x[paste0(\"I\", 1:4)], x[paste0(\"N\", 0:9)]) - 1\n  as.numeric(paste(y, collapse = \"\"))\n}\n\nnumbers <- sapply(numbers, \\(x) sapply(lapply(strsplit(x, \"\"), sort), paste0, collapse = \"\"))\nsorted_numbers <- t(apply(numbers[, paste0(\"P\", 1:10)], 1, getNumberOrder))\nnumbers <- cbind(numbers, sorted_numbers)\nsum(apply(numbers, 1, getNumber))\n\n\n[1] 990964"
  },
  {
    "objectID": "year_2021/day_09/index.html",
    "href": "year_2021/day_09/index.html",
    "title": "2021 - Day 9",
    "section": "",
    "text": "Code\npositions <- apply(do.call(rbind, strsplit(readLines(\"input.txt\"), \"\")), 2, as.numeric)"
  },
  {
    "objectID": "year_2021/day_09/index.html#part-1",
    "href": "year_2021/day_09/index.html#part-1",
    "title": "2021 - Day 9",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nright <- positions < cbind(positions[, 2:100], 10)\nleft <- positions < cbind(10, positions[, 1:99])\nup <- positions < rbind(10, positions[1:99, ])\ndown <- positions < rbind(positions[2:100, ], 10)\n\nsum(positions[right & left & up & down] + 1)\n\n\n[1] 444"
  },
  {
    "objectID": "year_2021/day_09/index.html#part-2",
    "href": "year_2021/day_09/index.html#part-2",
    "title": "2021 - Day 9",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nfindBasinSize <- function(x) {\n  points <- findSurroundingPoints(t(x))\n  nrow(points)\n}\n\nfindSurroundingPoints <- function(x) {\n  # Expanding all points left, right, up, down\n  y <- rbind(\n    x,\n    cbind(x[, \"row\"] - 1, x[, \"col\"]),\n    cbind(x[, \"row\"] + 1, x[, \"col\"]),\n    cbind(x[, \"row\"], x[, \"col\"] - 1),\n    cbind(x[, \"row\"], x[, \"col\"] + 1)\n  )\n\n  # Unique, within bounds, and value is not 9\n  y <- y[!duplicated(y), ]\n  y <- y[apply(y, 1, min) > 0 & apply(y, 1, max) <= 100, ]\n  y <- y[!positions[y] == 9, ]\n\n  # If no new points, return all points\n  if (nrow(x) != nrow(y)) {\n    findSurroundingPoints(y)\n  } else {\n    y\n  }\n}\n\nmin_positions <- which(right & left & up & down, arr.ind = TRUE)\nbasin_sizes <- apply(min_positions, 1, findBasinSize)\nprod(sort(basin_sizes, decreasing = TRUE)[1:3])\n\n\n[1] 1168440"
  },
  {
    "objectID": "year_2021/day_10/index.html",
    "href": "year_2021/day_10/index.html",
    "title": "2021 - Day 10",
    "section": "",
    "text": "Code\ncommands <- readLines(\"input.txt\")"
  },
  {
    "objectID": "year_2021/day_10/index.html#part-1",
    "href": "year_2021/day_10/index.html#part-1",
    "title": "2021 - Day 10",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nsub_commands <- commands\nmatching_regex <- \"\\\\(\\\\)|\\\\[\\\\]|\\\\{\\\\}|<>\"\n\nwhile (any(grepl(matching_regex, sub_commands))) {\n  sub_commands <- gsub(matching_regex, \"\", sub_commands)\n}\n\n# First invalid closing bracket\ninvalid_commands <- substr(gsub(\"\\\\(|\\\\[|\\\\{|<\", \"\", sub_commands), 1, 1)\ninvalid_commands <- invalid_commands[invalid_commands != \"\"]\n\nerror_sizes <- c(\")\" = 3, \"]\" = 57, \"}\" = 1197, \">\" = 25137)\nsum(table(invalid_commands) * error_sizes)\n\n\n[1] 392367"
  },
  {
    "objectID": "year_2021/day_10/index.html#part-2",
    "href": "year_2021/day_10/index.html#part-2",
    "title": "2021 - Day 10",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nincomplete_values <- c(\"(\", \"[\", \"{\", \"<\")\nincomplete_commands <- grep(\"\\\\)|\\\\}|\\\\]|>\", sub_commands, value = TRUE, invert = TRUE)\n\nincomplete_scores <- sapply(strsplit(incomplete_commands, \"\"), \\(x) {\n  scores <- rev(match(x, incomplete_values))\n  y <- 0\n  for (i in seq_along(scores)) y <- 5 * y + scores[i]\n  y\n})\nmedian(incomplete_scores)\n\n\n[1] 2192104158"
  },
  {
    "objectID": "year_2021/day_11/index.html",
    "href": "year_2021/day_11/index.html",
    "title": "2021 - Day 11",
    "section": "",
    "text": "Code\noctopi <- read.fwf(\"input.txt\", widths = rep(1, 10))\noctopi <- as.matrix(octopi)\nstr(octopi)\n\n\n int [1:10, 1:10] 5 3 4 3 3 8 7 1 6 4 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : chr [1:10] \"V1\" \"V2\" \"V3\" \"V4\" ..."
  },
  {
    "objectID": "year_2021/day_11/index.html#part-1",
    "href": "year_2021/day_11/index.html#part-1",
    "title": "2021 - Day 11",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\ncountNFlashes <- function(octopi, n = 100, i = 1, flashes = 0) {\n  octopi <- octopi + 1\n\n  new_flashing_octopi <- flashing_octopi <- octopi > 9\n  while (any(new_flashing_octopi)) {\n    new_locations <- which(new_flashing_octopi, arr.ind = TRUE)\n    updating_octopi <- apply(new_locations, 1, findSurroundingOctopi, simplify = FALSE)\n\n    for (j in seq_along(updating_octopi)) {\n      octopi[updating_octopi[[j]]] <- octopi[updating_octopi[[j]]] + 1\n    }\n\n    new_flashing_octopi <- octopi > 9 & !flashing_octopi\n    flashing_octopi <- octopi > 9\n  }\n\n  flashes <- flashes + sum(octopi > 9)\n  octopi[flashing_octopi] <- 0\n\n  if (i == n) {\n    flashes\n  } else {\n    countNFlashes(octopi, n, i + 1, flashes)\n  }\n}\n\nfindSurroundingOctopi <- function(x) {\n  # Getting box of locations\n  boxLocations <- \\(x) max(1, x - 1):min(10, x + 1)\n  rows <- boxLocations(x[1])\n  cols <- boxLocations(x[2])\n  cbind(row = rep(rows, times = length(cols)), col = rep(cols, each = length(rows)))\n}\n\ncountNFlashes(octopi)\n\n\n[1] 1785"
  },
  {
    "objectID": "year_2021/day_11/index.html#part-2",
    "href": "year_2021/day_11/index.html#part-2",
    "title": "2021 - Day 11",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nfindAllFlashes <- function(octopi, i = 1) {\n  octopi <- octopi + 1\n\n  new_flashing_octopi <- flashing_octopi <- octopi > 9\n  while (any(new_flashing_octopi)) {\n    new_locations <- which(new_flashing_octopi, arr.ind = TRUE)\n    updating_octopi <- apply(new_locations, 1, findSurroundingOctopi, simplify = FALSE)\n\n    for (j in seq_along(updating_octopi)) {\n      octopi[updating_octopi[[j]]] <- octopi[updating_octopi[[j]]] + 1\n    }\n\n    new_flashing_octopi <- octopi > 9 & !flashing_octopi\n    flashing_octopi <- octopi > 9\n  }\n\n  octopi[flashing_octopi] <- 0\n\n  if (all(flashing_octopi)) {\n    i\n  } else {\n    findAllFlashes(octopi, i + 1)\n  }\n}\n\nfindAllFlashes(octopi)\n\n\n[1] 354"
  },
  {
    "objectID": "year_2021/day_12/index.html",
    "href": "year_2021/day_12/index.html",
    "title": "2021 - Day 12",
    "section": "",
    "text": "Code\nlines <- read.delim(\"input.txt\", sep = \"-\", header = FALSE, col.names = c(\"a\", \"b\"))\nstr(lines)\n\n\n'data.frame':   21 obs. of  2 variables:\n $ a: chr  \"mx\" \"mx\" \"xq\" \"start\" ...\n $ b: chr  \"IQ\" \"HO\" \"start\" \"HO\" ...\n\n\nCode\npoints <- unique(unlist(lines))\nvalid_points <- setNames(rep(TRUE, length(points)), points)\nvisits <- setNames(rep(0, length(points)), points)\n\n\n\n\n\n\nCode\ngetNPaths <- function(lines, valid_points, visits, start = \"start\", finish = \"end\", max_visits = 1) {\n  # If at the end then can finish the path\n  if (start == finish) return(1)\n\n  # Cannot revisit lowercase points more than max_visits times\n  if (tolower(start) == start) {\n    if (start == \"start\") valid_points[start] <- FALSE\n    visits[start] <- visits[start] + 1\n    if (visits[start] == max_visits) {\n      valid_points[names(visits[visits >= 1])] <- FALSE\n    } else if (any(visits == max_visits)) {\n      valid_points[start] <- FALSE\n    }\n  }\n\n  next_vertices <- c(lines$a[lines$b == start], lines$b[lines$a == start])\n  next_vertices <- next_vertices[next_vertices %in% points[valid_points]]\n\n  if (length(next_vertices) == 0) {\n    0\n  } else {\n    sum(sapply(\n      next_vertices, getNPaths, lines = lines, visits = visits,\n      valid_points = valid_points, finish = finish, max_visits = max_visits\n    ))\n  }\n}"
  },
  {
    "objectID": "year_2021/day_12/index.html#part-1",
    "href": "year_2021/day_12/index.html#part-1",
    "title": "2021 - Day 12",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\ngetNPaths(lines, valid_points, visits)\n\n\n[1] 4749"
  },
  {
    "objectID": "year_2021/day_12/index.html#part-2",
    "href": "year_2021/day_12/index.html#part-2",
    "title": "2021 - Day 12",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\ngetNPaths(lines, valid_points, visits, max_visits = 2)\n\n\n[1] 123054"
  },
  {
    "objectID": "year_2021/day_13/index.html",
    "href": "year_2021/day_13/index.html",
    "title": "2021 - Day 13",
    "section": "",
    "text": "Code\ninput <- readLines(\"input.txt\")\nstr(input)\n\n\n chr [1:852] \"43,593\" \"1139,385\" \"1178,51\" \"216,679\" \"743,185\" \"1241,250\" ...\n\n\nCode\ninput_space <- which(input == \"\")\ncoordinates <- do.call(rbind, lapply(strsplit(input[seq(input_space - 1)], \",\"), as.numeric)) + 1\nfolds <- input[-seq(input_space)]\n\npaper <- matrix(FALSE, nrow = max(coordinates[, 2]), ncol = max(coordinates[, 1]))\npaper[as.matrix(coordinates[, c(2, 1)])] <- TRUE"
  },
  {
    "objectID": "year_2021/day_13/index.html#part-1",
    "href": "year_2021/day_13/index.html#part-1",
    "title": "2021 - Day 13",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nfoldPaper <- function(x, fold) {\n  position <- as.numeric(sub(\".*=\", \"\", fold)) + 1\n  if (grepl(\"x\", fold)) {\n    x[, seq(position - 1, 1)] | x[, seq(position + 1, ncol(x))]\n  } else {\n    x[seq(position - 1, 1), ] | x[seq(position + 1, nrow(x)), ]\n  }\n}\n\nsum(foldPaper(paper, folds[1]))\n\n\n[1] 704"
  },
  {
    "objectID": "year_2021/day_13/index.html#part-2",
    "href": "year_2021/day_13/index.html#part-2",
    "title": "2021 - Day 13",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nfor (fold in folds) paper <- foldPaper(paper, fold)\nmatrix(rev(ifelse(paper, \"O\", \"\")), nrow = 6)\n\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]\n[1,] \"O\"  \"\"   \"\"   \"O\"  \"\"   \"\"   \"O\"  \"O\"  \"\"   \"\"    \"\"    \"O\"   \"O\"   \"\"   \n[2,] \"O\"  \"\"   \"\"   \"O\"  \"\"   \"O\"  \"\"   \"\"   \"O\"  \"\"    \"O\"   \"\"    \"\"    \"O\"  \n[3,] \"O\"  \"O\"  \"O\"  \"O\"  \"\"   \"O\"  \"\"   \"\"   \"\"   \"\"    \"O\"   \"\"    \"\"    \"O\"  \n[4,] \"O\"  \"\"   \"\"   \"O\"  \"\"   \"O\"  \"\"   \"O\"  \"O\"  \"\"    \"O\"   \"O\"   \"O\"   \"O\"  \n[5,] \"O\"  \"\"   \"\"   \"O\"  \"\"   \"O\"  \"\"   \"\"   \"O\"  \"\"    \"O\"   \"\"    \"\"    \"O\"  \n[6,] \"O\"  \"\"   \"\"   \"O\"  \"\"   \"\"   \"O\"  \"O\"  \"O\"  \"\"    \"O\"   \"\"    \"\"    \"O\"  \n     [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26]\n[1,] \"\"    \"\"    \"\"    \"O\"   \"O\"   \"\"    \"O\"   \"O\"   \"O\"   \"\"    \"\"    \"O\"  \n[2,] \"\"    \"\"    \"\"    \"\"    \"O\"   \"\"    \"O\"   \"\"    \"\"    \"O\"   \"\"    \"O\"  \n[3,] \"\"    \"\"    \"\"    \"\"    \"O\"   \"\"    \"O\"   \"O\"   \"O\"   \"\"    \"\"    \"O\"  \n[4,] \"\"    \"\"    \"\"    \"\"    \"O\"   \"\"    \"O\"   \"\"    \"\"    \"O\"   \"\"    \"O\"  \n[5,] \"\"    \"O\"   \"\"    \"\"    \"O\"   \"\"    \"O\"   \"\"    \"\"    \"O\"   \"\"    \"O\"  \n[6,] \"\"    \"\"    \"O\"   \"O\"   \"\"    \"\"    \"O\"   \"O\"   \"O\"   \"\"    \"\"    \"O\"  \n     [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38]\n[1,] \"O\"   \"O\"   \"O\"   \"\"    \"O\"   \"\"    \"\"    \"O\"   \"\"    \"\"    \"O\"   \"O\"  \n[2,] \"\"    \"\"    \"\"    \"\"    \"O\"   \"\"    \"\"    \"O\"   \"\"    \"O\"   \"\"    \"\"   \n[3,] \"O\"   \"O\"   \"\"    \"\"    \"O\"   \"O\"   \"O\"   \"O\"   \"\"    \"O\"   \"\"    \"\"   \n[4,] \"\"    \"\"    \"\"    \"\"    \"O\"   \"\"    \"\"    \"O\"   \"\"    \"O\"   \"\"    \"\"   \n[5,] \"\"    \"\"    \"\"    \"\"    \"O\"   \"\"    \"\"    \"O\"   \"\"    \"O\"   \"\"    \"\"   \n[6,] \"O\"   \"O\"   \"O\"   \"\"    \"O\"   \"\"    \"\"    \"O\"   \"\"    \"\"    \"O\"   \"O\"  \n     [,39] [,40]\n[1,] \"\"    \"\"   \n[2,] \"O\"   \"\"   \n[3,] \"\"    \"\"   \n[4,] \"\"    \"\"   \n[5,] \"O\"   \"\"   \n[6,] \"\"    \"\"   \n\n\nCode\n# Nicer print\ncat(rev(t(cbind(\"\\n\", ifelse(paper, \"O\", \" \")))), sep = \"\")\n\n\nO  O  OO   OO    OO OOO  OOOO O  O  OO  \nO  O O  O O  O    O O  O O    O  O O  O \nOOOO O    O  O    O OOO  OOO  OOOO O    \nO  O O OO OOOO    O O  O O    O  O O    \nO  O O  O O  O O  O O  O O    O  O O  O \nO  O  OOO O  O  OO  OOO  OOOO O  O  OO"
  },
  {
    "objectID": "year_2021/day_14/index.html",
    "href": "year_2021/day_14/index.html",
    "title": "2021 - Day 14",
    "section": "",
    "text": "Code\nstring <- scan(\"input.txt\", 1, what = character(), sep = \"\")\nstr(string)\n\n\n chr \"OHFNNCKCVOBHSSHONBNF\"\n\n\nCode\ninsertions <- read.delim(\n  \"input.txt\", \n  sep = \" \", \n  skip = 2, \n  header = FALSE, \n  col.names = c(\"a\", \"x\", \"b\")\n)\nstr(insertions)\n\n\n'data.frame':   100 obs. of  3 variables:\n $ a: chr  \"SV\" \"KP\" \"FP\" \"VP\" ...\n $ x: chr  \"->\" \"->\" \"->\" \"->\" ...\n $ b: chr  \"O\" \"H\" \"B\" \"V\" ...\n\n\nCode\ninsertions <- insertions[order(insertions$a), ]\ninsertions$ab <- paste0(substr(insertions$a, 1, 1), insertions$b)\ninsertions$ba <- paste0(insertions$b, substr(insertions$a, 2, 2))"
  },
  {
    "objectID": "year_2021/day_14/index.html#part-1",
    "href": "year_2021/day_14/index.html#part-1",
    "title": "2021 - Day 14",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\ninsertCharacters <- function(x, i = 1, n = 10) {\n  nchars <- nchar(x)\n  combs <- sapply(seq(nchars - 1), \\(y) substr(x, y, y + 1))\n  combs2 <- sapply(combs, \\(y) if (y %in% insertions$a) insertions$ab[insertions$a == y] else substr(y, 1, 1))\n  y <- paste0(c(combs2, substr(x, nchars, nchars)), collapse = \"\")\n\n  if (i == n) {\n    y\n  } else {\n    insertCharacters(y, i + 1, n)\n  }\n}\n\nfull_string <- insertCharacters(string)\nstring_count <- table(strsplit(full_string, \"\")[[1]])\nmax(string_count) - min(string_count)\n\n\n[1] 2590"
  },
  {
    "objectID": "year_2021/day_14/index.html#part-2",
    "href": "year_2021/day_14/index.html#part-2",
    "title": "2021 - Day 14",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nfindCharacterCounts <- function(x, n = 10) {\n  nchars <- nchar(x)\n  combs <- sapply(seq(nchars - 1), \\(y) substr(x, y, y + 1))\n  combs <- factor(combs, sort(insertions$a))\n  counts <- table(combs)\n\n  for (i in 1:n) counts <- addStrings(counts)\n\n  string_count <- sapply(\n    sort(unique(insertions$b)),\n    \\(y) sum(counts[grepl(paste0(y, \"$\"), names(counts))]) + as.numeric(y == substr(x, 1, 1))\n  )\n  max(string_count) - min(string_count)\n}\n\naddStrings <- function(x) {\n  x <- tapply(rep(as.numeric(x), times = 2), c(insertions$ab, insertions$ba), sum)\n  x <- setNames(x[insertions$a], insertions$a)\n  x[is.na(x)] <- 0\n  x\n}\n\nfindCharacterCounts(string)\n\n\n[1] 2590\n\n\nCode\nfindCharacterCounts(string, 40)\n\n\n[1] 2.875665e+12"
  },
  {
    "objectID": "year_2021/day_15/index.html",
    "href": "year_2021/day_15/index.html",
    "title": "2021 - Day 15",
    "section": "",
    "text": "Code\nrisk <- as.matrix(read.fwf(\"input.txt\", rep(1, 100), header = FALSE))\nstr(risk)\n\n\n int [1:100, 1:100] 4 7 2 9 1 1 9 8 2 7 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : chr [1:100] \"V1\" \"V2\" \"V3\" \"V4\" ...\n\n\n\n\n\n\nCode\ngetRisk <- function(risk) {\n  size <- nrow(risk)\n  distance <- matrix(Inf, size, size)\n  distance[1, 1] <- 0\n  distance[-1, 1] <- cumsum(risk[-1, 1])\n  distance[1, -1] <- cumsum(risk[1, -1])\n\n  # First iteration only looks at moving right/down (what I thought was all that happened...)\n  for (x in seq(2, size)) {\n    for (y in seq(2, size)) {\n      distance[x, y] <- risk[x, y] + min(distance[cbind(c(x - 1, x), c(y, y - 1))])\n    }\n  }\n\n  # Checks if can move/left with lower risk\n  reducible <- distance > risk + rbind(distance[2:size, ], Inf) |\n    distance > risk + cbind(distance[, 2:size], Inf)\n\n  while (any(reducible)) {\n    for (x in seq(1, size)) {\n      for (y in seq(1, size)) {\n        # Checks all 4 directions for lowest risk\n        points <- cbind(c(x - 1, x, x, x + 1), c(y, y - 1, y + 1, y))\n        points <- points[points[, 1] >= 1 & points[, 1] <= size & points[, 2] >= 1 & points[, 2] <= size, ]\n        distance[x, y] <- min(distance[x, y], risk[x, y] + min(distance[points]))\n      }\n    }\n    reducible <- distance > risk + rbind(distance[2:size, ], Inf) |\n      distance > risk + cbind(distance[, 2:size], Inf)\n  }\n\n  # Return bottom right element\n  distance[size, size]\n}"
  },
  {
    "objectID": "year_2021/day_15/index.html#part-1",
    "href": "year_2021/day_15/index.html#part-1",
    "title": "2021 - Day 15",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\ngetRisk(risk)\n\n\n[1] 527"
  },
  {
    "objectID": "year_2021/day_15/index.html#part-2",
    "href": "year_2021/day_15/index.html#part-2",
    "title": "2021 - Day 15",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nrisk2 <- cbind(risk, risk + 1, risk + 2, risk + 3, risk + 4)\nrisk2 <- rbind(risk2, risk2 + 1, risk2 + 2, risk2 + 3, risk2 + 4)\nrisk2[risk2 > 9] <- risk2[risk2 > 9] %% 10 + 1\ngetRisk(risk2)"
  },
  {
    "objectID": "year_2021/day_16/index.html",
    "href": "year_2021/day_16/index.html",
    "title": "2021 - Day 16",
    "section": "",
    "text": "Code\ntransmission <- strsplit(readLines(\"input.txt\"), \"\")[[1]]\nstr(transmission)\n\n\n chr [1:1344] \"C\" \"2\" \"0\" \"D\" \"7\" \"9\" \"0\" \"0\" \"A\" \"0\" \"1\" \"2\" \"F\" \"B\" \"9\" ...\n\n\nCode\ntransmission_bin <- strtoi(transmission, base = 16L)\nclass(transmission_bin) <- \"binmode\"\ntransmission_bin <- paste(as.character(transmission_bin), collapse = \"\")\n\n\n\n\n\n\nCode\nbinaryNumber <- function(number) {\n  x <- as.numeric(strsplit(number, \"\")[[1]])\n  sum(x * 2 ^ (seq(length(x) - 1, 0)))\n}\n\nfindPackets <- function(transmission_bin, type_1_run = 0, type_1_max = 1) {\n  version <- strtoi(substr(transmission_bin, 1, 3), 2L)\n  type_id <- strtoi(substr(transmission_bin, 4, 6), 2L)\n\n  if (isTRUE(type_id == 4)) {\n    i <- 7\n    number <- substr(transmission_bin, i + 1, i + 4)\n    while (substr(transmission_bin, i, i) == \"1\") {\n      i <- i + 5\n      number <- paste0(number, substr(transmission_bin, i + 1, i + 4))\n    }\n    i <- i + 5\n    number <- binaryNumber(number)\n    subpackages <- NULL\n  } else {\n    type_id_length <- substr(transmission_bin, 7, 7)\n\n    if (type_id_length == \"0\") {\n      length_subpackages <- strtoi(substr(transmission_bin, 8, 22), 2L)\n      subpackages <- findPackets(substr(transmission_bin, 23, 22 + length_subpackages))\n      i <- 23 + length_subpackages\n    } else {\n      n_subpackages <- strtoi(substr(transmission_bin, 8, 18), 2L)\n      subpackages <- findPackets(substr(transmission_bin, 19, nchar(transmission_bin)), 1, n_subpackages)\n      i <- nchar(transmission_bin) - subpackages[[n_subpackages]]$nchar + 1\n    }\n    number <- NULL\n  }\n\n  packet <- list(version = version, type = type_id, value = number, subpackages = subpackages)\n\n  remaining_transmission <- substr(transmission_bin, i, nchar(transmission_bin))\n  if (type_1_run == type_1_max) packet$nchar <- nchar(remaining_transmission)\n\n  if (length(remaining_transmission) > 0 && grepl(\"1\", remaining_transmission) && type_1_run != type_1_max) {\n    if (type_1_run > 0) type_1_run <- type_1_run + 1\n    c(list(packet), findPackets(remaining_transmission, type_1_run, type_1_max))\n  } else {\n    list(packet)\n  }\n}"
  },
  {
    "objectID": "year_2021/day_16/index.html#part-1",
    "href": "year_2021/day_16/index.html#part-1",
    "title": "2021 - Day 16",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\npackets <- findPackets(transmission_bin)[[1]]\npackets_unlisted <- unlist(packets)\nsum(packets_unlisted[grepl(\"version\", names(packets_unlisted))])"
  },
  {
    "objectID": "year_2021/day_16/index.html#part-2",
    "href": "year_2021/day_16/index.html#part-2",
    "title": "2021 - Day 16",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nfindPacketSum <- function(packet) {\n  if (packet$type == 0) {\n    sum(sapply(packet$subpackages, findPacketSum))\n  } else if (packet$type == 1) {\n    prod(sapply(packet$subpackages, findPacketSum))\n  } else if (packet$type == 2) {\n    min(sapply(packet$subpackages, findPacketSum))\n  } else if (packet$type == 3) {\n    max(sapply(packet$subpackages, findPacketSum))\n  } else if (packet$type == 4) {\n    packet$value\n  } else if (packet$type == 5) {\n    as.numeric(findPacketSum(packet$subpackages[[1]]) > findPacketSum(packet$subpackages[[2]]))\n  } else if (packet$type == 6) {\n    as.numeric(findPacketSum(packet$subpackages[[1]]) < findPacketSum(packet$subpackages[[2]]))\n  } else if (packet$type == 7) {\n    as.numeric(findPacketSum(packet$subpackages[[1]]) == findPacketSum(packet$subpackages[[2]]))\n  }\n}\nfindPacketSum(packets)"
  },
  {
    "objectID": "year_2021/day_17/index.html",
    "href": "year_2021/day_17/index.html",
    "title": "2021 - Day 17",
    "section": "",
    "text": "Code\ninput <- readLines(\"input.txt\")\nstr(input)\n\n\n chr \"target area: x=117..164, y=-140..-89\"\n\n\nCode\nedges <- setNames(\n  as.numeric(regmatches(input, gregexpr(\"(-|)\\\\d+\", input))[[1]]),\n  c(\"x1\", \"x2\", \"y1\", \"y2\")\n)"
  },
  {
    "objectID": "year_2021/day_17/index.html#part-1",
    "href": "year_2021/day_17/index.html#part-1",
    "title": "2021 - Day 17",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nsum(seq(abs(edges[\"y1\"]) - 1))\n\n\n[1] 9730"
  },
  {
    "objectID": "year_2021/day_17/index.html#part-2",
    "href": "year_2021/day_17/index.html#part-2",
    "title": "2021 - Day 17",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\ntriangle_numbers <- cumsum(seq(20))\nmin_x <- min(which(triangle_numbers >= edges[\"x1\"] & triangle_numbers <= edges[\"x2\"]))\nmax_x <- unname(edges[\"x2\"])\nmin_y <- unname(edges[\"y1\"])\nmax_y <- unname(abs(edges[\"y1\"]) - 1)\n\npotential_veloctiy <- cbind(\n  x = rep(min_x:max_x, each = max_y - min_y + 1),\n  y = rep(min_y:max_y, times = max_x - min_x + 1)\n)\n\nsum(apply(potential_veloctiy, 1, \\(velocity) {\n  x_pos <- cumsum(pmax(velocity[\"x\"] - 0:280, 0))\n  y_pos <- cumsum(velocity[\"y\"] - 0:280)\n  any(\n    x_pos >= edges[\"x1\"] & x_pos <= edges[\"x2\"] &\n      y_pos >= edges[\"y1\"] & y_pos <= edges[\"y2\"]\n  )\n}))\n\n\n[1] 4110"
  },
  {
    "objectID": "year_2021/day_18/index.html",
    "href": "year_2021/day_18/index.html",
    "title": "2021 - Day 18",
    "section": "",
    "text": "Code\nsnailfish <- readLines(\"input.txt\")\nstr(snailfish)\n\n\n chr [1:100] \"[[6,[[9,4],[5,1]]],[[[6,5],[9,4]],2]]\" ...\n\n\n\n\n\n\nCode\nfindReduction <- function(x) {\n  explode_loc <- findExplodeLocations(x)\n  split_loc <- findSplitLocations(x)\n\n  if (length(explode_loc) > 0) {\n    explodePair(x, explode_loc[1])\n  } else if (length(split_loc) > 0) {\n    splitPair(x, split_loc[1])\n  } else {\n    x\n  }\n}\n\nfindExplodeLocations <- function(x, depth = 4) {\n  pairs <- gregexpr(\"\\\\[\\\\d+,\\\\d+\\\\]\", x)[[1]]\n  opens <- cumsum((strsplit(x, \"\")[[1]] == \"[\") - (strsplit(x, \"\")[[1]] == \"]\"))\n  pairs[opens[pairs] > depth]\n}\n\nfindSplitLocations <- function(x) setdiff(as.numeric(gregexpr(\"\\\\d{2}\", x)[[1]]), -1)\n\nexplodePair <- function(x, pair_loc, recurse = TRUE) {\n  num1 <- num2 <- 0\n  init_str <- substr(x, 1, pair_loc - 1)\n  pair_str <- sub(\"(.?\\\\]).*\", \"\\\\1\", substr(x, pair_loc, nchar(x)))\n  first_num <- as.numeric(sub(\"\\\\[(\\\\d+),.*\", \"\\\\1\", pair_str))\n  second_num <- as.numeric(sub(\"\\\\[.*,(\\\\d+)\\\\]\", \"\\\\1\", pair_str))\n  end_str <- sub(pair_str, \"\", fixed = TRUE, substr(x, pair_loc, nchar(x)))\n\n  if (grepl(\"\\\\d\", init_str)) {\n    num1 <- as.numeric(sub(\".*[^0-9](\\\\d+)(?=[^0-9]+$).*\", \"\\\\1\", init_str, perl = TRUE)) + first_num\n    init_str <- sub(\"(?!<[^0-9])(\\\\d+)(?=[^0-9]+$)\", num1, init_str, perl = TRUE)\n  }\n\n  if (grepl(\"\\\\d\", end_str)) {\n    num2 <- as.numeric(regmatches(end_str, regexpr(\"\\\\d+\", end_str))) + second_num\n    end_str <- sub(\"\\\\d+\", num2, end_str)\n  }\n\n  findReduction(paste0(init_str, 0, end_str))\n}\n\nsplitPair <- function(x, number_loc, recurse = TRUE) {\n  init_str <- substr(x, 1, number_loc - 1)\n  end_str <- substr(x, number_loc + 2, nchar(x))\n  number <- as.numeric(substr(x, number_loc, number_loc + 1))\n\n  findReduction(paste0(init_str, \"[\", floor(number / 2), \",\", ceiling(number / 2), \"]\", end_str))\n}\n\nsumFish <- function(x) {\n  pairs <- gregexpr(\"\\\\[\\\\d+,\\\\d+\\\\]\", x)\n  pair_str <- regmatches(x, pairs)[[1]]\n  pair_num <- as.numeric(sub(\"^.?(\\\\d+).*\", \"\\\\1\", pair_str)) * 3 +\n    as.numeric(sub(\".*,(\\\\d+)\\\\]\", \"\\\\1\", pair_str)) * 2\n  new_x <- paste0(strsplit(x, \"\\\\[\\\\d+,\\\\d+\\\\]\")[[1]], c(pair_num, \"\"), collapse = \"\")\n  if (grepl(\"^\\\\[\", new_x)) new_x <- sumFish(new_x)\n  as.numeric(new_x)\n}"
  },
  {
    "objectID": "year_2021/day_18/index.html#part-1",
    "href": "year_2021/day_18/index.html#part-1",
    "title": "2021 - Day 18",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nfish_sum <- snailfish[1]\nfor (i in seq_along(snailfish)[-1]) {\n  fish_sum <- findReduction(paste0(\"[\", fish_sum, \",\", snailfish[i], \"]\"))\n}\nsumFish(fish_sum)\n\n\n[1] 4008"
  },
  {
    "objectID": "year_2021/day_18/index.html#part-2",
    "href": "year_2021/day_18/index.html#part-2",
    "title": "2021 - Day 18",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\ncombinations <- cbind(rep(snailfish, each = 100), rep(snailfish, times = 100))\ncombinations <- combinations[combinations[, 1] != combinations[, 2], ]\ncombinations_str <- paste0(\"[\", combinations[, 1], \",\", combinations[, 2], \"]\")\n\ndifferences <- sapply(combinations_str, \\(x) sumFish(findReduction(x)))\nmax(differences)\n\n\n[1] 4667"
  },
  {
    "objectID": "year_2021/day_19/index.html",
    "href": "year_2021/day_19/index.html",
    "title": "2021 - Day 19",
    "section": "",
    "text": "Code\ninput <- readLines(\"input.txt\")\nstr(input)\n\n\n chr [1:1105] \"--- scanner 0 ---\" \"645,-448,-766\" \"529,751,-867\" ...\n\n\nCode\ngaps <- c(0, which(input == \"\"))\norientations <- expand.grid(x = c(1, -1), y = c(1, -1), z = c(1, -1))\nscanners <- lapply(seq_along(gaps), \\(x) {\n  if (x == length(gaps)) nrows <- -1 else nrows <- gaps[x + 1] - gaps[x] - 2\n  beacons <- read.csv(\n    \"input.txt\", header = FALSE, skip = gaps[x] + 1, nrows = nrows,\n    col.names = c(\"x\", \"y\", \"z\")\n  )\n  beacons <- as.matrix(beacons)\n\n  # Everything said 24 directions, have mirrors here (so does make solution slower)\n  all_locations <- c(\n    apply(orientations, 1, \\(y) t(y * t(beacons)), simplify = FALSE),\n    apply(orientations, 1, \\(y) t(y * t(beacons[, c(\"x\", \"z\", \"y\")])), simplify = FALSE),\n    apply(orientations, 1, \\(y) t(y * t(beacons[, c(\"y\", \"x\", \"z\")])), simplify = FALSE),\n    apply(orientations, 1, \\(y) t(y * t(beacons[, c(\"y\", \"z\", \"x\")])), simplify = FALSE),\n    apply(orientations, 1, \\(y) t(y * t(beacons[, c(\"z\", \"x\", \"y\")])), simplify = FALSE),\n    apply(orientations, 1, \\(y) t(y * t(beacons[, c(\"z\", \"y\", \"x\")])), simplify = FALSE)\n  )\n\n  # Column rename for consistency\n  lapply(all_locations, \\(y) {colnames(y) <- c(\"x\", \"y\", \"z\"); y})\n})"
  },
  {
    "objectID": "year_2021/day_19/index.html#part-1",
    "href": "year_2021/day_19/index.html#part-1",
    "title": "2021 - Day 19",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\n# Scanner 1 is source of truth\nbeacon_locations <- scanners[[1]][[1]]\nto_scan <- seq(2, length(scanners))\nscanner_locations <- c(0, 0, 0)\n\nwhile (length(to_scan) > 0) {\n  for (i in to_scan) {\n    k <- length(scanners[[i]])\n    # Run through all combinations to look for connecting points\n    for (j in seq_along(scanners[[i]])) {\n      # Gets the x,y,z distances of each beacon to the known locations. Pasting together for speed\n      distances <- apply(scanners[[i]][[j]], 1, \\(x) {\n        m <- sweep(beacon_locations, 2, x)\n        paste(m[, 1], m[, 2], m[, 3])\n      })\n      distances_comb <- table(as.vector(distances))\n      if (any(distances_comb >= 12)) break\n    }\n\n    # If no overlap leave to be scanned again\n    if (j == length(scanners[[i]]) && !any(distances_comb >= 12)) next\n    to_scan <- setdiff(to_scan, i)\n\n    # Find the locations of the scanner and new beacons\n    translation <- as.numeric(strsplit(names(distances_comb[distances_comb >= 12]), \" \")[[1]])\n    scanner_locations <- rbind(scanner_locations, translation)\n    beacon_locations2 <- rbind(beacon_locations, sweep(scanners[[i]][[j]], 2, translation, \"+\"))\n    beacon_locations <- beacon_locations2[!duplicated(beacon_locations2), ]\n  }\n}\n\nnrow(beacon_locations)"
  },
  {
    "objectID": "year_2021/day_19/index.html#part-2",
    "href": "year_2021/day_19/index.html#part-2",
    "title": "2021 - Day 19",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nmax(apply(scanner_locations, 1, \\(x) max(rowSums(abs(sweep(scanner_locations, 2, x))))))"
  },
  {
    "objectID": "year_2021/day_20/index.html",
    "href": "year_2021/day_20/index.html",
    "title": "2021 - Day 20",
    "section": "",
    "text": "Code\nalgorithm <- scan(\"input.txt\", n = 1, sep = \"\", what = character())\nalgorithm <- ifelse(strsplit(algorithm, \"\")[[1]] == \"#\", 1, 0)\nstr(algorithm)\n\n\n num [1:512] 1 1 0 1 1 0 1 0 1 1 ...\n\n\nCode\nimage <- readLines(\"input.txt\")[-1:-2]\nimage <- do.call(rbind, lapply(strsplit(image, \"\"), \\(x) ifelse(x == \"#\", 1, 0)))\nstr(image)\n\n\n num [1:100, 1:100] 0 0 0 0 1 1 0 0 0 1 ...\n\n\n\n\n\n\nCode\nenhanceImage <- function(image, void = 0) {\n  # Padding\n  image_pad <- cbind(void, void, rbind(void, void, image, void, void), void, void)\n  new_image <- matrix(0, nrow(image_pad), ncol(image_pad))\n\n  inner_box <- 2:(ncol(image_pad) - 1)\n\n  for (i in inner_box) {\n    for (j in inner_box) {\n      bin_number <- paste0(t(image_pad[(i - 1):(i + 1), (j - 1):(j + 1)]), collapse = \"\")\n      new_image[i, j] <- algorithm[strtoi(bin_number, 2L) + 1]\n    }\n  }\n  new_image[inner_box, inner_box]\n}"
  },
  {
    "objectID": "year_2021/day_20/index.html#part-1",
    "href": "year_2021/day_20/index.html#part-1",
    "title": "2021 - Day 20",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nimage1 <- enhanceImage(image, 0)\nimage2 <- enhanceImage(image1, image1[1, 1])\nsum(image2)\n\n\n[1] 5391\n\n\nCode\nfor (i in seq(nrow(image2))) cat(ifelse(image2[i, ], \"#\", \".\"), \"\\n\", sep = \"\")\n\n\n....##.....##...#..#......##...##.###..#......##..##...#...##..##...##..##.........#..........###.#..##.\n....##..##..###.#..#####.####...#..###.##.##..###..###.##...####.####.########.####.#....##...##..#####.\n...#....##.#..#####...##.#.###.###.###.###.#..###.#..#.####.###..##..#.###.#.#..#.#####...####..#..#.###\n..#......###..#..#.......###.###.#...#.#.#....##...###...##.#....###..###.###...#..#..####.##.#..#.#.###\n.#..##..#.######..#######.##..#.....##.###..#.#......#...#..#..###...###..#....#.....####.#.....#.###..#\n.#.###.###.#####.....#.#.#.......#..#.#.##...##.#.#.####...#...##...#####.###.#.#.#...####..#.##.....##.\n.####.#..#.#.#..#...###.#.#.###..#....#....#.#...#.##...###..########...####.###.#.#######.#..#.###.##..\n.#..#.##.#...#.#..#.######..##..#..#..#..#.#.###........#....#.##..#.########..#..##.#.#.#..#..#####.#.#\n.##.#.#..######..#.#..#...#...#.#.###.#.#..#.###..#####....###..#.....##.##..#.#.#.####..#.#######..#.##\n.##..#..#.#..###.#####.#..#..#...###.##..###.#..##.#.#...##..#....#..##..#..#.....###...######..##.#.#..\n....#.####...#...##.#.##..##.#.###.#....########....###...##...#.##.#...#.#.##.#.#####.#.#..##.####...#.\n.....##.#.#..####.#..####..##..##..##.#.#....###...#.#..#.#.#.####...###.##....#.#.##...#.##..##..#..###\n.##.###..##..#.#.##.##......#.###.###.....###...#......####..##.###.##....###..#.##..#...##....#.#...###\n##.#.##...#.##.##.......#.#..#..###..##.#.#..##..##...####......##.##.#.#..#.####.###..#...#...#..##.##.\n#.####...###.##.#...#...###.#####..##..#...###...#.#.#...#....#..#..#.##...#.#####.##..#..#...#..##.#...\n...#.###....###.##..#..#..##......#...##..######...##..#..####.#.#.##.###.#.#....##.#...###.#.#.##..####\n##...###...#.#....#.######..#.##.#..##.#..##.#..#..#.#..#.#.#...##....####...###...####.#...#..####.####\n#..###.#...####.#.#...#.####.#.##.###.....##..#..###.#.###.#.#....####..##.##.##..##...##..#.##..#...##.\n#.###.###.#.##.##.###.#.##...##.#.###.#..#####.###...#....###.####.###.#####.#.......#.#.#.#...###.#.#..\n#.#..#.#####..#..#...#.#.#####.###..#.#..#.##..####.##...#..##..#.##..#####.#..##.#..#..##.#.#....#.##.#\n..###....#...#...#.###...###.#.#.#.##..##...#.#####.#.###..#...##.#..#....#.#....##.##.##.#.#.###.#####.\n..#.#.#...#..##.#.#..####.#...#.#.###.#####.##.##.##..###..######...#.###.....#....#.###..#....####..###\n..##....#...#..###.###.#.#.....####...###....###.#.#####.###....#..#.###.###..#.##.##.#...#....##.###...\n.###.....#.#.....#....###.##.#....###..##..####.#..#.#...#...##.#...#...##...#...#..#.##.#...#.##..#....\n.#..#.#.#..#.##...###.#...#..##.##....#.#.....###..####..#...##......##.###..#..##..#..###.#..##..##...#\n..######...#.....#.#....#.##.##..#..#.######.##...##.#..#....#.#...####.####...#.#.#.##...#.##.#.###.#..\n.###.#.#.#..#....##.#.##..#.##.#.#.##...##..#.#.######.##.#.####..##...#.#.###.###..###.###...#.......#.\n###..#...#.#.#.#..#....##.#.###...###.#.#.#.#..#..#.#..##....#..########.#......#.##..#.#..#..#..#.#####\n#.##.#.#.#.#..####.###...##...#.#.#....###.#.#...##.#.#.#.#.##.##...##.......###..#.##.####.##.#..#..###\n.#.#.##...#..##..#####.##..#.###.#.#.#..#..###..#....##..##..#.....#..#....#.###.#........#.#..#.###..#.\n.###.###.#.#..##.###..#..#...#..#....##.#.#..#....###.##..##.#..#...####.#...#....##.......####...#..#..\n.#..##.#..####.#.#.#####...#..#...#.##....#....####.##.#.###.#.....#.##..#...##..##.#.#.......###...##.#\n...##..###.....#..###.#...##...###..###.#..#.##....#...###.#..###.............#...#.#####..##......##..#\n...#....##...##...##......#######..####..#..#########.###.#...#.#...#.##....##.#.#.##.....###.##..####.#\n###.#.###.#.#########....#.##.....##...##.#..#...#....##.####..###..##.###....#.####.#####..##...#...##.\n#.#..#..##.#.#..#.#####.#...##.###.#..#..#.###.#...#.#.#.######.#..#..####.##.####..##.#.##.#....#..###.\n...##..#..#...#.#..###....#..#.#.####......#.#.#..##..#.##.#.###.###....##.##...#.####.##.##.##.#.#####.\n...............#..#.#.#.#...##.#....#.#..####..#.###.##.###.##.##..###..####.#######.###..#.#####.#####.\n...#...##...#.#.#.#...##..#....#.##...#.#...#..##..#.#....##.###.#..####......#..#.#.#...#.###..#.#...#.\n.###.#.#...##...#.##...#.######.....#.#.#..##.#...#.###.##....#.##.#..#...#.#.#.#.###.##.##....#.######.\n..##..#..#.#.#.###..#...##.###.#..###..#.#.#..###..###.##..###.##..#####..###.###.#.#####....##..#.##..#\n#######.#.#.#.#..#....#....#.......#.##....#####.##....#.###.###...#..###...#####.#.....####.#.#..###.##\n###.#.#..#.#..#...####.##.##.#...###.#.##.#..#.##...#......#.######.####..#...#.#..##....##...####.#.#..\n.##.##..####.####..##.##..#..###.##.####..#.##....##.#..#..##.##.###...#...##..#.#..####..##.#..##.#####\n.##..#.#...#....####..#...######.##..#.####..#.#.##.#.##...#.#.#..##.#.##.###...#.##.....##..##.##......\n..####.###.#..#.#...#####.#####...##.#.###....##.####.##.#.###.#.#.###......####.#..##.....#..###...#...\n.##...#.#.#.#.#...#.#######.##.#..#.##.####..##.#.###.###.#..#.#.##..#..####..####.#.....#.###..#...#..#\n..####.....#.#.#.#.##.####..#........#.#..##.#.#...#.##...#...########........##.####..#.####....#...#..\n##....#..#.#.#..########.#.#...#.#.#####....#..#..###.##.#.#.#...###..###....##...##..##.#..##.##.###..#\n#....##.#..............#.##.##.#.#...#..##.##.#...#....#..#..#.##.##.#....###.#.##.##.####.#.#.#.....##.\n#...##.....#.#.######........#...#.##.##.....##.##.....##.#.#.####..#...####.###.#.##.##.##.##.#########\n###..##.#......#.#..##..###.....###.########..#.#.#.#.####...####..##.#####....###.#....#.###.######....\n##..###....##.#.##.......###..#.##..###.#...#..###.##...##.#..#..####.#...#.#..#..###.#.#....##........#\n#.#####.#.##.##..######.....#.##.#.....###...#...#####.###.##...#.####...##....##..#######.#.#.##.#.###.\n.#####.#..##.#..##.#.##...#..##.###..#####..##.##...#.#.####..##.#..##.##...###.###.####...#...#..###.#.\n.#.##.###..#.#.##.#########......#####..###...##...#.##.#####.#...#.##.....##.##...#.###..##.#.#####.###\n.#.#########.....#..............##....#.#...##..#...#.......#####....##..##.#.#..#...##.####..###...#..#\n.#..#.#..#...#....#...##.#.#.##.#.#.#.#.##.#..##.##.##..##.####....##.#.#.##....#..######...######.#....\n.#.#.#..####.###..#..####..##..#.##.#..##..#.#..#......#.#.##.#..#####.#.#.#.#.#...#.#.#...##.#.###.###.\n#..##.#....#.#...#..#####....#.##.#....#..##..##..#.#.###..#.####..##...#...#.#...###....##..#.##..##.#.\n#.####.#.#....#...####.#...##.##.#..##..########.#.####.##...###....##.#.##..####...##.....#.#....##.#..\n##########......##.#...#.##.###.#.#.#...######.###.###.##...##..##...#...###.###.#....###...#..###.###..\n#..#.#.#..##.#.###..##..##..#.###.#.....##..#.#.##..#...#..#.#.##..#.#.#..#.###.##.###...#...#....#.#...\n#..##.#..####..#..###.#..#..#..##.###.##.#..#..#..##.###...##..#######..#.###.#....#.###.##.#..#.#..##..\n#.###.....#..#.##.##.####.#.######...#.#..###.#######.#.......#.#...##..###.#..###.##.###..#.##..###.#..\n##...##.##.###.###..##.#.#.#.####.#.#.#.###....##.....##.#.#...#...##..##..#.###.#.#.##..#...###########\n###.###...##..##..#.##.####...###..#.#.##..####..#######..#.##..##.....#.##.###.#.#...#.#..#..###..#.###\n.#..###..#..#.###.##..#.#..#.#...#....###..#.##.#.##..##.###....##..#.##....#..#..##.#.#.#.###..#.......\n#....##.##..#..##...#...#.##..#.###.#...###.#.#####...###.####.#.#..##....###..###.##..##.###.#####...#.\n#.#....#.#.##.###.##....###..#..#..#..##..##..#..#....#.###...####.#.......#..##.#.##.#...##.#####.#.###\n#.###....#.#.#...#.#.#.#...#..####...#..#...#..##.#..####.#....###.##..###.#.#...#....#...#....###.....#\n#.#.#.#...#.#.####.....#....#..####.#.##......#.#..###.....####..##...#.##.#####.......#..#.#.####.####.\n..#.###...##....###.##.##.#...#.##.##.###.#.######.#####....######....#.##.#####.#..###.#####.##..#....#\n..#.##...#######..#..#..##..##...#....####.##.#.....###.#.###.##.#..####..##...#..##..#.#.#..###.#.#.#..\n..#.....#.##.#.###..#.##.#.##.#####.#...########.......##.#....#...#.#.##.###.####.#.#.#.####...##.#.###\n....#...#.#...#.#.##.#..#..#...########.##..#..#.#.#...#.#..######...#.##.###.#.#...#####.#########.####\n.####.#.#..#.#..#...#...#.##.#.......#..#..####.####.#.###.#.##..##.#..##.##.##....##...###.#..#.#..##..\n####.##...##..#####.###.###.#.#...#..#.####.#.#.#.##.....###.#.###.#.#..#.######..###..#...##.#.#.#.##..\n#.###.##...#..#.#...###...####.#.###.#.##....#..#.#.#...#.#..##.#.#.#.##..#.#.#....#######..#....#..#.##\n##.##.#.#........#....###.##.#.#..##.....##.#...#.####.#..#..#.##.#..#.....#.#...#.###.#..#.#..#...#.##.\n#..###.#.####..###..#.###.....##..#...#.##..#.######.#.#..##....###..###..###.###.#####......#...#.#####\n....#.#...###.##....##..#.#..#.##..#..#.##.##.#..###.#.#.#.#..#.#..##.#......###..#..###...#...####..#.#\n.############..#.##.##..#....##..#...##.#...##..#..#.####..#...##...#...#...##.##..#.###.####.#.#...#...\n.#..#.#...##.###...#.#..##.##.##.#..##.#.##.##.##.##.##..##..##.#...#.....####.###.#.#####.##.....#.##..\n.###.#..#..##.#..#..#....#.#...##..#.#.#..#..##...##..#.#.###.#.....#...#.....#.###.#.##....#.#.#.##.###\n.#.#..#.#.#.###....#...##.#.#..##.###..##.#.#.####.#######...###.##.##.......#.##...#.##.#...###.##.#.#.\n....#..#.###..##.#####.##.#..##....###.##..#.#.##.##..##..#..##.#.###.#..#.#...##...##....#####..#.#...#\n.#...#.#.##.#..#.####.#.#.##..##..##..#####..####......##.......###.##..#.#.#.#.#..###...#.#.#.##.#.####\n.###.#...##...###.#...##.###...#..#####.#.##.##.#.#.##.#.##...##.##.....###.#..#.#.#....##..##.#.#.##.##\n..####...###.#..#.##.#.###.#.##...#.#######..#..####..##.....###..#...##.###..#.#......#....#.#..#####..\n...##...#..#.##.#...##..##..#.#...######.#..##..#####....#...##...######......###.##.....##.#.#####...##\n............#..#..#..#..#..#.#.#..#.#...#.###..##..#..#.#.####...##..#.###...##.#..#..###...##.#.##.#..#\n.####.####.##.#..#...###.#.#.#.#....#.#.#.....##....##..#####.##..##.#..####..##.....#.#...##.#####..###\n.#.#.###..####..##.####...#.####.#..###.#.##..##.....#..#..##.#...###.##.#.#.###.#.####......#####....#.\n..#.##.#.##....#.....#.#.#...###....#.##.#.#...##.########.....#.#.#.#.#.#...######...######..##.#.####.\n..###.#...#.##.##.###.###..#...######...###.#....##########..#####..#####.#...#####....#..#.##.......#..\n...#.##..########.####..##...##..#.######.#.#####.##....#.#.###.##.#.##.##...####..##.###..###..##..#...\n.#..##...##.#...##....#.#.##.##...##..##.#.#.......##..#..#...####.....#.#.#.#.##.....#..#.####.#.#.###.\n#..#..#..#....#.###..#.#.#..#.######..#.###...#..##.#.###..##......#.##.#.#######..#.#....##..#.#......#\n#.##......#..##..#####....#.#.....#.##.##.##.#.......##.##..##..###.##.#.#.#...###.###.##.#..#.#.##..###\n###.##.##..##...#.####..#......#.#.#.#.###.#..##.#.#..###..#..##..#..##.##..#####..#...#.####..##...#..#\n#.####.#..##.#.#.#..#..####...#....##.##.###.####.##.#....####.###...#.....#.#####...##########.#..#.###\n..##..#..#.#.####..###..#.###..#.#.#.#..#.#.##..#..#.####...#.#.#.##.#.##.....##..###.###......#.#######\n..#.#...#.#....#.#.#.#.....#.#......#.#....#.#....#.#.#.#.............#.#.....#.##.#..#.#............#.#"
  },
  {
    "objectID": "year_2021/day_20/index.html#part-2",
    "href": "year_2021/day_20/index.html#part-2",
    "title": "2021 - Day 20",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nimagex <- image\nfor (i in 1:50) imagex <- enhanceImage(imagex, imagex[1, 1])\nsum(imagex)\n\n\n[1] 16383"
  },
  {
    "objectID": "year_2021/day_21/index.html",
    "href": "year_2021/day_21/index.html",
    "title": "2021 - Day 21",
    "section": "",
    "text": "Code\nstart_positions <- read.delim(\n  \"input.txt\", header = FALSE, sep = \" \",\n  col.names = c(\"x\", \"player\", \"y\", \"z\", \"start\")\n)\nstr(start_positions)\n\n\n'data.frame':   2 obs. of  5 variables:\n $ x     : chr  \"Player\" \"Player\"\n $ player: int  1 2\n $ y     : chr  \"starting\" \"starting\"\n $ z     : chr  \"position:\" \"position:\"\n $ start : int  8 2"
  },
  {
    "objectID": "year_2021/day_21/index.html#part-1",
    "href": "year_2021/day_21/index.html#part-1",
    "title": "2021 - Day 21",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\naddScore <- function(p1, p2, s1 = 0, s2 = 0, turn = 1, i = 1, cnt = 3) {\n  code <- \"p1 <- (p1 + sum(i:(i + 2) %% 10)) %% 10; if (p1 == 0) p1 <- 10; s1 <- s1 + p1\"\n  if (turn == 2) code <- gsub(\"(p|s)1\", \"\\\\12\", code)\n  eval(parse(text = code))\n\n  if (s1 >= 1000 || s2 >= 1000) {\n    c(s1, s2)[c(s1, s2) < 1000] * cnt\n  } else {\n    addScore(p1, p2, s1, s2, 3 - turn, (i + 3) %/% 101 + (i + 3) %% 101, cnt + 3)\n  }\n}\n\naddScore(start_positions$start[1], start_positions$start[2])\n\n\n[1] 513936"
  },
  {
    "objectID": "year_2021/day_21/index.html#part-2",
    "href": "year_2021/day_21/index.html#part-2",
    "title": "2021 - Day 21",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\npot_scores <- expand.grid(1:3, 1:3, 1:3)\npot_values <- c(0, 0, table(rowSums(pot_scores)))\ncache <- list()\n\naddScore2 <- function(p1, p2, s1 = 0, s2 = 0, turn = 1, cnt = 1) {\n  cache_name <- paste(p1, p2, s1, s2, turn)\n  if (cache_name %in% names(cache)) {\n    cache[[cache_name]] * cnt\n  } else {\n    rowSums(\n      sapply(9:3, \\(x) {\n        if (turn == 1) {\n          p1 <- (p1 + x) %% 10; if (p1 == 0) p1 <- 10; s1 <- s1 + p1\n        } else {\n          p2 <- (p2 + x) %% 10; if (p2 == 0) p2 <- 10; s2 <- s2 + p2\n        }\n\n        if (s1 >= 21 || s2 >= 21) {\n          cnt * pot_values[[x]] * as.numeric(turn == c(1, 2))\n        } else  {\n          value <- addScore2(p1, p2, s1, s2, 3 - turn, cnt * pot_values[[x]])\n          cache_name <- paste(p1, p2, s1, s2, 3 - turn)\n          if (!cache_name %in% names(cache)) {\n            cache[[cache_name]] <<- value / cnt / pot_values[[x]]\n          }\n          value\n        }\n      })\n    )\n  }\n}\n\naddScore2(8, 2)"
  },
  {
    "objectID": "year_2021/day_22/index.html",
    "href": "year_2021/day_22/index.html",
    "title": "2021 - Day 22",
    "section": "",
    "text": "Code\ninstructions &lt;- readLines(\"input.txt\")\nstr(instructions)\n\n\n chr [1:420] \"on x=-17..30,y=-5..41,z=-33..14\" ...\n\n\nCode\ninst &lt;- as.data.frame(do.call(rbind, regmatches(instructions, gregexpr(\"on|off|(-|)\\\\d+\", instructions))))\nnames(inst) &lt;- c(\"switch\", \"x1\", \"x2\", \"y1\", \"y2\", \"z1\", \"z2\")\ninst[, -1] &lt;- sapply(inst[, -1], as.numeric)\ninst[, -1] &lt;- cbind(\n  x1 = pmin(inst$x1, inst$x2), x2 = pmax(inst$x1, inst$x2),\n  y1 = pmin(inst$y1, inst$y2), y2 = pmax(inst$y1, inst$y2),\n  z1 = pmin(inst$z1, inst$z2), z2 = pmax(inst$z1, inst$z2)\n)"
  },
  {
    "objectID": "year_2021/day_22/index.html#part-1",
    "href": "year_2021/day_22/index.html#part-1",
    "title": "2021 - Day 22",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nmini_inst &lt;- inst\nmini_inst[, -1] &lt;- mini_inst[, -1] + 51\nmini_board &lt;- which(rowMeans(mini_inst[, -1] &gt;= 1 & mini_inst[, -1] &lt;= 101) == 1)\nswitches &lt;- array(0, c(101, 101, 101))\n\nfor (i in mini_board) {\n  value &lt;- as.numeric(mini_inst$switch[i] == \"on\")\n  switches[\n    seq(mini_inst$x1[i], mini_inst$x2[i]),\n    seq(mini_inst$y1[i], mini_inst$y2[i]),\n    seq(mini_inst$z1[i], mini_inst$z2[i])\n  ] &lt;- value\n}\nsum(switches)\n\n\n[1] 600458"
  },
  {
    "objectID": "year_2021/day_22/index.html#part-2",
    "href": "year_2021/day_22/index.html#part-2",
    "title": "2021 - Day 22",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nx &lt;- sort(unique(c(inst$x1, inst$x2 + 1)))\ny &lt;- sort(unique(c(inst$y1, inst$y2 + 1)))\nz &lt;- sort(unique(c(inst$z1, inst$z2 + 1)))\nlocs &lt;- array(0, lengths(list(x, y, z)))\n\nfor (i in seq(nrow(inst))) {\n  x_range &lt;- seq(which(inst$x1[i] == x), which(inst$x2[i] + 1 == x) - 1)\n  y_range &lt;- seq(which(inst$y1[i] == y), which(inst$y2[i] + 1 == y) - 1)\n  z_range &lt;- seq(which(inst$z1[i] == z), which(inst$z2[i] + 1 == z) - 1)\n  locs[as.matrix(expand.grid(x_range, y_range, z_range))] &lt;- as.numeric(inst$switch[i] == \"on\")\n}\n\non_points &lt;- which(locs == 1, arr.ind = TRUE)\non_points2 &lt;- on_points + 1\n\nsum(\n  (x[on_points2[, 1]] - x[on_points[, 1]]) *\n    (y[on_points2[, 2]] - y[on_points[, 2]]) *\n    (z[on_points2[, 3]] - z[on_points[, 3]])\n)"
  },
  {
    "objectID": "year_2021/day_22/index.html#part-2---attempt-2",
    "href": "year_2021/day_22/index.html#part-2---attempt-2",
    "title": "2021 - Day 22",
    "section": "Part 2 - Attempt 2",
    "text": "Part 2 - Attempt 2\n\n\nCode\nfindNCubes &lt;- function(x) sum(apply(abs(x[, c(\"x2\", \"y2\", \"z2\")] - x[, c(\"x1\", \"y1\", \"z1\")]) + 1, 1, prod))\n# c1 Current cube, c2 previous cube\nexcludeOverlap &lt;- function(c1, c2) {\n  # No Overlap\n  if (any(c1[, c(\"x1\", \"y1\", \"z1\")] &gt; c2[, c(\"x2\", \"y2\", \"z2\")]) |\n      any(c1[, c(\"x2\", \"y2\", \"z2\")] &lt; c2[, c(\"x1\", \"y1\", \"z1\")])) {\n    c1\n  # Full Outer Overlap\n  } else if (all(c1[, c(\"x1\", \"y1\", \"z1\")] &gt;= c2[, c(\"x1\", \"y1\", \"z1\")] &\n                 c1[, c(\"x2\", \"y2\", \"z2\")] &lt;= c2[, c(\"x2\", \"y2\", \"z2\")])) {\n    NULL\n    # Partial Outer Overlap\n  } else {\n    x_extra &lt;- y_extra &lt;- z_extra &lt;- NULL\n    x1 &lt;- c1$x1\n    x2 &lt;- c1$x2\n    y1 &lt;- c1$y1\n    y2 &lt;- c1$y2\n    z1 &lt;- c1$z1\n    z2 &lt;- c1$z2\n\n    if (c1$x1 &lt; c2$x1 && c1$x2 &gt; c2$x2) {\n      x_extra &lt;- data.frame(x1 = c(x1, c2$x2 + 1), x2 = c(c2$x1, x2 + 1), y1 = y1, y2 = y2, z1 = z1, z2 = z2)\n      x1 &lt;- c2$x1\n      x2 &lt;- c2$x2\n    }\n    if (c1$y1 &lt; c2$y1 && c1$y2 &gt; c2$y2) {\n      y_extra &lt;- data.frame(x1 = x1, x2 = x2, y1 = c(y1, c2$y2 + 1), y2 = c(c2$y1, y2 + 1), z1 = z1, z2 = z2)\n      y1 &lt;- c2$y1\n      y2 &lt;- c2$y2\n    }\n    if (c1$z1 &lt; c2$z1 && c1$z2 &gt; c2$z2) {\n      z_extra &lt;- data.frame(x1 = x1, x2 = x2, y1 = y1, y2 = y2, z1 = c(c1$z1, c2$z2 + 1), z2 = c(c2$z1 - 1, c1$z2))\n      z1 &lt;- c2$z1\n      z2 &lt;- c2$z2\n    }\n\n    # Partial Inner Overlap\n    x_min &lt;- max(x1, c2$x1)\n    x_max &lt;- min(x2, c2$x2)\n    y_min &lt;- max(y1, c2$y1)\n    y_max &lt;- min(y2, c2$y2)\n\n    rbind(\n      if (x1 &gt;= c2$x1 && x2 &gt; c2$x2) data.frame(x1 = c2$x2 + 1, x2 = x2, y1 = y1, y2 = y2, z1 = z1, z2 = z2),\n      if (y1 &gt;= c2$y1 && y2 &gt; c2$y2) data.frame(x1 = x_min, x2 = x_max, y1 = c2$y2 + 1, y2 = y2, z1 = z1, z2 = z2),\n      if (z1 &gt;= c2$z1 && z2 &gt; c2$z2) data.frame(x1 = x_min, x2 = x_max, y1 = y_min, y2 = y_max, z1 = c2$z2 + 1, z2 = z2),\n      if (x2 &lt;= c2$x2 && x1 &lt; c2$x1) data.frame(x1 = x1, x2 = c2$x1 - 1, y1 = y1, y2 = y2, z1 = z1, z2 = z2),\n      if (y2 &lt;= c2$y2 && y1 &lt; c2$y1) data.frame(x1 = x_min, x2 = x_max, y1 = y1, y2 = c2$y1 - 1, z1 = z1, z2 = z2),\n      if (z2 &lt;= c2$z2 && z1 &lt; c2$z1) data.frame(x1 = x_min, x2 = x_max, y1 = y_min, y2 = y_max, z1 = z1, z2 = c2$z1 - 1),\n      x_extra,\n      y_extra,\n      z_extra\n    )\n  }\n}\n\non_cubes &lt;- inst[1, -1]\nfor (i in seq(2, nrow(inst))) {\n  print(i)\n  curr_cube &lt;- inst[i, -1]\n\n  if (inst$switch[i] == \"on\") {\n\n    for (j in seq(nrow(on_cubes))) {\n      new_spaces &lt;- NULL\n      for (k in seq(nrow(curr_cube))) {\n        new_spaces &lt;- rbind(new_spaces, excludeOverlap(curr_cube[k, ], on_cubes[j, ]))\n      }\n      curr_cube &lt;- new_spaces\n      if (is.null(curr_cube)) {\n        break\n      }\n    }\n    on_cubes &lt;- rbind(on_cubes, curr_cube)\n\n  } else {\n    new_spaces &lt;- NULL\n    for (j in seq(nrow(on_cubes))) {\n      new_spaces &lt;- rbind(new_spaces, excludeOverlap(c1 = on_cubes[j, ], c2 = inst[i, ]))\n    }\n    on_cubes &lt;- new_spaces\n  }\n}\n\nsum(switches)\nfindNCubes(on_cubes)"
  },
  {
    "objectID": "year_2021/day_23/index.html",
    "href": "year_2021/day_23/index.html",
    "title": "2021 - Day 23",
    "section": "",
    "text": "Code\nseats <- do.call(rbind, strsplit(readLines(\"input.txt\"), \"\"))\nstr(seats)\n\n\n chr [1:27, 1:15] \"#\" \"#\" \"#\" \" \" \" \" \" \" \" \" \"1\" \"1\" \"1\" \"1\" \"1\" \"1\" \"1\" ...\n\n\nCode\nenergy <- c(A = 1, B = 10, C = 100, D = 1000)\n\n\nThis was done with a piece of paper rather than coding…"
  },
  {
    "objectID": "year_2021/day_24/index.html",
    "href": "year_2021/day_24/index.html",
    "title": "2021 - Day 24",
    "section": "",
    "text": "Code\noptions(scipen = 20)\ncomms <- read.delim(\n  \"input.txt\", sep = \" \", header = FALSE,\n  col.names = c(\"com\", \"var\", \"val\")\n)\nstr(comms)\n\n\n'data.frame':   65 obs. of  3 variables:\n $ com: chr  \"inp\" \"ass\" \"add\" \"inp\" ...\n $ var: chr  \"w\" \"x\" \"z\" \"w\" ...\n $ val: chr  \"\" \"1\" \"(w+15)\" \"\" ...\n\n\nCode\ncomms$call <- NA_character_\ncomms[comms$com == \"inp\", \"call\"] <- paste(comms$var[comms$com == \"inp\"], \"<- w_vals\")\ncomms$input[comms$com == \"inp\"] <- seq_along(comms$var[comms$com == \"inp\"])\ncomms[comms$com == \"mul\", \"call\"] <- paste(\n  comms$var[comms$com == \"mul\"], \"<-\",\n  comms$var[comms$com == \"mul\"], \"*\", comms$val[comms$com == \"mul\"]\n)\ncomms[comms$com == \"mul\" & comms$val == \"0\", \"call\"] <- paste(\n  comms$var[comms$com == \"mul\" & comms$val == \"0\"], \"<- 0\"\n)\ncomms[comms$com == \"add\", \"call\"] <- paste(\n  comms$var[comms$com == \"add\"], \"<-\",\n  comms$var[comms$com == \"add\"], \"+\", comms$val[comms$com == \"add\"]\n)\ncomms[comms$com == \"ass\", \"call\"] <- paste(\n  comms$var[comms$com == \"ass\"], \"<-\", comms$val[comms$com == \"ass\"]\n)\ncomms[comms$com == \"div\", \"call\"] <- paste(\n  comms$var[comms$com == \"div\"], \"<-\",\n  comms$var[comms$com == \"div\"], \"%/%\", comms$val[comms$com == \"div\"]\n)\ncomms[comms$com == \"mod\", \"call\"] <- paste(\n  comms$var[comms$com == \"mod\"], \"<-\",\n  comms$var[comms$com == \"mod\"], \"%%\", comms$val[comms$com == \"div\"]\n)\ncomms[comms$com == \"neql\", \"call\"] <- paste(\n  comms$var[comms$com == \"neql\"], \"<- as.numeric(\",\n  comms$var[comms$com == \"neql\"], \"!=\", comms$val[comms$com == \"neql\"],\n  \")\"\n)"
  },
  {
    "objectID": "year_2021/day_24/index.html#part-1",
    "href": "year_2021/day_24/index.html#part-1",
    "title": "2021 - Day 24",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nw <- x <- z <- 0\nw_vals <- vals <- 9:1\n\nfor (i in seq(nrow(comms))) {\n  eval(parse(text = paste(comms$call[i])))\n  if (comms$com[i] == \"inp\" && i != 1) {\n    vals <- vals[!duplicated(z)]\n    z <- z[!duplicated(z)]\n\n    vals <- c(t(outer(vals, w_vals, paste0)))\n    z <- rep(z, each = 9)\n    w <- rep(w_vals, times = length(z) / 9)\n  }\n}\nvals[z == 0][1]"
  },
  {
    "objectID": "year_2021/day_24/index.html#part-2",
    "href": "year_2021/day_24/index.html#part-2",
    "title": "2021 - Day 24",
    "section": "Part 2",
    "text": "Part 2\n\n\nCode\nw <- x <- z <- 0\nw_vals <- vals <- 1:9\n\nfor (i in seq(nrow(comms))) {\n  eval(parse(text = paste(comms$call[i])))\n  if (comms$com[i] == \"inp\" && i != 1) {\n    vals <- vals[!duplicated(z)]\n    z <- z[!duplicated(z)]\n    cat(i, length(z), \"\\n\")\n\n    vals <- c(outer(vals, w_vals, paste0))\n    z <- rep(z, times = 9)\n    w <- rep(w_vals, each = length(z) / 9)\n  }\n}\nvals[z == 0][1]"
  },
  {
    "objectID": "year_2021/day_25/index.html",
    "href": "year_2021/day_25/index.html",
    "title": "2021 - Day 25",
    "section": "",
    "text": "Code\nfishes <- do.call(rbind, strsplit(readLines(\"input.txt\"), \"\"))\nstr(fishes)\n\n\n chr [1:137, 1:139] \">\" \">\" \">\" \">\" \".\" \"v\" \">\" \".\" \".\" \">\" \".\" \">\" \".\" \"v\" ..."
  },
  {
    "objectID": "year_2021/day_25/index.html#part-1",
    "href": "year_2021/day_25/index.html#part-1",
    "title": "2021 - Day 25",
    "section": "Part 1",
    "text": "Part 1\n\n\nCode\nright <- which(fishes == \">\", arr.ind = TRUE)\ndown <-  which(fishes == \"v\", arr.ind = TRUE)\nn_points <- nrow(right) + nrow(down)\n\nn_row <- nrow(fishes)\nn_col <- ncol(fishes)\ni <- 0\nmoveable <- TRUE\n\nwhile (moveable) {\n  new_right <- cbind(row = right[, \"row\"], col = right[, \"col\"] + 1)\n  new_right[right[, \"col\"] == n_col, \"col\"] <- 1\n  r_intersections <- duplicated(rbind(right, down, new_right))[-1:-n_points]\n  new_right[r_intersections, ] <- right[r_intersections, ]\n  right <- new_right\n\n  new_down <- cbind(row = down[, \"row\"] + 1, col = down[, \"col\"])\n  new_down[down[, \"row\"] == n_row, \"row\"] <- 1\n  d_intersections <- duplicated(rbind(right, down, new_down))[-1:-n_points]\n  new_down[d_intersections, ] <- down[d_intersections, ]\n  down <- new_down\n\n  i <- i + 1\n  moveable <- !all(c(r_intersections, d_intersections))\n}\n\nprint(i)\n\n\n[1] 295"
  },
  {
    "objectID": "year_2022/day_01/index.html",
    "href": "year_2022/day_01/index.html",
    "title": "2022 - Day 1",
    "section": "",
    "text": "The jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves’ expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they’ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf’s inventory (if any) by a blank line."
  },
  {
    "objectID": "year_2022/day_01/index.html#set-up",
    "href": "year_2022/day_01/index.html#set-up",
    "title": "2022 - Day 1",
    "section": "Set-Up",
    "text": "Set-Up\nWhen the blank lines are read in, each NA represents a new elf’s calorie entry\n\n\nCode\ncalories <- as.integer(readLines(\"input.txt\"))\nhead(calories, 40)\n\n\n [1] 18313  2404 10479    NA  7011 10279  1496 10342  8918  3162  4525  4368\n[13]    NA 17242    NA 10920 14072  9754  4435  9396    NA  5915  2602  4032\n[25]  3303  2685  1856  1334  4865  6385  1733  5328    NA  8899  5482  3195\n[37]  7837  8986 13794    NA"
  },
  {
    "objectID": "year_2022/day_01/index.html#part-1",
    "href": "year_2022/day_01/index.html#part-1",
    "title": "2022 - Day 1",
    "section": "Part 1",
    "text": "Part 1\n\nIn case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they’d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000 (carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\n\n\nCode\nelves <- cumsum(is.na(calories))\nelf_calories <- vapply(split(calories, elves), sum, integer(1L), na.rm = TRUE)\nmax(elf_calories)\n\n\n[1] 71924"
  },
  {
    "objectID": "year_2022/day_01/index.html#part-2",
    "href": "year_2022/day_01/index.html#part-2",
    "title": "2022 - Day 1",
    "section": "Part 2",
    "text": "Part 2\n\nBy the time you calculate the answer to the Elves’ question, they’ve already realized that the Elf carrying the most Calories of food might eventually run out of snacks.\nTo avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.\nFind the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?\n\n\n\nCode\nsum(sort(elf_calories, decreasing = TRUE)[1:3])\n\n\n[1] 210406"
  },
  {
    "objectID": "year_2022/day_02/index.html",
    "href": "year_2022/day_02/index.html",
    "title": "2022 - Day 2",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw."
  },
  {
    "objectID": "year_2022/day_02/index.html#part-1",
    "href": "year_2022/day_02/index.html#part-1",
    "title": "2022 - Day 2",
    "section": "Part 1",
    "text": "Part 1\n\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nWhat would your total score be if everything goes exactly according to your strategy guide?\n\n\nSet-Up\nRecoding the plays to 1, 2, 3 for easier summing\n\n\nCode\nrps <- read.table(\"input.txt\", col.names = c(\"elf_play\", \"my_play\"))\nrps$elf_rps <- with(rps, match(elf_play, LETTERS[1:3]))\nrps$my_rps <- with(rps, match(my_play, LETTERS[24:26]))\nhead(rps)\n\n\n  elf_play my_play elf_rps my_rps\n1        B       Y       2      2\n2        A       Z       1      3\n3        A       Z       1      3\n4        B       Y       2      2\n5        A       Z       1      3\n6        B       X       2      1\n\n\nUsing modulus 3 to calculate my_outcome, where 0 is a loss, 1 is a draw and 2 is a win, helps to sum the play and outcome together.\nIn my original attempt, I added the modulus in the wrong place, and then manually changed the values that would’ve been covered by %%.\n\nInitial SolutionCleaned Solution\n\n\n\n\nCode\nrps$my_outcome <- with(rps, (my_rps %% 3) - (elf_rps %% 3))\nrps$my_outcome <- with(\n  rps, ifelse(my_outcome == 2, -1, ifelse(my_outcome == -2, 1, my_outcome))\n)\nrps$my_score <- with(rps, my_rps + 3 * (1 + my_outcome))\nsum(rps$my_score)\n\n\n[1] 10310\n\n\n\n\n\n\nCode\nrps$my_outcome <- with(rps, (1 + my_rps - elf_rps) %% 3)\nrps$my_score <- with(rps, my_rps + 3 * my_outcome)\nsum(rps$my_score)\n\n\n[1] 10310"
  },
  {
    "objectID": "year_2022/day_02/index.html#part-2",
    "href": "year_2022/day_02/index.html#part-2",
    "title": "2022 - Day 2",
    "section": "Part 2",
    "text": "Part 2\n\nThe Elf finishes helping with the tent and sneaks back over to you. “Anyway, the second column says how the round needs to end: X means you need to lose, Y means you need to end the round in a draw, and Z means you need to win. Good luck!”\n\nWe already have the outcome score this time, so just need to work out whether we are to play rock, paper or scissors.\nAgain, using modulus makes things a lot easier to calculate scores, rather than the more manual ifelse.\n\nInitial SolutionCleaned Solution\n\n\n\n\nCode\nrps$my_rps_2 <- with(\n  rps,\n  ifelse(\n    my_play == \"X\",\n    ifelse(elf_rps == 1, 3, elf_rps - 1),\n  ifelse(\n    my_play == \"Y\",\n    elf_rps,\n    ifelse(elf_rps == 3, 1, elf_rps + 1)\n  )\n))\nrps$my_score_2 <- with(rps, my_rps_2 + 3 * (my_rps - 1))\nsum(rps$my_score_2)\n\n\n[1] 14859\n\n\n\n\n\n\nCode\nrps$my_rps_2 <- with(rps, (elf_rps + my_rps) %% 3 + 1)\nrps$my_score_2 <- with(rps, my_rps_2 + 3 * (my_rps - 1))\nsum(rps$my_score_2)\n\n\n[1] 14859\n\n\n\n\n\nLesson of the day, have a coffee before starting the puzzle, and don’t start coding before finishing reading."
  },
  {
    "objectID": "year_2022/day_03/index.html",
    "href": "year_2022/day_03/index.html",
    "title": "2022 - Day 3",
    "section": "",
    "text": "One Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn’t quite follow the packing instructions, and so a few items now need to be rearranged.\nEach rucksack has two large compartments. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.\nThe Elves have made a list of all of the items currently in each rucksack (your puzzle input), but they need your help finding the errors. Every item type is identified by a single lowercase or uppercase letter (that is, a and A refer to different types of items).\nThe list of items for each rucksack is given as characters all on a single line. A given rucksack always has the same number of items in each of its two compartments, so the first half of the characters represent items in the first compartment, while the second half of the characters represent items in the second compartment.\nTo help prioritize item rearrangement, every item type can be converted to a priority:\nLowercase item types a through z have priorities 1 through 26. Uppercase item types A through Z have priorities 27 through 52."
  },
  {
    "objectID": "year_2022/day_03/index.html#set-up",
    "href": "year_2022/day_03/index.html#set-up",
    "title": "2022 - Day 3",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\nrucksacks <- readLines(\"input.txt\")"
  },
  {
    "objectID": "year_2022/day_03/index.html#part-1",
    "href": "year_2022/day_03/index.html#part-1",
    "title": "2022 - Day 3",
    "section": "Part 1",
    "text": "Part 1\n\nFind the item type that appears in both compartments of each rucksack. What is the sum of the priorities of those item types?\n\n\n\nCode\nsplit_rucksack <- function(x) {\n  strsplit(c(substr(x, 1, nchar(x) / 2), substr(x, nchar(x) / 2 + 1, nchar(x))), \"\")\n}\nrucksacks_splits <- lapply(rucksacks, split_rucksack)\nrucksacks_intersects <- vapply(rucksacks_splits, \\(x) intersect(x[[1]], x[[2]]), character(1L))\nsum(match(rucksacks_intersects, c(letters, LETTERS)))\n\n\n[1] 8039"
  },
  {
    "objectID": "year_2022/day_03/index.html#part-2",
    "href": "year_2022/day_03/index.html#part-2",
    "title": "2022 - Day 3",
    "section": "Part 2",
    "text": "Part 2\n\nAs you finish identifying the misplaced items, the Elves come to you with another issue.\nFor safety, the Elves are divided into groups of three. Every Elf carries a badge that identifies their group. For efficiency, within each group of three Elves, the badge is the only item type carried by all three Elves. That is, if a group’s badge is item type B, then all three Elves will have item type B somewhere in their rucksack, and at most two of the Elves will be carrying any other item type.\nThe problem is that someone forgot to put this year’s updated authenticity sticker on the badges. All of the badges need to be pulled out of the rucksacks so the new authenticity stickers can be attached.\nAdditionally, nobody wrote down which item type corresponds to each group’s badges. The only way to tell which item type is the right one is by finding the one item type that is common between all three Elves in each group.\nFind the item type that corresponds to the badges of each three-Elf group. What is the sum of the priorities of those item types?\n\n\n\nCode\nrucksacks_splits2 <- lapply(rucksacks, \\(x) unlist(strsplit(x, \"\")))\nrucksacks_intersects2 <- vector(\"character\", 100)\nfor (i in seq(length(rucksacks_splits2) / 3)) {\n  rucksacks_intersects2[i] <- Reduce(intersect, rucksacks_splits2[1:3 + 3 * (i - 1)])\n}\nsum(match(rucksacks_intersects2, c(letters, LETTERS)))\n\n\n[1] 2510"
  },
  {
    "objectID": "year_2022/day_04/index.html#part-1",
    "href": "year_2022/day_04/index.html#part-1",
    "title": "2022 - Day 4",
    "section": "Part 1",
    "text": "Part 1\n\nSome of the pairs have noticed that one of their assignments fully contains the other. For example, 2-8 fully contains 3-7, and 6-6 is fully contained by 4-6. In pairs where one assignment fully contains the other, one Elf in the pair would be exclusively cleaning sections their partner will already be cleaning, so these seem like the most in need of reconsideration. In this example, there are 2 such pairs.\n\n\n\nCode\nwith(assignments, sum((A1 >= B1 & A2 <= B2) | (B1 >= A1 & B2 <= A2)))\n\n\n[1] 500"
  },
  {
    "objectID": "year_2022/day_04/index.html#part-2",
    "href": "year_2022/day_04/index.html#part-2",
    "title": "2022 - Day 4",
    "section": "Part 2",
    "text": "Part 2\n\nIt seems like there is still quite a bit of duplicate work planned. Instead, the Elves would like to know the number of pairs that overlap at all.\nIn how many assignment pairs do the ranges overlap?\n\n\n\nCode\nwith(assignments, sum((A1 <= B2 & A2 >= B2) | (B1 <= A2 & B2 >= A2)))\n\n\n[1] 815"
  },
  {
    "objectID": "year_2022/day_05/index.html#part-1",
    "href": "year_2022/day_05/index.html#part-1",
    "title": "2022 - Day 6",
    "section": "Part 1",
    "text": "Part 1\n\nAfter the rearrangement procedure completes, what crate ends up on top of each stack?\n\n\n\nCode\nblocks_p1 <- blocks\nfor (i in seq(nrow(operations))) {\n  blocks_p1[[operations$to[i]]] <- c(\n    blocks_p1[[operations$to[i]]],\n    rev(tail(blocks_p1[[operations$from[i]]], operations$move[i]))\n  )\n  blocks_p1[[operations$from[i]]] <- head(blocks_p1[[operations$from[i]]], -operations$move[i])\n}\nvapply(blocks_p1, tail, character(1L), n = 1) |> paste(collapse = \"\")\n\n\n[1] \"BSDMQFLSP\""
  },
  {
    "objectID": "year_2022/day_05/index.html#part-2",
    "href": "year_2022/day_05/index.html#part-2",
    "title": "2022 - Day 6",
    "section": "Part 2",
    "text": "Part 2\n\nAs you watch the crane operator expertly rearrange the crates, you notice the process isn’t following your prediction.\nSome mud was covering the writing on the side of the crane, and you quickly wipe it away. The crane isn’t a CrateMover 9000 - it’s a CrateMover 9001.\nThe CrateMover 9001 is notable for many new and exciting features: air conditioning, leather seats, an extra cup holder, and the ability to pick up and move multiple crates at once.\n\nSometimes it is as simple as removing a rev from the previous solution…\n\n\nCode\nfor (i in seq(nrow(operations))) {\n  blocks[[operations$to[i]]] <- c(\n    blocks[[operations$to[i]]],\n    tail(blocks[[operations$from[i]]], operations$move[i])\n  )\n  blocks[[operations$from[i]]] <- head(blocks[[operations$from[i]]], -operations$move[i])\n}\nvapply(blocks, tail, character(1L), n = 1) |> paste(collapse = \"\")\n\n\n[1] \"PGSQBFLDP\""
  },
  {
    "objectID": "year_2022/day_06/index.html#part-1",
    "href": "year_2022/day_06/index.html#part-1",
    "title": "2022 - Day 6",
    "section": "Part 1",
    "text": "Part 1\n\nHow many characters need to be processed before the first start-of-packet marker is detected?\n\nNormally I stick to using base-R functions, but {zoo} provides a nice wrapper around mapply to handle applying functions over a rolling set of elements.\n\nSolutionBase Solution\n\n\n\n\nCode\nwhich(zoo::rollapply(data_stream, 4, \\(x) length(unique(x)) == 4))[1] + 3\n\n\n[1] 1238\n\n\n\n\n\n\nCode\nfor (i in seq_along(data_stream)) {\n  if (length(unique(data_stream[seq(i, i + 3)])) == 4) break\n}\nprint(i + 3)\n\n\n[1] 1238"
  },
  {
    "objectID": "year_2022/day_06/index.html#part-2",
    "href": "year_2022/day_06/index.html#part-2",
    "title": "2022 - Day 6",
    "section": "Part 2",
    "text": "Part 2\n\nYour device’s communication system is correctly detecting packets, but still isn’t working. It looks like it also needs to look for messages.\nA start-of-message marker is just like a start-of-packet marker, except it consists of 14 distinct characters rather than 4.\n\n\nSolutionBase Solution\n\n\n\n\nCode\nwhich(zoo::rollapply(data_stream, 14, \\(x) length(unique(x)) == 14))[1] + 13\n\n\n[1] 3037\n\n\n\n\n\n\nCode\nfor (i in seq_along(data_stream)) {\n  if (length(unique(data_stream[seq(i, i + 13)])) == 14) break\n}\nprint(i + 13)\n\n\n[1] 3037"
  },
  {
    "objectID": "year_2022/day_07/index.html#part-1",
    "href": "year_2022/day_07/index.html#part-1",
    "title": "2022 - Day 7",
    "section": "Part 1",
    "text": "Part 1\n\nSince the disk is full, your first step should probably be to find directories that are good candidates for deletion. To do this, you need to determine the total size of each directory. The total size of a directory is the sum of the sizes of the files it contains, directly or indirectly. (Directories themselves do not count as having any intrinsic size.)\nFind all of the directories with a total size of at most 100000. What is the sum of the total sizes of those directories?\n\nThe last helper function is required here. Now we have the file tree, we need to recursively sum up all children files. Here I create a recursive function to grab all of the sub-directories and find their total sizes. Either way, a sum of the directory is calculated.\nThe list is then squashed into a vector to easily find the small directories.\n\n\nCode\nget_dir_size <- function(files) {\n  dirs <- sapply(files, is.list)\n  if (any(dirs)) {\n    c(\n      directory = sum(unlist(files, recursive = TRUE)),\n      lapply(files[dirs], get_dir_size)\n    )\n  } else {\n    sum(unlist(files, recursive = TRUE))\n  }\n}\n\ndir_sizes <- get_dir_size(files)\nstr(dir_sizes, 2)\n\n\nList of 10\n $ directory: num 45174025\n $ cmjgvh   :List of 4\n  ..$ directory: num 1105372\n  ..$ hdh      : num 267125\n  ..$ hgrpfmt  : num 319727\n  ..$ sjgvbd   : num 27997\n $ czrzl    :List of 2\n  ..$ directory: num 1382756\n  ..$ cmh      :List of 3\n $ fcbt     : num 150417\n $ hdh      :List of 5\n  ..$ directory: num 10851370\n  ..$ cljdmh   :List of 8\n  ..$ fptsr    :List of 3\n  ..$ schjz    : num 586947\n  ..$ vrrcrhzs :List of 2\n $ jgrdd    : num 325202\n $ lqblqtng :List of 4\n  ..$ directory: num 27642694\n  ..$ bbzv     : num 326190\n  ..$ gzqqp    :List of 3\n  ..$ vgt      :List of 9\n $ pgvmpmn  : num 18511\n $ pqqcvcm  : num 502736\n $ zglbptq  :List of 4\n  ..$ directory: num 2935306\n  ..$ brhmv    :List of 3\n  ..$ hdh      : num 263470\n  ..$ mhnfrn   :List of 2\n\n\nCode\ndir_size_flat <- unlist(dir_sizes, recursive = TRUE)\nsum(dir_size_flat[dir_size_flat <= 100000])\n\n\n[1] 1077191"
  },
  {
    "objectID": "year_2022/day_07/index.html#part-2",
    "href": "year_2022/day_07/index.html#part-2",
    "title": "2022 - Day 7",
    "section": "Part 2",
    "text": "Part 2\n\nNow, you’re ready to choose a directory to delete.\nThe total disk space available to the filesystem is 70000000. To run the update, you need unused space of at least 30000000. You need to find a directory you can delete that will free up enough space to run the update.\nFind the smallest directory that, if deleted, would free up enough space on the filesystem to run the update. What is the total size of that directory?\n\n\n\nCode\nmin(dir_size_flat[dir_size_flat >= dir_size_flat[[1]] - 40000000])\n\n\n[1] 5649896"
  },
  {
    "objectID": "year_2022/day_08/index.html#part-1",
    "href": "year_2022/day_08/index.html#part-1",
    "title": "2022 - Day 8",
    "section": "Part 1",
    "text": "Part 1\n\nEach tree is represented as a single digit whose value is its height, where 0 is the shortest and 9 is the tallest.\nA tree is visible if all of the other trees between it and an edge of the grid are shorter than it. Only consider trees in the same row or column; that is, only look up, down, left, or right from any given tree.\nConsider your map; how many trees are visible from outside the grid?\n\n\n\nCode\nvisible <- matrix(TRUE, nrow(heights), ncol(heights))\nfor (i in seq_len(nrow(heights))) {\n  for (j in seq_len(ncol(heights))) {\n    if (any(c(i, j) %in% c(1, nrow(heights)))) next\n\n    curr_pos <- heights[i, j]\n    visible[i, j] <- any(\n      all(curr_pos > heights[seq(i - 1), j]),\n      all(curr_pos > heights[seq(i + 1, 99), j]),\n      all(curr_pos > heights[i, seq(j - 1)]),\n      all(curr_pos > heights[i, seq(j + 1, 99)])\n    )\n  }\n}\n\nsum(visible)\n\n\n[1] 1688"
  },
  {
    "objectID": "year_2022/day_08/index.html#part-2",
    "href": "year_2022/day_08/index.html#part-2",
    "title": "2022 - Day 8",
    "section": "Part 2",
    "text": "Part 2\n\nContent with the amount of tree cover available, the Elves just need to know the best spot to build their tree house: they would like to be able to see a lot of trees.\nTo measure the viewing distance from a given tree, look up, down, left, and right from that tree; stop if you reach an edge or at the first tree that is the same height or taller than the tree under consideration. (If a tree is right on the edge, at least one of its viewing distances will be zero.)\nThe Elves don’t care about distant trees taller than those found by the rules above; the proposed tree house has large eaves to keep it dry, so they wouldn’t be able to see higher than the tree house anyway.\nA tree’s scenic score is found by multiplying together its viewing distance in each of the four directions.\nConsider each tree on your map. What is the highest scenic score possible for any tree?\n\n\n\nCode\nscenic <- matrix(0, nrow(heights), ncol(heights))\nfor (i in seq_len(nrow(heights))) {\n  for (j in seq_len(ncol(heights))) {\n    if (any(c(i, j) %in% c(1, nrow(heights)))) next\n\n    curr_pos <- heights[i, j]\n    left <- curr_pos <= heights[rev(seq(i - 1)), j]\n    right <- curr_pos <= heights[seq(i + 1, 99), j]\n    top <- curr_pos <= heights[i, rev(seq(j - 1))]\n    bottom <- curr_pos <= heights[i, seq(j + 1, 99)]\n    scenic[i, j] <- prod(\n      sum(cumsum(left) == 0) + any(left),\n      sum(cumsum(right) == 0) + any(right),\n      sum(cumsum(top) == 0) + any(top),\n      sum(cumsum(bottom) == 0) + any(bottom)\n    )\n  }\n}\n\nmax(scenic)\n\n\n[1] 410400"
  },
  {
    "objectID": "year_2022/day_09/index.html#part-1",
    "href": "year_2022/day_09/index.html#part-1",
    "title": "2022 - Day 9",
    "section": "Part 1",
    "text": "Part 1\n\nSimulate your complete hypothetical series of motions. How many positions does the tail of the rope visit at least once?\n\n\n\nCode\nhead_loc &lt;- c(0, 0)\ntail_loc &lt;- c(0, 0)\ntail_visits &lt;- matrix(c(0, 0), nrow = 1)\n\nfor (inst in split(instructions, seq(nrow(instructions)))) {\n  head_move &lt;- switch(inst$dir, L = c(-1, 0), R = c(1, 0), U = c(0, 1), D = c(0, -1))\n\n  for (move in seq(inst$n)) {\n    head_loc &lt;- head_loc + head_move\n    if (max(abs(head_loc - tail_loc)) &lt;= 1) {\n      tail_visits &lt;- rbind(tail_visits, tail_loc)\n      next\n    } else if (all(sort(abs(head_loc - tail_loc)) == c(0, 2))) {\n      tail_change &lt;- which(abs(head_loc - tail_loc) == 2)\n      tail_loc[tail_change] &lt;- (tail_loc + ifelse(head_loc &gt; tail_loc, 1, -1))[tail_change]\n    } else {\n      tail_loc &lt;- tail_loc + ifelse(head_loc &gt; tail_loc, 1, -1)\n    }\n    tail_visits &lt;- rbind(tail_visits, tail_loc)\n  }\n}\n\nsum(!duplicated(tail_visits))\n\n\n[1] 6642"
  },
  {
    "objectID": "year_2022/day_09/index.html#part-2",
    "href": "year_2022/day_09/index.html#part-2",
    "title": "2022 - Day 9",
    "section": "Part 2",
    "text": "Part 2\n\nA rope snaps! Suddenly, the river is getting a lot closer than you remember. The bridge is still there, but some of the ropes that broke are now whipping toward you as you fall through the air!\nThe ropes are moving too quickly to grab; you only have a few seconds to choose how to arch your body to avoid being hit. Fortunately, your simulation can be extended to support longer ropes.\nRather than two knots, you now must simulate a rope consisting of ten knots. One knot is still the head of the rope and moves according to the series of motions. Each knot further down the rope follows the knot in front of it using the same rules as before.\nNow, you need to keep track of the positions the new tail, 9, visits. In this example, the tail never moves, and so it only visits 1 position. However, be careful: more types of motion are possible than before, so you might want to visually compare your simulated rope to the one above.\nSimulate your complete series of motions on a larger rope with ten knots. How many positions does the tail of the rope visit at least once?\n\n\n\nCode\nhead_loc &lt;- c(0, 0)\ntail_locs &lt;- lapply(seq(9), \\(x) c(0, 0))\ntail9_visits &lt;- matrix(c(0, 0), nrow = 1)\n\nfor (inst in split(instructions, seq(nrow(instructions)))) {\n  head_move &lt;- switch(inst$dir, L = c(-1, 0), R = c(1, 0), U = c(0, 1), D = c(0, -1))\n\n  for (move in seq(inst$n)) {\n    head_loc &lt;- head_loc + head_move\n    if (max(abs(head_loc - tail_locs[[1]])) &lt;= 1) {\n      NULL\n    } else if (all(sort(abs(head_loc - tail_locs[[1]])) == c(0, 2))) {\n      tail_change &lt;- which(abs(head_loc - tail_locs[[1]]) == 2)\n      tail_locs[[1]][tail_change] &lt;- (tail_locs[[1]] + ifelse(head_loc &gt; tail_locs[[1]], 1, -1))[tail_change]\n    } else {\n      tail_locs[[1]] &lt;- tail_locs[[1]] + ifelse(head_loc &gt; tail_locs[[1]], 1, -1)\n    }\n\n    for (i in 2:9) {\n      if (max(abs(tail_locs[[i - 1]] - tail_locs[[i]])) &lt;= 1) {\n        NULL\n      } else if (all(sort(abs(tail_locs[[i - 1]] - tail_locs[[i]])) == c(0, 2))) {\n        tail_change &lt;- which(abs(tail_locs[[i - 1]] - tail_locs[[i]]) == 2)\n        tail_locs[[i]][tail_change] &lt;- (tail_locs[[i]] + ifelse(tail_locs[[i - 1]] &gt; tail_locs[[i]], 1, -1))[tail_change]\n      } else {\n        tail_locs[[i]] &lt;- tail_locs[[i]] + ifelse(tail_locs[[i - 1]] &gt; tail_locs[[i]], 1, -1)\n      }\n\n      if (i == 9) {\n        tail9_visits &lt;- rbind(tail9_visits, tail_locs[[i]])\n      }\n    }\n  }\n}\n\nsum(!duplicated(tail9_visits))"
  },
  {
    "objectID": "year_2022/day_10/index.html#part-1",
    "href": "year_2022/day_10/index.html#part-1",
    "title": "2022 - Day 10",
    "section": "Part 1",
    "text": "Part 1\n\nFind the signal strength during the 20th, 60th, 100th, 140th, 180th, and 220th cycles. What is the sum of these six signal strengths?\n\n\n\nCode\nsignals$cycle <- cumsum(ifelse(signals$action == \"noop\", 1, 2))\nsignals$total_strength <- 1 + cumsum(signals$strength)\n\nindexes <- c(20, 60, 100, 140, 180, 220)\nsapply(indexes, \\(x) with(signals, x * tail(total_strength[cycle < (x + (action == \"noop\"))], 1))) |> sum()\n\n\n[1] 16060"
  },
  {
    "objectID": "year_2022/day_10/index.html#part-2",
    "href": "year_2022/day_10/index.html#part-2",
    "title": "2022 - Day 10",
    "section": "Part 2",
    "text": "Part 2\n\nIt seems like the X register controls the horizontal position of a sprite. Specifically, the sprite is 3 pixels wide, and the X register sets the horizontal position of the middle of that sprite. (In this system, there is no such thing as “vertical position”: if the sprite’s horizontal position puts its pixels where the CRT is currently drawing, then those pixels will be drawn.)\nYou count the pixels on the CRT: 40 wide and 6 high. This CRT screen draws the top row of pixels left-to-right, then the row below that, and so on. The left-most pixel in each row is in position 0, and the right-most pixel in each row is in position 39.\nLike the CPU, the CRT is tied closely to the clock circuit: the CRT draws a single pixel during each cycle. Representing each pixel of the screen as a #, here are the cycles during which the first and last pixel in each row are drawn:\nCycle   1 -> ######################################## <- Cycle  40 Cycle  41 -> ######################################## <- Cycle  80 Cycle  81 -> ######################################## <- Cycle 120 Cycle 121 -> ######################################## <- Cycle 160 Cycle 161 -> ######################################## <- Cycle 200 Cycle 201 -> ######################################## <- Cycle 240\nSo, by carefully timing the CPU instructions and the CRT drawing operations, you should be able to determine whether the sprite is visible the instant each pixel is drawn. If the sprite is positioned such that one of its three pixels is the pixel currently being drawn, the screen produces a lit pixel (#); otherwise, the screen leaves the pixel dark (.).\nRender the image given by your program. What eight capital letters appear on your CRT?\n\nI missed the 0-index in this part so my first solution didn’t make much sense to me.\n\nSolutionCorrect Solution\n\n\n\n\nCode\npixels <- sapply(\n  seq(240),\n  \\(x) with(signals, ifelse(abs(x %% 40 - tail(total_strength[cycle <= x], 1)) <= 1, \"#\", \".\"))\n)\nmatrix(pixels, ncol = 40, byrow = TRUE) |> apply(1, paste, collapse = \"\")\n\n\n[1] \"##...##...##..####.#..#.#....#..#.####.#\"\n[2] \"..#.#..#.#..#.#....#.#..#....#..#.#....#\"\n[3] \"##..#..#.#....###..##...#....####.###..#\"\n[4] \"..#.####.#....#....#.#..#....#..#.#....#\"\n[5] \"..#.#..#.#..#.#....#.#..#....#..#.#....#\"\n[6] \"##..#..#..##..####.#..#.####.#..#.#.....\"\n\n\n\n\n\n\nCode\npixels <- sapply(\n  seq(240) - 1,\n  \\(x) with(signals, ifelse(abs(x %% 40 - tail(total_strength[cycle <= max(1, x)], 1)) <= 1, \"#\", \".\"))\n)\nmatrix(pixels, ncol = 40, byrow = TRUE) |> apply(1, paste, collapse = \"\")\n\n\n[1] \"###...##...##..####.#..#.#....#..#.####.\"\n[2] \"#..#.#..#.#..#.#....#.#..#....#..#.#....\"\n[3] \"###..#..#.#....###..##...#....####.###..\"\n[4] \"#..#.####.#....#....#.#..#....#..#.#....\"\n[5] \"#..#.#..#.#..#.#....#.#..#....#..#.#....\"\n[6] \"###..#..#..##..####.#..#.####.#..#.#....\""
  },
  {
    "objectID": "year_2022/day_11/index.html#part-1",
    "href": "year_2022/day_11/index.html#part-1",
    "title": "2022 - Day 11",
    "section": "Part 1",
    "text": "Part 1\n\nChasing all of the monkeys at once is impossible; you’re going to have to focus on the two most active monkeys if you want any hope of getting your stuff back. Count the total number of times each monkey inspects items over 20 rounds.\nFigure out which monkeys to chase by counting how many items they inspect over 20 rounds. What is the level of monkey business after 20 rounds of stuff-slinging simian shenanigans?\n\n\n\nCode\nfor (round in seq(20)) {\n  for (i in seq(8)) {\n    monkey <- get(paste0(\"monkey_\", i))\n    monkey$checkItems()\n    if (round == 20) {\n      print(paste(\"Monkey\", i, \"inspected items\", monkey$n_checks, \"times.\"))\n    }\n  }\n}\n\n\n[1] \"Monkey 1 inspected items 348 times.\"\n[1] \"Monkey 2 inspected items 22 times.\"\n[1] \"Monkey 3 inspected items 9 times.\"\n[1] \"Monkey 4 inspected items 330 times.\"\n[1] \"Monkey 5 inspected items 347 times.\"\n[1] \"Monkey 6 inspected items 335 times.\"\n[1] \"Monkey 7 inspected items 336 times.\"\n[1] \"Monkey 8 inspected items 45 times.\""
  },
  {
    "objectID": "year_2022/day_11/index.html#part-2",
    "href": "year_2022/day_11/index.html#part-2",
    "title": "2022 - Day 11",
    "section": "Part 2",
    "text": "Part 2\n\nYou’re worried you might not ever get your items back. So worried, in fact, that your relief that a monkey’s inspection didn’t damage an item no longer causes your worry level to be divided by three.\nUnfortunately, that relief was all that was keeping your worry levels from reaching ridiculous levels. You’ll need to find another way to keep your worry levels manageable.\nAt this rate, you might be putting up with these monkeys for a very long time - possibly 10000 rounds!\nWorry levels are no longer divided by three after each item is inspected; you’ll need to find another way to keep your worry levels manageable. Starting again from the initial state in your puzzle input, what is the level of monkey business after 10000 rounds?\n\nSome of the information in the monkeys I no longer needed, so I included a reset method to revert to the starting state. The modulus was created as the largest possible number required before the sequence would restart itself, meaning the divisors would loop for each MODULUS\n\n\nCode\nMODULUS <- 1\nfor (i in seq(8)) {\n  monkey <- get(paste0(\"monkey_\", i))\n  monkey$reset()\n  MODULUS <- MODULUS * monkey$divisor\n}\nprint(MODULUS)\n\n\n[1] 9699690\n\n\n\n\nCode\nfor (round in seq(10000)) {\n  for (i in seq(8)) {\n    monkey <- get(paste0(\"monkey_\", i))\n    monkey$checkItems(modulus = MODULUS)\n    if (round == 10000) {\n      print(paste(\"Monkey\", i, \"inspected items\", monkey$n_checks, \"times.\"))\n    }\n  }\n}\n\n\n[1] \"Monkey 1 inspected items 192836 times.\"\n[1] \"Monkey 2 inspected items 19711 times.\"\n[1] \"Monkey 3 inspected items 18259 times.\"\n[1] \"Monkey 4 inspected items 195229 times.\"\n[1] \"Monkey 5 inspected items 126789 times.\"\n[1] \"Monkey 6 inspected items 200326 times.\"\n[1] \"Monkey 7 inspected items 183570 times.\"\n[1] \"Monkey 8 inspected items 187056 times.\""
  },
  {
    "objectID": "year_2022/day_12/index.html#part-1",
    "href": "year_2022/day_12/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_12/index.html#part-2",
    "href": "year_2022/day_12/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_13/index.html#part-1",
    "href": "year_2022/day_13/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_13/index.html#part-2",
    "href": "year_2022/day_13/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_14/index.html#part-1",
    "href": "year_2022/day_14/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_14/index.html#part-2",
    "href": "year_2022/day_14/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_15/index.html#part-1",
    "href": "year_2022/day_15/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_15/index.html#part-2",
    "href": "year_2022/day_15/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_16/index.html#part-1",
    "href": "year_2022/day_16/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_16/index.html#part-2",
    "href": "year_2022/day_16/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_17/index.html#part-1",
    "href": "year_2022/day_17/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_17/index.html#part-2",
    "href": "year_2022/day_17/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_18/index.html#part-1",
    "href": "year_2022/day_18/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_18/index.html#part-2",
    "href": "year_2022/day_18/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_19/index.html#part-1",
    "href": "year_2022/day_19/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_19/index.html#part-2",
    "href": "year_2022/day_19/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_20/index.html#part-1",
    "href": "year_2022/day_20/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_20/index.html#part-2",
    "href": "year_2022/day_20/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_21/index.html#part-1",
    "href": "year_2022/day_21/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_21/index.html#part-2",
    "href": "year_2022/day_21/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_22/index.html#part-1",
    "href": "year_2022/day_22/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_22/index.html#part-2",
    "href": "year_2022/day_22/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_23/index.html#part-1",
    "href": "year_2022/day_23/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_23/index.html#part-2",
    "href": "year_2022/day_23/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_24/index.html#part-1",
    "href": "year_2022/day_24/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_24/index.html#part-2",
    "href": "year_2022/day_24/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_25/index.html#part-1",
    "href": "year_2022/day_25/index.html#part-1",
    "title": "Advent of Code",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2022/day_25/index.html#part-2",
    "href": "year_2022/day_25/index.html#part-2",
    "title": "Advent of Code",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_01/index.html#part-1",
    "href": "year_xxxx/day_01/index.html#part-1",
    "title": "xxxx - Day 1",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_01/index.html#part-2",
    "href": "year_xxxx/day_01/index.html#part-2",
    "title": "xxxx - Day 1",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_02/index.html#part-1",
    "href": "year_xxxx/day_02/index.html#part-1",
    "title": "xxxx - Day 2",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_02/index.html#part-2",
    "href": "year_xxxx/day_02/index.html#part-2",
    "title": "xxxx - Day 2",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_03/index.html#part-1",
    "href": "year_xxxx/day_03/index.html#part-1",
    "title": "xxxx - Day 3",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_03/index.html#part-2",
    "href": "year_xxxx/day_03/index.html#part-2",
    "title": "xxxx - Day 3",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_04/index.html#part-1",
    "href": "year_xxxx/day_04/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_04/index.html#part-2",
    "href": "year_xxxx/day_04/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_05/index.html#part-1",
    "href": "year_xxxx/day_05/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_05/index.html#part-2",
    "href": "year_xxxx/day_05/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_06/index.html#part-1",
    "href": "year_xxxx/day_06/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_06/index.html#part-2",
    "href": "year_xxxx/day_06/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_07/index.html#part-1",
    "href": "year_xxxx/day_07/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_07/index.html#part-2",
    "href": "year_xxxx/day_07/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_08/index.html#part-1",
    "href": "year_xxxx/day_08/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_08/index.html#part-2",
    "href": "year_xxxx/day_08/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_09/index.html#part-1",
    "href": "year_xxxx/day_09/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_09/index.html#part-2",
    "href": "year_xxxx/day_09/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_10/index.html#part-1",
    "href": "year_xxxx/day_10/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_10/index.html#part-2",
    "href": "year_xxxx/day_10/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_11/index.html#part-1",
    "href": "year_xxxx/day_11/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_11/index.html#part-2",
    "href": "year_xxxx/day_11/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_12/index.html#part-1",
    "href": "year_xxxx/day_12/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_12/index.html#part-2",
    "href": "year_xxxx/day_12/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_13/index.html#part-1",
    "href": "year_xxxx/day_13/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_13/index.html#part-2",
    "href": "year_xxxx/day_13/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_14/index.html#part-1",
    "href": "year_xxxx/day_14/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_14/index.html#part-2",
    "href": "year_xxxx/day_14/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_15/index.html#part-1",
    "href": "year_xxxx/day_15/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_15/index.html#part-2",
    "href": "year_xxxx/day_15/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_16/index.html#part-1",
    "href": "year_xxxx/day_16/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_16/index.html#part-2",
    "href": "year_xxxx/day_16/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_17/index.html#part-1",
    "href": "year_xxxx/day_17/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_17/index.html#part-2",
    "href": "year_xxxx/day_17/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_18/index.html#part-1",
    "href": "year_xxxx/day_18/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_18/index.html#part-2",
    "href": "year_xxxx/day_18/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_19/index.html#part-1",
    "href": "year_xxxx/day_19/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_19/index.html#part-2",
    "href": "year_xxxx/day_19/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_20/index.html#part-1",
    "href": "year_xxxx/day_20/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_20/index.html#part-2",
    "href": "year_xxxx/day_20/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_21/index.html#part-1",
    "href": "year_xxxx/day_21/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_21/index.html#part-2",
    "href": "year_xxxx/day_21/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_22/index.html#part-1",
    "href": "year_xxxx/day_22/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_22/index.html#part-2",
    "href": "year_xxxx/day_22/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_23/index.html#part-1",
    "href": "year_xxxx/day_23/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_23/index.html#part-2",
    "href": "year_xxxx/day_23/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_24/index.html#part-1",
    "href": "year_xxxx/day_24/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_24/index.html#part-2",
    "href": "year_xxxx/day_24/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_25/index.html#part-1",
    "href": "year_xxxx/day_25/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_xxxx/day_25/index.html#part-2",
    "href": "year_xxxx/day_25/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2022/day_04/index.html",
    "href": "year_2022/day_04/index.html",
    "title": "2022 - Day 4",
    "section": "",
    "text": "Space needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique ID number, and each Elf is assigned a range of section IDs.\nHowever, as some of the Elves compare their section assignments with each other, they’ve noticed that many of the assignments overlap. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a big list of the section assignments for each pair (your puzzle input)."
  },
  {
    "objectID": "year_2022/day_04/index.html#set-up",
    "href": "year_2022/day_04/index.html#set-up",
    "title": "2022 - Day 4",
    "section": "Set-Up",
    "text": "Set-Up\nToday this was the most inefficient part of my solution. Originally read in the data as a table and then split out using gsub. This can be simplified by reading in as strings, replacing with commas in the strings, and then use the text argument in read.table.\n\n\nCode\n# Original\nassignments <- read.csv(\"input.txt\", header = FALSE, col.names = c(\"A\", \"B\"))\nassignments$A1 <- with(assignments, as.numeric(sub(\"-.*\", \"\", A)))\nassignments$A2 <- with(assignments, as.numeric(sub(\".*-\", \"\", A)))\nassignments$B1 <- with(assignments, as.numeric(sub(\"-.*\", \"\", B)))\nassignments$B2 <- with(assignments, as.numeric(sub(\".*-\", \"\", B)))\n\n# Simplified\nassignments_clean <- read.table(\n  text = gsub(\"-\", \",\", readLines(\"input.txt\")), \n  sep = \",\", \n  col.names = c(\"A1\", \"A2\", \"B1\", \"B2\")\n)\n\nall.equal(assignments[, c(\"A1\", \"A2\", \"B1\", \"B2\")], assignments_clean)\n\n\n[1] TRUE"
  },
  {
    "objectID": "year_2022/day_06/index.html",
    "href": "year_2022/day_06/index.html",
    "title": "2022 - Day 6",
    "section": "",
    "text": "The preparations are finally complete; you and the Elves leave camp on foot and begin to make your way toward the star fruit grove.\nAs you move through the dense undergrowth, one of the Elves gives you a handheld device. He says that it has many fancy features, but the most important one to set up right now is the communication system.\nHowever, because he’s heard you have significant experience dealing with signal-based systems, he convinced the other Elves that it would be okay to give you their one malfunctioning device - surely you’ll have no problem fixing it.\nAs if inspired by comedic timing, the device emits a few colorful sparks.\nTo be able to communicate with the Elves, the device needs to lock on to their signal. The signal is a series of seemingly-random characters that the device receives one at a time.\nTo fix the communication system, you need to add a subroutine to the device that detects a start-of-packet marker in the datastream. In the protocol being used by the Elves, the start of a packet is indicated by a sequence of four characters that are all different.\nThe device will send your subroutine a datastream buffer (your puzzle input); your subroutine needs to identify the first position where the four most recently received characters were all different. Specifically, it needs to report the number of characters from the beginning of the buffer to the end of the first such four-character marker."
  },
  {
    "objectID": "year_2022/day_06/index.html#set-up",
    "href": "year_2022/day_06/index.html#set-up",
    "title": "2022 - Day 6",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\ndata_stream <- strsplit(readLines(\"input.txt\"), \"\")[[1]]\nstr(data_stream)\n\n\n chr [1:4095] \"d\" \"c\" \"b\" \"c\" \"s\" \"b\" \"b\" \"l\" \"h\" \"h\" \"g\" \"d\" \"g\" \"s\" \"s\" ..."
  },
  {
    "objectID": "year_2022/day_05/index.html",
    "href": "year_2022/day_05/index.html",
    "title": "2022 - Day 6",
    "section": "",
    "text": "The expedition can depart as soon as the final supplies have been unloaded from the ships. Supplies are stored in stacks of marked crates, but because the needed supplies are buried under many other crates, the crates need to be rearranged.\nThe ship has a giant cargo crane capable of moving crates between stacks. To ensure none of the crates get crushed or fall over, the crane operator will rearrange them in a series of carefully-planned steps. After the crates are rearranged, the desired crates will be at the top of each stack.\nThe Elves don’t want to interrupt the crane operator during this delicate procedure, but they forgot to ask her which crate will end up where, and they want to be ready to unload them as soon as possible so they can embark."
  },
  {
    "objectID": "year_2022/day_05/index.html#set-up",
    "href": "year_2022/day_05/index.html#set-up",
    "title": "2022 - Day 6",
    "section": "Set-Up",
    "text": "Set-Up\nToday’s has been the most complicated format, with two bits of code to read in, the first of which isn’t structured nicely to read in with something like read.table.\n        [Q] [B]         [H]\n    [F] [W] [D] [Q]     [S]\n    [D] [C] [N] [S] [G] [F]\n    [R] [D] [L] [C] [N] [Q]     [R]\n[V] [W] [L] [M] [P] [S] [M]     [M]\n[J] [B] [F] [P] [B] [B] [P] [F] [F]\n[B] [V] [G] [J] [N] [D] [B] [L] [V]\n[D] [P] [R] [W] [H] [R] [Z] [W] [S]\n 1   2   3   4   5   6   7   8   9\nWith some manipulation. read.fwf was the best solution I could find, taking each four characters and extracting the letter from each set of characters.\n\n\nCode\nblocks <- read.fwf(\"input.txt\", widths = rep(4, 9), n = 8) |>\n  lapply(\\(x) rev(gsub(\"\\\\W\", \"\", x))) |>\n  lapply(\\(x) x[!x %in% c(\"\", NA)])\nstr(blocks)\n\n\nList of 9\n $ V1: chr [1:4] \"D\" \"B\" \"J\" \"V\"\n $ V2: chr [1:7] \"P\" \"V\" \"B\" \"W\" ...\n $ V3: chr [1:8] \"R\" \"G\" \"F\" \"L\" ...\n $ V4: chr [1:8] \"W\" \"J\" \"P\" \"M\" ...\n $ V5: chr [1:7] \"H\" \"N\" \"B\" \"P\" ...\n $ V6: chr [1:6] \"R\" \"D\" \"B\" \"S\" ...\n $ V7: chr [1:8] \"Z\" \"B\" \"P\" \"M\" ...\n $ V8: chr [1:3] \"W\" \"L\" \"F\"\n $ V9: chr [1:5] \"S\" \"V\" \"F\" \"M\" ...\n\n\nCode\noperations <- read.table(\n  \"input.txt\", sep = \" \", skip = 10,\n  col.names = c(\"x1\", \"move\", \"x2\", \"from\", \"x3\", \"to\")\n)\nhead(operations)\n\n\n    x1 move   x2 from x3 to\n1 move    1 from    4 to  1\n2 move    2 from    4 to  8\n3 move    5 from    9 to  6\n4 move    1 from    1 to  3\n5 move    5 from    8 to  3\n6 move    1 from    1 to  5"
  },
  {
    "objectID": "year_2022/day_07/index.html",
    "href": "year_2022/day_07/index.html",
    "title": "2022 - Day 7",
    "section": "",
    "text": "You can hear birds chirping and raindrops hitting leaves as the expedition proceeds. Occasionally, you can even hear much louder sounds in the distance; how big do the animals get out here, anyway?\nThe device the Elves gave you has problems with more than just its communication system. You try to run a system update:\n$ system-update --please --pretty-please-with-sugar-on-top Error: No space left on device\nPerhaps you can delete some files to make space for the update?\nYou browse around the filesystem to assess the situation and save the resulting terminal output (your puzzle input).\nThe filesystem consists of a tree of files (plain data) and directories (which can contain other directories or files). The outermost directory is called /. You can navigate around the filesystem, moving into or out of directories and listing the contents of the directory you’re currently in."
  },
  {
    "objectID": "year_2022/day_07/index.html#set-up",
    "href": "year_2022/day_07/index.html#set-up",
    "title": "2022 - Day 7",
    "section": "Set-Up",
    "text": "Set-Up\nHere reading in the data as a table as it splits out the three potential commands quite nicely:\n\n$ means that will either look for cd or ls in the second column.\n\ncd means that the directory will either enter the subdirectory or if the third column is \"..\" then move up into the parent column. At no point will we need to move above the home directory.\nls, printing the current directory contents, is a red herring and can be ignored\n\ndir means that a new directory needs to be created in the current directory\nAll other commands are new files of size in the first column\n\n\n\nCode\nstr(readLines(\"input.txt\"))\n\n\n chr [1:956] \"$ cd /\" \"$ ls\" \"dir cmjgvh\" \"dir czrzl\" \"dir fcbt\" \"dir hdh\" ...\n\n\nCode\ncommands <- read.table(\"input.txt\", sep = \" \", fill = TRUE, header = FALSE)\n\n\nThis is the first time helper functions have been needed. This first one finds the directory to move to. I store the active directory as a vector of folder names, with the home directory being character(0) (this did have its own issues, however made some indexing handy in the future)\n\n\nCode\nchange_dir <- function(files, dir, curr_dir = character(0)) {\n  if (dir == \"..\") head(curr_dir, -1) else if (dir == \"/\") character(0) else c(curr_dir, dir)\n}\n\n\nThis second helper went iteratively through the commands, and updated the current file structure and the active directory location. Using [[curr_dir]] on nested lists was really useful, as list[[c(\"a\", \"b\", \"c\")]] was a very simple way of finding the subdirectory a -> b -> c.\nIt returns a nested list of the file tree of the data.\n\n\nCode\nfollow_commands <- function(commands, files = list(), curr_dir = character(0)) {\n  command <- commands[1, ]\n\n  if (command$V1 == \"$\") {\n    if (command$V2 == \"cd\") {\n      curr_dir <- change_dir(files, command$V3, curr_dir)\n    }\n  } else {\n    if (command$V1 == \"dir\") {\n      new_file <- setNames(list(list()), command$V2)\n    } else {\n      new_file <- setNames(list(as.numeric(command$V1)), command$V2)\n    }\n\n    if (length(curr_dir) > 0) {\n      files[[curr_dir]] <- append(files[[curr_dir]], new_file)\n    } else {\n      files <- append(files, new_file)\n    }\n  }\n\n  if (nrow(commands) == 1) {\n    files\n  } else {\n    follow_commands(commands[-1, ], files = files, curr_dir = curr_dir)\n  }\n}\n\nfiles <- follow_commands(commands)\nstr(files, 1)\n\n\nList of 10\n $ cmjgvh   :List of 7\n $ czrzl    :List of 6\n $ fcbt     :List of 1\n $ hdh      :List of 4\n $ hjsbd.mzp: num 259661\n $ jgrdd    :List of 1\n $ lqblqtng :List of 3\n $ pgvmpmn  :List of 1\n $ pqqcvcm  :List of 2\n $ zglbptq  :List of 7"
  },
  {
    "objectID": "year_2022/day_08/index.html",
    "href": "year_2022/day_08/index.html",
    "title": "2022 - Day 8",
    "section": "",
    "text": "The expedition comes across a peculiar patch of tall trees all planted carefully in a grid. The Elves explain that a previous expedition planted these trees as a reforestation effort. Now, they’re curious if this would be a good location for a tree house.\nFirst, determine whether there is enough tree cover here to keep a tree house hidden. To do this, you need to count the number of trees that are visible from outside the grid when looking directly along a row or column.\nThe Elves have already launched a quadcopter to generate a map with the height of each tree (your puzzle input)."
  },
  {
    "objectID": "year_2022/day_08/index.html#set-up",
    "href": "year_2022/day_08/index.html#set-up",
    "title": "2022 - Day 8",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\nheights <- readLines(\"input.txt\") |> strsplit(\"\") |> lapply(as.integer) |> do.call(what = rbind)\nhead(heights)\n\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]\n[1,]    2    1    1    3    3    2    2    1    3     0     3     3     1     0\n[2,]    3    1    1    0    2    3    3    2    0     2     4     2     0     3\n[3,]    0    0    1    2    2    3    2    0    4     4     3     3     0     2\n[4,]    0    1    3    1    3    2    2    3    3     0     1     2     3     4\n[5,]    1    2    3    2    0    3    2    1    3     2     0     0     4     1\n[6,]    3    0    0    3    1    4    3    3    4     3     0     3     2     0\n     [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26]\n[1,]     1     1     2     4     1     3     0     1     1     0     4     1\n[2,]     0     1     1     2     0     3     3     3     5     4     2     0\n[3,]     2     0     1     3     1     0     3     3     0     5     4     1\n[4,]     4     2     2     5     5     3     5     0     3     3     3     0\n[5,]     4     1     1     3     4     3     1     3     2     4     0     5\n[6,]     0     3     2     4     1     1     0     0     0     1     0     1\n     [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38]\n[1,]     0     0     2     5     4     0     4     0     3     5     3     2\n[2,]     5     5     3     3     0     0     3     1     0     0     2     2\n[3,]     0     2     2     2     3     1     5     5     5     4     0     3\n[4,]     4     1     1     2     2     5     3     2     0     1     3     0\n[5,]     1     0     2     4     4     3     5     2     6     5     6     0\n[6,]     1     0     6     5     0     5     0     6     2     4     1     3\n     [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50]\n[1,]     4     5     4     0     5     0     6     4     6     5     5     2\n[2,]     4     1     6     6     3     5     4     2     3     3     5     5\n[3,]     2     3     6     6     5     0     6     0     2     1     4     0\n[4,]     3     4     2     1     5     6     3     4     2     2     6     2\n[5,]     6     0     5     6     2     0     6     2     2     0     3     3\n[6,]     6     6     5     4     0     4     4     0     3     0     0     6\n     [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]\n[1,]     2     4     2     4     3     2     5     0     2     5     4     4\n[2,]     4     6     3     4     2     2     1     0     4     1     6     3\n[3,]     5     0     0     2     3     1     5     0     4     4     4     6\n[4,]     3     3     0     5     0     2     1     2     0     4     6     0\n[5,]     0     3     5     3     4     0     5     6     6     4     4     1\n[6,]     1     6     2     0     0     5     0     0     4     2     3     1\n     [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74]\n[1,]     2     4     2     3     2     0     5     3     2     2     1     4\n[2,]     5     2     3     0     0     5     1     4     1     0     3     4\n[3,]     3     4     2     0     0     5     1     0     3     3     3     0\n[4,]     5     5     4     3     6     2     1     0     4     4     5     4\n[5,]     3     2     5     2     1     2     1     2     4     1     3     4\n[6,]     4     2     5     2     6     3     2     6     3     3     3     2\n     [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86]\n[1,]     4     2     0     1     1     1     4     0     3     2     4     3\n[2,]     3     2     3     5     3     4     2     4     3     2     1     1\n[3,]     2     2     0     1     2     5     5     1     3     3     1     4\n[4,]     4     2     1     0     3     5     2     3     3     0     4     1\n[5,]     0     0     1     4     0     2     1     5     0     4     0     4\n[6,]     5     0     1     1     0     3     4     0     2     1     5     2\n     [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98]\n[1,]     3     1     0     2     2     2     3     1     3     3     3     0\n[2,]     2     4     3     4     0     3     4     0     3     0     1     0\n[3,]     3     1     2     4     4     2     0     4     1     2     1     2\n[4,]     2     2     1     2     4     0     1     0     1     2     1     3\n[5,]     3     3     2     2     0     2     2     4     0     4     3     2\n[6,]     1     2     1     0     0     2     2     4     4     2     2     1\n     [,99]\n[1,]     1\n[2,]     0\n[3,]     2\n[4,]     1\n[5,]     2\n[6,]     3"
  },
  {
    "objectID": "year_2022/day_09/index.html",
    "href": "year_2022/day_09/index.html",
    "title": "2022 - Day 9",
    "section": "",
    "text": "This rope bridge creaks as you walk along it. You aren’t sure how old it is, or whether it can even support your weight.\nIt seems to support the Elves just fine, though. The bridge spans a gorge which was carved out by the massive river far below you.\nYou step carefully; as you do, the ropes stretch and twist. You decide to distract yourself by modeling rope physics; maybe you can even figure out where not to step.\nConsider a rope with a knot at each end; these knots mark the head and the tail of the rope. If the head moves far enough away from the tail, the tail is pulled toward the head.\nDue to nebulous reasoning involving Planck lengths, you should be able to model the positions of the knots on a two-dimensional grid. Then, by following a hypothetical series of motions (your puzzle input) for the head, you can determine how the tail will move."
  },
  {
    "objectID": "year_2022/day_09/index.html#set-up",
    "href": "year_2022/day_09/index.html#set-up",
    "title": "2022 - Day 9",
    "section": "Set-Up",
    "text": "Set-Up\n\nDue to the aforementioned Planck lengths, the rope must be quite short; in fact, the head (H) and tail (T) must always be touching (diagonally adjacent and even overlapping both count as touching)\nIf the head is ever two steps directly up, down, left, or right from the tail, the tail must also move one step in that direction so it remains close enough\nOtherwise, if the head and tail aren’t touching and aren’t in the same row or column, the tail always moves one step diagonally to keep up\nYou just need to work out where the tail goes as the head follows a series of motions. Assume the head and the tail both start at the same position, overlapping.\n\n\n\nCode\ninstructions &lt;- read.table(\"input.txt\", col.names = c(\"dir\", \"n\"), sep = \" \")\nhead(instructions)\n\n\n  dir n\n1   R 1\n2   U 2\n3   R 1\n4   L 2\n5   D 2\n6   U 1"
  },
  {
    "objectID": "year_2022/day_10/index.html",
    "href": "year_2022/day_10/index.html",
    "title": "2022 - Day 10",
    "section": "",
    "text": "You avoid the ropes, plunge into the river, and swim to shore.\nThe Elves yell something about meeting back up with them upriver, but the river is too loud to tell exactly what they’re saying. They finish crossing the bridge and disappear from view.\nSituations like this must be why the Elves prioritized getting the communication system on your handheld device working. You pull it out of your pack, but the amount of water slowly draining from a big crack in its screen tells you it probably won’t be of much immediate use.\nUnless, that is, you can design a replacement for the device’s video system! It seems to be some kind of cathode-ray tube screen and simple CPU that are both driven by a precise clock circuit. The clock circuit ticks at a constant rate; each tick is called a cycle.\nStart by figuring out the signal being sent by the CPU. The CPU has a single register, X, which starts with the value 1. It supports only two instructions:\n\naddx V takes two cycles to complete. After two cycles, the X register is increased by the value V. (V can be negative.)\nnoop takes one cycle to complete. It has no other effect. The CPU uses these instructions in a program (your puzzle input) to, somehow, tell the screen what to draw."
  },
  {
    "objectID": "year_2022/day_10/index.html#set-up",
    "href": "year_2022/day_10/index.html#set-up",
    "title": "2022 - Day 10",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\nsignals <- read.table(\"input.txt\", col.names = c(\"action\", \"strength\"), sep = \" \", fill = TRUE)\nsignals$strength <- ifelse(is.na(signals$strength), 0, signals$strength)\nhead(signals)\n\n\n  action strength\n1   noop        0\n2   addx       10\n3   addx       -4\n4   addx       -1\n5   noop        0\n6   noop        0"
  },
  {
    "objectID": "year_2022/day_11/index.html",
    "href": "year_2022/day_11/index.html",
    "title": "2022 - Day 11",
    "section": "",
    "text": "As you finally start making your way upriver, you realize your pack is much lighter than you remember. Just then, one of the items from your pack goes flying overhead. Monkeys are playing Keep Away with your missing things!\nTo get your stuff back, you need to be able to predict where the monkeys will throw your items. After some careful observation, you realize the monkeys operate based on how worried you are about each item.\nYou take some notes (your puzzle input) on the items each monkey currently has, how worried you are about those items, and how the monkey makes decisions based on your worry level. Each monkey has several attributes:\n\nStarting items lists your worry level for each item the monkey is currently holding in the order they will be inspected.\nOperation shows how your worry level changes as that monkey inspects an item. (An operation like new = old * 5 means that your worry level after the monkey inspected the item is five times whatever your worry level was before inspection.)\nTest shows how the monkey uses your worry level to decide where to throw an item next.\nIf true shows what happens with an item if the Test was true.\nIf false shows what happens with an item if the Test was false.\n\nAfter each monkey inspects an item but before it tests your worry level, your relief that the monkey’s inspection didn’t damage the item causes your worry level to be divided by three and rounded down to the nearest integer.\nThe monkeys take turns inspecting and throwing items. On a single monkey’s turn, it inspects and throws all of the items it is holding one at a time and in the order listed. Monkey 0 goes first, then monkey 1, and so on until each monkey has had one turn. The process of each monkey taking a single turn is called a round.\nWhen a monkey throws an item to another monkey, the item goes on the end of the recipient monkey’s list. A monkey that starts a round with no items could end up inspecting and throwing many items by the time its turn comes around. If a monkey is holding no items at the start of its turn, its turn ends."
  },
  {
    "objectID": "year_2022/day_11/index.html#set-up",
    "href": "year_2022/day_11/index.html#set-up",
    "title": "2022 - Day 11",
    "section": "Set-Up",
    "text": "Set-Up\nThe input today was not nice, however it was very similar to a YAML file, using {yaml} meant that I had a nicer list that I could parse the attributes of each monkey.\n\n\nCode\nmonkeys <- readLines(\"input.txt\") |>\n  sub(pattern = \"  If\", replacement = \"If\") |>\n  yaml::yaml.load()\nstr(monkeys[[1]])\n\n\nList of 5\n $ Starting items: chr \"92, 73, 86, 83, 65, 51, 55, 93\"\n $ Operation     : chr \"new = old * 5\"\n $ Test          : chr \"divisible by 11\"\n $ If true       : chr \"throw to monkey 3\"\n $ If false      : chr \"throw to monkey 4\"\n\n\nI started this one later in the day, so thought would have some fun with {R6} and communicating between the different monkeys. Initialise set-up the monkey class, and I could loop through this without having to worry about creating a load of lists to handle different\nTwo helper functions are included to help parse the input: one to extract the number, and one to send the new number to a different monkey.\n\n\nCode\nextract_number <- \\(x) as.numeric(gsub(\"\\\\D\", \"\", x))\npass_monkey_func <- \\(x) paste0(\"\\\\(x) monkey_\", extract_number(x) + 1, \"$receiveItem(x)\")\n\nMonkey <- R6::R6Class(\n  classname = \"monkey\",\n  public = list(\n    n_checks = 0,\n    divisor = numeric(0),\n\n    initialize = \\(x) {\n      private$initial_items <- as.numeric(strsplit(as.character(x[[\"Starting items\"]]), \", \")[[1]])\n      private$received_items <- private$initial_items\n      private$operation <- eval(parse(text = sub(\"new = \", \"\\\\\\\\(old) \", x[[\"Operation\"]])))\n      self$divisor <- extract_number(x[[\"Test\"]])\n      private$pass <- eval(parse(text = pass_monkey_func(x[[\"If true\"]])))\n      private$fail <- eval(parse(text = pass_monkey_func(x[[\"If false\"]])))\n    },\n    \n    checkItems = \\(modulus = 0) {\n      private$items <- private$received_items\n      private$received_items <- numeric(0)\n      lapply(private$items, private$checkItem, modulus = modulus)\n      self$n_checks <- self$n_checks + length(private$items)\n    },\n    \n    receiveItem = \\(x) private$received_items <- append(private$received_items, x),\n    \n    reset = \\() {\n      private$items <- numeric(0)\n      private$received_items <- private$initial_items\n      self$n_checks <- 0\n    }\n  ),\n  private = list(\n    checkItem = \\(old, modulus = 0) {\n      if (modulus) {\n        new <- private$operation(old) %% modulus\n      } else {\n        new <- private$operation(old) %/% 3\n      }\n      if (private$test(new)) private$pass(new) else private$fail(new)\n    },\n    test = \\(x) x %% self$divisor == 0,\n    \n    items = numeric(0),\n    initial_items = numeric(0),\n    received_items = numeric(0),\n    operation = NULL,\n    pass = NULL,\n    fail = NULL\n  )\n)\n\nfor (i in seq(8)) assign(paste0(\"monkey_\", i), Monkey$new(monkeys[[i]]))\nmonkey_1\n\n\n<monkey>\n  Public:\n    checkItems: function (modulus = 0) \n    clone: function (deep = FALSE) \n    divisor: 11\n    initialize: function (x) \n    n_checks: 0\n    receiveItem: function (x) \n    reset: function () \n  Private:\n    checkItem: function (old, modulus = 0) \n    fail: function (x) \n    initial_items: 92 73 86 83 65 51 55 93\n    items: \n    operation: function (old) \n    pass: function (x) \n    received_items: 92 73 86 83 65 51 55 93\n    test: function (x)"
  },
  {
    "objectID": "year_2022/day_11/index.html#part",
    "href": "year_2022/day_11/index.html#part",
    "title": "2022 - Day 11",
    "section": "Part",
    "text": "Part\n\nYou’re worried you might not ever get your items back. So worried, in fact, that your relief that a monkey’s inspection didn’t damage an item no longer causes your worry level to be divided by three.\nUnfortunately, that relief was all that was keeping your worry levels from reaching ridiculous levels. You’ll need to find another way to keep your worry levels manageable.\nAt this rate, you might be putting up with these monkeys for a very long time - possibly 10000 rounds!\nWorry levels are no longer divided by three after each item is inspected; you’ll need to find another way to keep your worry levels manageable. Starting again from the initial state in your puzzle input, what is the level of monkey business after 10000 rounds?\n\nSome of the information in the monkeys I no longer needed, so I included a reset method to revert to the starting state. The modulus was created as the largest possible number required before the sequence would restart itself, meaning the divisors would loop for each MODULUS\n\n\nCode\nMODULUS <- 1\nfor (i in seq(8)) {\n  monkey <- get(paste0(\"monkey_\", i))\n  monkey$reset()\n  MODULUS <- MODULUS * monkey$divisor\n}\nprint(MODULUS)\n\n\n[1] 9699690\n\n\n\n\nCode\nfor (round in seq(10000)) {\n  for (i in seq(8)) {\n    monkey <- get(paste0(\"monkey_\", i))\n    monkey$checkItems(modulus = MODULUS)\n    if (round == 10000) {\n      print(paste(\"Monkey\", i, \"inspected items\", monkey$n_checks, \"times.\"))\n    }\n  }\n}\n\n\n[1] \"Monkey 1 inspected items 192836 times.\"\n[1] \"Monkey 2 inspected items 19711 times.\"\n[1] \"Monkey 3 inspected items 18259 times.\"\n[1] \"Monkey 4 inspected items 195229 times.\"\n[1] \"Monkey 5 inspected items 126789 times.\"\n[1] \"Monkey 6 inspected items 200326 times.\"\n[1] \"Monkey 7 inspected items 183570 times.\"\n[1] \"Monkey 8 inspected items 187056 times.\""
  },
  {
    "objectID": "year_2023/day_01/index.html",
    "href": "year_2023/day_01/index.html",
    "title": "2023 - Day 1: Trebuchet?!",
    "section": "",
    "text": "You try to ask why they can’t just use a weather machine (“not powerful enough”) and where they’re even sending you (“the sky”) and why your map looks mostly blank (“you sure ask a lot of questions”) and hang on did you just say the sky (“of course, where do you think snow comes from”) when you realize that the Elves are already loading you into a trebuchet (“please hold still, we need to strap you in”).\nAs they’re making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document."
  },
  {
    "objectID": "year_2023/day_01/index.html#set-up",
    "href": "year_2023/day_01/index.html#set-up",
    "title": "2023 - Day 1: Trebuchet?!",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\nvalues &lt;- readLines(\"input.txt\")"
  },
  {
    "objectID": "year_2023/day_01/index.html#part-1",
    "href": "year_2023/day_01/index.html#part-1",
    "title": "2023 - Day 1: Trebuchet?!",
    "section": "Part 1",
    "text": "Part 1\n\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\nUsing regular expressions to only keep the numbers, can split out using strsplit and get the first and last digit, and then convert into numbers ans sum.\n\n\nCode\ngsub(\"[^0-9]\", \"\", values) |&gt;\n  strsplit(\"\") |&gt;\n  sapply(\\(x) paste0(head(x, 1L), tail(x, 1L))) |&gt;\n  as.numeric() |&gt;\n  sum()\n\n\n[1] 54632"
  },
  {
    "objectID": "year_2023/day_01/index.html#part-2",
    "href": "year_2023/day_01/index.html#part-2",
    "title": "2023 - Day 1: Trebuchet?!",
    "section": "Part 2",
    "text": "Part 2\n\nYour calculation isn’t quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid “digits”.\nWhat is the sum of all of the calibration values?\n\nThis was a pain as it wasn’t clear that overlapping numbers count as both numbers (originally I had used sub to replace the first number).\nUsing the regular expression to replace the first letter of the word with the number to make it easier to find all the number words in the string. (?&lt;=.{2}) means that there are two characters to look behind before considering the expression. substr would just find the first part of the letter.\n\n\nCode\ny &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n\nvalues &lt;- sapply(values, USE.NAMES = FALSE, \\(x) {\n  p &lt;- regexpr(paste(y, collapse = \"|\"), x)\n  while (p &gt; 0) {\n    number &lt;- substr(x, p, p + attr(p, \"match.length\") - 1)\n    x &lt;- sub(\n      paste0(\"(?&lt;=.{\", p - 1, \"})\", substr(number, 1, 1)), \n      match(number, y), \n      x, \n      perl = TRUE\n    )\n    p &lt;- regexpr(paste(y, collapse = \"|\"), x)\n  }\n  x\n})\n\ngsub(\"[^0-9]\", \"\", values) |&gt;\n  strsplit(\"\") |&gt;\n  sapply(\\(x) as.numeric(paste0(head(x, 1L), tail(x, 1L)))) |&gt;\n  sum()\n\n\n[1] 54019\n\n\nThis could be improved to just replace the word except the last character, as the most overlap is the one character.\n\n\nCode\ny &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n\nvalues &lt;- sapply(values, USE.NAMES = FALSE, \\(x) {\n  p &lt;- regexpr(paste(y, collapse = \"|\"), x)\n  while (p &gt; 0) {\n    number &lt;- substr(x, p, p + attr(p, \"match.length\") - 1)\n    x &lt;- sub(\n      substr(number, 1, nchar(number) - 1), \n      match(number, y), \n      x, \n      perl = TRUE\n    )\n    p &lt;- regexpr(paste(y, collapse = \"|\"), x)\n  }\n  x\n})\n\ngsub(\"[^0-9]\", \"\", values) |&gt;\n  strsplit(\"\") |&gt;\n  sapply(\\(x) as.numeric(paste0(head(x, 1L), tail(x, 1L)))) |&gt;\n  sum()\n\n\n[1] 54019"
  },
  {
    "objectID": "year_2023/day_02/index.html#part-1",
    "href": "year_2023/day_02/index.html#part-1",
    "title": "2023 - Day 2",
    "section": "Part 1",
    "text": "Part 1\n\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\n\nHaving a space before the first game made things a lot easier for this part, as the regular expression could explicity look for a space before the number of blocks.\n\n\nCode\ncolours &lt;- c(\"red\", \"blue\", \"green\")\n\nfor (colour in colours) {\n  games[[colour]] &lt;- lapply(games$result_split, function(x) {\n    matches &lt;- grep(colour, x, value = TRUE)\n    as.numeric(sub(paste0(\"^.* (\\\\d+) \", colour, \".*\"), \"\\\\1\", matches))\n  })\n  games[[paste0(colour, \"_max\")]] &lt;- sapply(games[[colour]], max)\n}\n\nsum(subset(games, red_max &lt;= 12 & green_max &lt;= 13 & blue_max &lt;= 14)$game)\n\n\n[1] 2239"
  },
  {
    "objectID": "year_2023/day_02/index.html#part-2",
    "href": "year_2023/day_02/index.html#part-2",
    "title": "2023 - Day 2",
    "section": "Part 2",
    "text": "Part 2\n\nThe Elf says they’ve stopped producing snow because they aren’t getting any water! He isn’t sure why the water stopped; however, he can show you how to get to the water source to check it out for yourself. It’s just up ahead!\nAs you continue your walk, the Elf poses a second question: in each game you played, what is the fewest number of cubes of each color that could have been in the bag to make the game possible?\n\nMuch nicer part 2 than yesterday!\n\n\nCode\nsum(games$red_max * games$blue_max * games$green_max)\n\n\n[1] 83435"
  },
  {
    "objectID": "year_2023/day_03/index.html#part-1",
    "href": "year_2023/day_03/index.html#part-1",
    "title": "2023 - Day 3: Gear Ratios",
    "section": "Part 1",
    "text": "Part 1\n\nThe engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don’t really understand, but apparently any number adjacent to a symbol, even diagonally, is a “part number” and should be included in your sum. (Periods (.) do not count as a symbol.)\nWhat is the sum of all of the part numbers in the engine schematic?\n\nCouldn’t think of a nice way to get two numbers when in the one before and one after the column position, so just went back to regular expressions to extract all numbers in a row and see if any of them were near the positions of special characters. arr.ind makes finding the position of logical matrices much easier.\nTIL == maintains a matrix, %in% doesn’t, hence the for loops checking special characters (and numbers in part 2).\n\n\nCode\nspecial_chars &lt;- unique(grep(\"[^0-9\\\\.]\", schema, value = TRUE))\nspecial_locs &lt;- schema == special_chars[1]\nfor (i in special_chars) special_locs &lt;- special_locs | schema == i\n\nspecial_area &lt;- which(special_locs, arr.ind = TRUE) |&gt;\n  apply(1, simplify = FALSE, \\(x) {\n    dat &lt;- cbind(\n      row = rep((x[1] - 1):(x[1] + 1), each = 3),\n      col = rep((x[2] - 1):(x[2] + 1), times = 3)\n    )\n    # Removing cases outside the matrix\n    dat[dat[, 1] &gt;= 1 & dat[, 2] &gt;= 1 & dat[, 1] &lt;= dims[1] & dat[, 2] &lt;= dims[2], ]\n  }) |&gt;\n  do.call(what = rbind)\n\ninner_nums &lt;- numeric()\nfor (i in seq(dims[1])) {\n  special_cols &lt;- special_area[special_area[, 1] == i, \"col\"]\n  number_locs &lt;- gregexpr(\"[0-9]+\", schema_lines[i])[[1]]\n  if (number_locs[1] == -1) next\n  for (j in seq_along(number_locs)) {\n    start &lt;- number_locs[j]\n    area &lt;- start + seq(attr(number_locs, \"match.length\")[j]) - 1\n    if (any(area %in% special_cols)) {\n      inner_nums &lt;- c(inner_nums, as.numeric(substr(schema_lines[i], area, max(area))))\n    }\n  }\n}\n\nsum(inner_nums)\n\n\n[1] 553825"
  },
  {
    "objectID": "year_2023/day_03/index.html#part-2",
    "href": "year_2023/day_03/index.html#part-2",
    "title": "2023 - Day 3: Gear Ratios",
    "section": "Part 2",
    "text": "Part 2\n\nThe engineer finds the missing part and installs it in the engine! As the engine springs to life, you jump in the closest gondola, finally ready to ascend to the water source.\nYou don’t seem to be going very fast, though. Maybe something is still wrong? Fortunately, the gondola has a phone labeled “help”, so you pick it up and the engineer answers.\nBefore you can explain the situation, she suggests that you look out the window. There stands the engineer, holding a phone in one hand and waving with the other. You’re going so slowly that you haven’t even left the station. You exit the gondola.\nThe missing part wasn’t the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.\nThis time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.\nWhat is the sum of all of the gear ratios in your engine schematic?\n\nThankfully no edge asterisks in this input, so didn’t have to worry too much edge cases, but am sure there is a much nicer way to check for numbers than the way I’ve been using sub and (more) regular expressions.\n\n\nCode\nspecial_locs &lt;- schema == \"*\"\n\nspecial_area &lt;- which(special_locs, arr.ind = TRUE) |&gt;\n  apply(1, \\(x) {\n    tl &lt;- grepl(\"\\\\d\", schema[x[1] - 1, x[2] - 1])\n    tr &lt;- grepl(\"\\\\d\", schema[x[1] - 1, x[2] + 1]) && !(tl && grepl(\"\\\\d\", schema[x[1] - 1, x[2]]))\n    l &lt;- grepl(\"\\\\d\", schema[x[1], x[2] - 1])\n    r &lt;- grepl(\"\\\\d\", schema[x[1], x[2] + 1])\n    bl &lt;- grepl(\"\\\\d\", schema[x[1] + 1, x[2] - 1])\n    br &lt;- grepl(\"\\\\d\", schema[x[1] + 1, x[2] + 1]) && !(bl && grepl(\"\\\\d\", schema[x[1] + 1, x[2]]))\n\n    if (sum(tl, tr, l, r, bl, br) != 2) return(0)\n\n    nums &lt;- c()\n    if (tl) {\n      nums &lt;- c(nums, sub(\".*[^0-9]\", \"\", sub(paste0(\"(^.{\", x[2] - 2, \"}\\\\d+).*\"), \"\\\\1\", schema_lines[x[1] - 1])))\n    }\n    if (tr) {\n      nums &lt;- c(nums, sub(\".*[^0-9]\", \"\", sub(paste0(\"(^.{\", x[2], \"}\\\\d+).*\"), \"\\\\1\", schema_lines[x[1] - 1])))\n    }\n    if (l) nums &lt;- c(nums, sub(\".*[^0-9]\", \"\", substr(schema_lines[x[1]], 1, x[2] - 1)))\n    if (r) nums &lt;- c(nums, sub(\"[^0-9].*\", \"\", substr(schema_lines[x[1]], x[2] + 1, dims[2])))\n    if (bl) {\n      nums &lt;- c(nums, sub(\".*[^0-9]\", \"\", sub(paste0(\"(^.{\", x[2] - 2, \"}\\\\d+).*\"), \"\\\\1\", schema_lines[x[1] + 1])))\n    }\n    if (br) {\n      nums &lt;- c(nums, sub(\".*[^0-9]\", \"\", sub(paste0(\"(^.{\", x[2], \"}\\\\d+).*\"), \"\\\\1\", schema_lines[x[1] + 1])))\n    }\n\n    prod(as.numeric(nums))\n  })\n\nsum(special_area)\n\n\n[1] 93994191"
  },
  {
    "objectID": "year_2023/day_04/index.html",
    "href": "year_2023/day_04/index.html",
    "title": "2023 - Day 4: Scratchcards",
    "section": "",
    "text": "The gondola takes you up. Strangely, though, the ground doesn’t seem to be coming with you; you’re not climbing a mountain. As the circle of Snow Island recedes below you, an entire new landmass suddenly appears above you! The gondola carries you to the surface of the new island and lurches into the station.\nAs you exit the gondola, the first thing you notice is that the air here is much warmer than it was on Snow Island. It’s also quite humid. Is this where the water source is?\nThe next thing you notice is an Elf sitting on the floor across the station in what seems to be a pile of colorful square cards.\n“Oh! Hello!” The Elf excitedly runs over to you. “How may I be of service?” You ask about water sources.\n“I’m not sure; I just operate the gondola lift. That does sound like something we’d have, though - this is Island Island, after all! I bet the gardener would know. He’s on a different island, though - er, the small kind surrounded by water, not the floating kind. We really need to come up with a better naming scheme. Tell you what: if you can help me with something quick, I’ll let you borrow my boat and you can go visit the gardener. I got all these scratchcards as a gift, but I can’t figure out what I’ve won.”\nThe Elf leads you over to the pile of colorful cards. There, you discover dozens of scratchcards, all with their opaque covering already scratched off. Picking one up, it looks like each card has two lists of numbers separated by a vertical bar (|): a list of winning numbers and then a list of numbers you have. You organize the information into a table (your puzzle input).\n\nAnnoyingly couldn’t easily add list columns in the data.frame call.\n\n\nCode\ncards &lt;- readLines(\"input.txt\")\ncard_df &lt;- data.frame(id = seq(cards))\ncard_df$winning &lt;- strsplit(trimws(sub(\".*: \", \"\", sub(\" \\\\|.*\", \"\", cards))), \" +\")\ncard_df$numbers &lt;- strsplit(trimws(sub(\".*\\\\|\", \"\", cards)), \" +\")\nhead(card_df)\n\n\n  id                                winning\n1  1 58, 96, 35, 20, 93, 34, 10, 27, 37, 30\n2  2 64, 84, 57, 46, 53, 86, 90, 99, 59, 70\n3  3  55, 87, 51, 18, 86, 5, 66, 83, 92, 95\n4  4 52, 21, 59, 78, 18, 42, 46, 91, 31, 10\n5  5   8, 79, 31, 1, 26, 57, 90, 62, 93, 10\n6  6 90, 75, 24, 69, 81, 93, 39, 38, 96, 33\n                                                                                            numbers\n1  99, 70, 93, 11, 63, 41, 37, 29, 7, 28, 34, 10, 40, 96, 38, 35, 27, 30, 20, 21, 4, 51, 58, 39, 56\n2 99, 59, 30, 83, 84, 70, 31, 57, 6, 29, 18, 82, 15, 88, 86, 53, 51, 64, 32, 47, 44, 46, 80, 39, 90\n3 73, 68, 49, 57, 29, 14, 41, 42, 65, 10, 84, 34, 67, 44, 6, 48, 61, 13, 28, 38, 52, 19, 78, 64, 11\n4      48, 83, 13, 68, 42, 72, 4, 10, 6, 36, 63, 81, 21, 94, 8, 3, 78, 53, 2, 47, 62, 77, 56, 97, 7\n5   26, 70, 73, 6, 16, 15, 93, 57, 34, 56, 87, 31, 10, 45, 1, 22, 79, 77, 90, 47, 42, 58, 41, 62, 8\n6  2, 78, 68, 31, 99, 35, 49, 66, 36, 84, 54, 27, 43, 80, 50, 3, 22, 74, 60, 98, 57, 83, 13, 82, 91"
  },
  {
    "objectID": "year_2023/day_04/index.html#set-up",
    "href": "year_2023/day_04/index.html#set-up",
    "title": "2023 - Day 4: Scratchcards",
    "section": "",
    "text": "The gondola takes you up. Strangely, though, the ground doesn’t seem to be coming with you; you’re not climbing a mountain. As the circle of Snow Island recedes below you, an entire new landmass suddenly appears above you! The gondola carries you to the surface of the new island and lurches into the station.\nAs you exit the gondola, the first thing you notice is that the air here is much warmer than it was on Snow Island. It’s also quite humid. Is this where the water source is?\nThe next thing you notice is an Elf sitting on the floor across the station in what seems to be a pile of colorful square cards.\n“Oh! Hello!” The Elf excitedly runs over to you. “How may I be of service?” You ask about water sources.\n“I’m not sure; I just operate the gondola lift. That does sound like something we’d have, though - this is Island Island, after all! I bet the gardener would know. He’s on a different island, though - er, the small kind surrounded by water, not the floating kind. We really need to come up with a better naming scheme. Tell you what: if you can help me with something quick, I’ll let you borrow my boat and you can go visit the gardener. I got all these scratchcards as a gift, but I can’t figure out what I’ve won.”\nThe Elf leads you over to the pile of colorful cards. There, you discover dozens of scratchcards, all with their opaque covering already scratched off. Picking one up, it looks like each card has two lists of numbers separated by a vertical bar (|): a list of winning numbers and then a list of numbers you have. You organize the information into a table (your puzzle input).\n\nAnnoyingly couldn’t easily add list columns in the data.frame call.\n\n\nCode\ncards &lt;- readLines(\"input.txt\")\ncard_df &lt;- data.frame(id = seq(cards))\ncard_df$winning &lt;- strsplit(trimws(sub(\".*: \", \"\", sub(\" \\\\|.*\", \"\", cards))), \" +\")\ncard_df$numbers &lt;- strsplit(trimws(sub(\".*\\\\|\", \"\", cards)), \" +\")\nhead(card_df)\n\n\n  id                                winning\n1  1 58, 96, 35, 20, 93, 34, 10, 27, 37, 30\n2  2 64, 84, 57, 46, 53, 86, 90, 99, 59, 70\n3  3  55, 87, 51, 18, 86, 5, 66, 83, 92, 95\n4  4 52, 21, 59, 78, 18, 42, 46, 91, 31, 10\n5  5   8, 79, 31, 1, 26, 57, 90, 62, 93, 10\n6  6 90, 75, 24, 69, 81, 93, 39, 38, 96, 33\n                                                                                            numbers\n1  99, 70, 93, 11, 63, 41, 37, 29, 7, 28, 34, 10, 40, 96, 38, 35, 27, 30, 20, 21, 4, 51, 58, 39, 56\n2 99, 59, 30, 83, 84, 70, 31, 57, 6, 29, 18, 82, 15, 88, 86, 53, 51, 64, 32, 47, 44, 46, 80, 39, 90\n3 73, 68, 49, 57, 29, 14, 41, 42, 65, 10, 84, 34, 67, 44, 6, 48, 61, 13, 28, 38, 52, 19, 78, 64, 11\n4      48, 83, 13, 68, 42, 72, 4, 10, 6, 36, 63, 81, 21, 94, 8, 3, 78, 53, 2, 47, 62, 77, 56, 97, 7\n5   26, 70, 73, 6, 16, 15, 93, 57, 34, 56, 87, 31, 10, 45, 1, 22, 79, 77, 90, 47, 42, 58, 41, 62, 8\n6  2, 78, 68, 31, 99, 35, 49, 66, 36, 84, 54, 27, 43, 80, 50, 3, 22, 74, 60, 98, 57, 83, 13, 82, 91"
  },
  {
    "objectID": "year_2023/day_04/index.html#part-1",
    "href": "year_2023/day_04/index.html#part-1",
    "title": "2023 - Day 4: Scratchcards",
    "section": "Part 1",
    "text": "Part 1\n\nAs far as the Elf has been able to figure out, you have to figure out which of the numbers you have appear in the list of winning numbers. The first match makes the card worth one point and each match after the first doubles the point value of that card.\nTake a seat in the large pile of colorful cards. How many points are they worth in total?\n\nHaving them in list columns meant that could use apply on the table and use %in% for the matches.\n\n\nCode\ncard_df$inc &lt;- apply(card_df, 1, \\(x) sum(x$numbers %in% x$winning))\nsum(2 ^ (card_df$inc[card_df$inc &gt; 0] - 1))\n\n\n[1] 26218"
  },
  {
    "objectID": "year_2023/day_04/index.html#part-2",
    "href": "year_2023/day_04/index.html#part-2",
    "title": "2023 - Day 4: Scratchcards",
    "section": "Part 2",
    "text": "Part 2\n\nJust as you’re about to report your findings to the Elf, one of you realizes that the rules have actually been printed on the back of every card this whole time.\nThere’s no such thing as “points”. Instead, scratchcards only cause you to win more scratchcards equal to the number of winning numbers you have.\nSpecifically, you win copies of the scratchcards below the winning card equal to the number of matches. So, if card 10 were to have 5 matching numbers, you would win one copy each of cards 11, 12, 13, 14, and 15.\nProcess all of the original and copied scratchcards until no more scratchcards are won. Including the original set of scratchcards, how many total scratchcards do you end up with?\n\nMissed the part where each scratchcard was bought rather than only going until couldn’t win any more. Simple check if the card won and added to the win column if it did.\n\n\nCode\ncard_df$win &lt;- 1\nfor (i in seq(cards)) {\n  inc &lt;- card_df$inc[i]\n  if (inc &gt; 0) {\n    card_df$win[i + seq(inc)] &lt;- card_df$win[i + seq(inc)] + card_df$win[i]\n  }\n}\nsum(card_df$win)\n\n\n[1] 9997537"
  },
  {
    "objectID": "year_2023/day_05/index.html",
    "href": "year_2023/day_05/index.html",
    "title": "2023 - Day 5: If You Give A Seed A Fertilizer",
    "section": "",
    "text": "You take the boat and find the gardener right where you were told he would be: managing a giant “garden” that looks more to you like a farm.\n“A water source? Island Island is the water source!” You point out that Snow Island isn’t receiving any water.\n“Oh, we had to stop the water because we ran out of sand to filter it with! Can’t make snow with dirty water. Don’t worry, I’m sure we’ll get more sand soon; we only turned off the water a few days… weeks… oh no.” His face sinks into a look of horrified realization.\n“I’ve been so busy making sure everyone here has food that I completely forgot to check why we stopped getting more sand! There’s a ferry leaving soon that is headed over in that direction - it’s much faster than your boat. Could you please go check it out?”\nYou barely have time to agree to this request when he brings up another. “While you wait for the ferry, maybe you can help us with our food production problem. The latest Island Island Almanac just arrived and we’re having trouble making sense of it.”\nThe almanac (your puzzle input) lists all of the seeds that need to be planted. It also lists what type of soil to use with each kind of seed, what type of fertilizer to use with each kind of soil, what type of water to use with each kind of fertilizer, and so on. Every type of seed, soil, fertilizer and so on is identified with a number, but numbers are reused by each category - that is, soil 123 and fertilizer 123 aren’t necessarily related to each other.\nThe rest of the almanac contains a list of maps which describe how to convert numbers from a source category into numbers in a destination category. That is, the section that starts with seed-to-soil map: describes how to convert a seed number (the source) to a soil number (the destination). This lets the gardener and his team know which soil to use with which seeds, which water to use with which fertilizer, and so on.\nRather than list every source number and its corresponding destination number one by one, the maps describe entire ranges of numbers that can be converted. Each line within a map contains three numbers: the destination range start, the source range start, and the range length."
  },
  {
    "objectID": "year_2023/day_05/index.html#set-up",
    "href": "year_2023/day_05/index.html#set-up",
    "title": "2023 - Day 5: If You Give A Seed A Fertilizer",
    "section": "Set-Up",
    "text": "Set-Up\nConverting all the sets of data into nice little matrices to apply over later on. Keeping the seeds separate from the process.\n\n\nCode\nfile_name &lt;- \"input.txt\"\nseed_data &lt;- readLines(file_name)\nempty_lines &lt;- which(seed_data == \"\") + 1\n\nseeds &lt;- sub(\"seeds: \", \"\", seed_data[1]) |&gt; strsplit(\" \") |&gt; _[[1]] |&gt; as.numeric()\nseed_map &lt;- list(\n  seed_soil = read.table(file_name, skip = empty_lines[1], nrows = empty_lines[2] - empty_lines[1] - 2),\n  soil_fert = read.table(file_name, skip = empty_lines[2], nrows = empty_lines[3] - empty_lines[2] - 2),\n  fert_water = read.table(file_name, skip = empty_lines[3], nrows = empty_lines[4] - empty_lines[3] - 2),\n  water_light = read.table(file_name, skip = empty_lines[4], nrows = empty_lines[5] - empty_lines[4] - 2),\n  light_temp = read.table(file_name, skip = empty_lines[5], nrows = empty_lines[6] - empty_lines[5] - 2),\n  temp_humid = read.table(file_name, skip = empty_lines[6], nrows = empty_lines[7] - empty_lines[6] - 2),\n  huid_loc = read.table(file_name, skip = empty_lines[7])\n)\nseed_map &lt;- lapply(seed_map, as.matrix)"
  },
  {
    "objectID": "year_2023/day_05/index.html#part-1",
    "href": "year_2023/day_05/index.html#part-1",
    "title": "2023 - Day 5: If You Give A Seed A Fertilizer",
    "section": "Part 1",
    "text": "Part 1\n\nThe gardener and his team want to get started as soon as possible, so they’d like to know the closest location that needs a seed. Using these maps, find the lowest location number that corresponds to any of the initial seeds. To do this, you’ll need to convert each seed number through other categories until you can find its corresponding location number.\nWhat is the lowest location number that corresponds to any of the initial seed numbers?\n\nI’ve been assigning variables using &lt;&lt;- which isn’t the best practice, but was the easiest way I could find iteratively finding the lowest location without including too many for loops.\n\n\nCode\nseed_loc &lt;- seeds\nmapped &lt;- rep(FALSE, length(seeds))\n\napply_mapping &lt;- function(mapping) {\n  if (all(mapped)) return(NULL)\n  source &lt;- mapping[2] + mapping[3]\n  seed_diff &lt;- seed_loc - mapping[2]\n  valid_seeds &lt;- seed_loc &gt;= mapping[2] & seed_loc &lt; source\n\n  seed_loc[valid_seeds & !mapped] &lt;&lt;- c(mapping[1] + seed_diff)[valid_seeds & !mapped]\n  mapped &lt;&lt;- mapped | valid_seeds\n  NULL\n}\n\ntmp &lt;- lapply(seed_map, \\(x) {\n  mapped &lt;&lt;- rep(FALSE, length(seed_loc))\n  apply(x, 1, apply_mapping)\n  NULL\n})\n\nprint(seed_loc)\n\n\n [1]  522761994 1669264475 1994231379 1646553585  876486655 2502514616\n [7]  280278922 2482052341 3990263023 2737734226 1813446793  218513636\n[13] 3367560261 2500384090 2459750215 3090063388 4002673505 3137354224\n[19] 3071107355 1137359212"
  },
  {
    "objectID": "year_2023/day_05/index.html#part-2",
    "href": "year_2023/day_05/index.html#part-2",
    "title": "2023 - Day 5: If You Give A Seed A Fertilizer",
    "section": "Part 2",
    "text": "Part 2\nThis part was frustrating, not least because my inequality was slightly wrong in part 1, and kept being off by 1. Brute force seemed to be the best tactic, pretty much using the same functionality as part 1 (thanks to Tan Ho for the idea of having a crude estimate before going to the smaller chunk).\n\n\nCode\nseed_loc_2 &lt;- split(seeds, (seq(seeds) + 1) %/% 2)\nmapped &lt;- FALSE\nmin_seed_loc &lt;- Inf\ni &lt;- Inf\nmin_i &lt;- Inf\n\ntmp &lt;- lapply(seed_loc_2, \\(x) {\n  i &lt;&lt;- x[[1]]\n  while (i &lt; x[[1]] + x[[2]]) {\n    seed_loc &lt;&lt;- i\n    lapply(seed_map, \\(x) {\n      mapped &lt;&lt;- FALSE\n      apply(x, 1, apply_mapping)\n    })\n    if (seed_loc &lt; min_seed_loc) {min_i &lt;&lt;- i; min_seed_loc &lt;&lt;- seed_loc}\n    i &lt;&lt;- i + 20000\n  }\n})\n\ntmp &lt;- lapply(list(c(min_i - 20000, 20000 * 2)), \\(x) {\n  i &lt;&lt;- x[[1]]\n  while (i &lt;= x[[1]] + x[[2]]) {\n    seed_loc &lt;&lt;- i\n    lapply(seed_map, \\(x) {\n      mapped &lt;&lt;- FALSE\n      apply(x, 1, apply_mapping)\n    })\n    if (seed_loc &lt; min_seed_loc) {min_i &lt;&lt;- i; min_seed_loc &lt;&lt;- seed_loc}\n    i &lt;&lt;- i + 1\n  }\n})\n\nprint(min_seed_loc)\n\n\n[1] 81956384"
  },
  {
    "objectID": "year_2023/day_06/index.html",
    "href": "year_2023/day_06/index.html",
    "title": "2023 - Day 6: Wait For It",
    "section": "",
    "text": "The ferry quickly brings you across Island Island. After asking around, you discover that there is indeed normally a large pile of sand somewhere near here, but you don’t see anything besides lots of water and the small island where the ferry has docked.\nAs you try to figure out what to do next, you notice a poster on a wall near the ferry dock. “Boat races! Open to the public! Grand prize is an all-expenses-paid trip to Desert Island!” That must be where the sand comes from! Best of all, the boat races are starting in just a few minutes.\nYou manage to sign up as a competitor in the boat races just in time. The organizer explains that it’s not really a traditional race - instead, you will get a fixed amount of time during which your boat has to travel as far as it can, and you win if your boat goes the farthest.\nAs part of signing up, you get a sheet of paper (your puzzle input) that lists the time allowed for each race and also the best distance ever recorded in that race. To guarantee you win the grand prize, you need to make sure you go farther in each race than the current record holder.\nThe organizer brings you over to the area where the boat races are held. The boats are much smaller than you expected - they’re actually toy boats, each with a big button on top. Holding down the button charges the boat, and releasing the button allows the boat to move. Boats move faster if their button was held longer, but time spent holding the button counts against the total race time. You can only hold the button at the start of the race, and boats don’t move until the button is released."
  },
  {
    "objectID": "year_2023/day_06/index.html#set-up",
    "href": "year_2023/day_06/index.html#set-up",
    "title": "2023 - Day 6: Wait For It",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\nraces &lt;- read.table(\"input.txt\")"
  },
  {
    "objectID": "year_2023/day_06/index.html#part-1",
    "href": "year_2023/day_06/index.html#part-1",
    "title": "2023 - Day 6: Wait For It",
    "section": "Part 1",
    "text": "Part 1\n\nTo see how much margin of error you have, determine the number of ways you can beat the record in each race. Determine the number of ways you could beat the record in each race. What do you get if you multiply these numbers together?\n\nCreated a nice function to apply over the races (that was definitely vectorised before running Part 2 and not using a sapply to iterate).\n\n\nCode\nfind_winning_races &lt;- function(x) {\n  time &lt;- x[1]; distance &lt;- x[2]\n  times &lt;- seq(time)\n  distances &lt;- (time - times) * times\n  sum(distances &gt; distance)\n}\n\nwinning_times &lt;- sapply(races[, -1], find_winning_races)\nprod(winning_times)\n\n\n[1] 128700"
  },
  {
    "objectID": "year_2023/day_06/index.html#part-2",
    "href": "year_2023/day_06/index.html#part-2",
    "title": "2023 - Day 6: Wait For It",
    "section": "Part 2",
    "text": "Part 2\n\nAs the race is about to start, you realize the piece of paper with race times and record distances you got earlier actually just has very bad kerning. There’s really only one race - ignore the spaces between the numbers on each line.\nHow many ways can you beat the record in this one much longer race?\n\nA one liner! Using the function from Part 1, realised I got caught in the inefficient function, vectorised and was a lot quicker.\n\n\nCode\nfind_winning_races(as.numeric(apply(races[, -1], 1, paste0, collapse = \"\")))\n\n\n[1] 39594072"
  },
  {
    "objectID": "year_2023/day_07/index.html",
    "href": "year_2023/day_07/index.html",
    "title": "2023 - Day 7: Camel Cards",
    "section": "",
    "text": "Your all-expenses-paid trip turns out to be a one-way, five-minute ride in an airship. (At least it’s a cool airship!) It drops you off at the edge of a vast desert and descends back to Island Island.\n“Did you bring the parts?”\nYou turn around to see an Elf completely covered in white clothing, wearing goggles, and riding a large camel.\n“Did you bring the parts?” she asks again, louder this time. You aren’t sure what parts she’s looking for; you’re here to figure out why the sand stopped.\n“The parts! For the sand, yes! Come with me; I will show you.” She beckons you onto the camel.\nAfter riding a bit across the sands of Desert Island, you can see what look like very large rocks covering half of the horizon. The Elf explains that the rocks are all along the part of Desert Island that is directly above Island Island, making it hard to even get there. Normally, they use big machines to move the rocks and filter the sand, but the machines have broken down because Desert Island recently stopped receiving the parts they need to fix the machines.\nYou’ve already assumed it’ll be your job to figure out why the parts stopped when she asks if you can help. You agree automatically.\nBecause the journey will take a few days, she offers to teach you the game of Camel Cards. Camel Cards is sort of similar to poker except it’s designed to be easier to play while riding a camel.\nIn Camel Cards, you get a list of hands, and your goal is to order them based on the strength of each hand. A hand consists of five cards labeled one of A, K, Q, J, T, 9, 8, 7, 6, 5, 4, 3, or 2. The relative strength of each card follows this order, where A is the highest and 2 is the lowest.\nIf two hands have the same type, a second ordering rule takes effect. Start by comparing the first card in each hand. If these cards are different, the hand with the stronger first card is considered stronger. If the first card in each hand have the same label, however, then move on to considering the second card in each hand. If they differ, the hand with the higher second card wins; otherwise, continue with the third card in each hand, then the fourth, then the fifth."
  },
  {
    "objectID": "year_2023/day_07/index.html#set-up",
    "href": "year_2023/day_07/index.html#set-up",
    "title": "2023 - Day 7: Camel Cards",
    "section": "Set-Up",
    "text": "Set-Up\nFell into using {data.table} as originally had different number of columns as I was tracking highest value card rather than the position like the description mentioned. With all iterations the same number of columns, do.call(rbind, ...) would have also worked.\n\n\nCode\nlibrary(data.table)\n\n\nWarning: package 'data.table' was built under R version 4.3.2\n\n\nCode\ncards &lt;- read.table(\"input.txt\", col.names = c(\"card\", \"bid\"))\n\n\nCreated a function for part 1, and included the card_order and wild_jacks for Part 2, making the code for Part 2 a lot simpler. Using table enabled checking the most common card better than trying to count through the cards.\nGot stumped twice by ordering the cards by value (using nms &lt;- names(tbl)) and then one minor thing where table includes all values of a factor, not just the ones available like a character vector.\n\n\nCode\nget_card_score &lt;- function(x, card_order, wild_jacks = FALSE) {\n  x &lt;- factor(x, card_order)\n  tbl &lt;- sort(table(x), decreasing = TRUE)\n  if (wild_jacks) {\n    tbl[[1 + (names(tbl)[1] == \"J\")]] &lt;- tbl[[1 + (names(tbl)[1] == \"J\")]] + tbl[[\"J\"]]\n    tbl[[\"J\"]] &lt;- 0\n    tbl &lt;- sort(tbl, decreasing = TRUE)\n  }\n\n  index &lt;- 7\n  if (tbl[1] == 5) index &lt;- 1\n  if (tbl[1] == 4) index &lt;- 2\n  if (tbl[1] == 3) index &lt;- if (tbl[2] == 2) 3 else 4\n  if (tbl[1] == 2) index &lt;- if (tbl[2] == 2) 5 else 6\n  data.frame(index = index, cd1 = x[1], cd2 = x[2], cd3 = x[3], cd4 = x[4], cd5 = x[5])\n}\n\nget_card_sum &lt;- function(card, card_order, wild_jacks = FALSE) {\n  card_result &lt;- data.table::rbindlist(\n    lapply(\n      strsplit(cards$card, \"\"), \n      get_card_score, \n      card_order = card_order, \n      wild_jacks = wild_jacks\n    ), \n    use.names = TRUE, \n    fill = TRUE\n  )\n  card_result[\n    , \n    (names(card_result)[-1]) := lapply(.SD, factor, levels = card_order), \n    .SDcols = names(card_result)[-1]\n  ]\n  card_result &lt;- data.table::data.table(cbind(cards, card_result))\n  data.table::setorderv(card_result, c(\"index\", paste0(\"cd\", 1:5)), order = rep(-1, 6))\n  card_result[, rank := .I]\n  card_result[, sum(bid * rank)]\n}"
  },
  {
    "objectID": "year_2023/day_07/index.html#part-1",
    "href": "year_2023/day_07/index.html#part-1",
    "title": "2023 - Day 7: Camel Cards",
    "section": "Part 1",
    "text": "Part 1\n\nNow, you can determine the total winnings of this set of hands by adding up the result of multiplying each hand’s bid with its rank. Find the rank of every hand in your set. What are the total winnings?\n\n\n\nCode\nget_card_sum(cards, c(\"A\", \"K\", \"Q\", \"J\", \"T\", 9:1))\n\n\n[1] 250474325"
  },
  {
    "objectID": "year_2023/day_07/index.html#part-2",
    "href": "year_2023/day_07/index.html#part-2",
    "title": "2023 - Day 7: Camel Cards",
    "section": "Part 2",
    "text": "Part 2\n\nTo make things a little more interesting, the Elf introduces one additional rule. Now, J cards are jokers - wildcards that can act like whatever card would make the hand the strongest type possible.\nTo balance this, J cards are now the weakest individual cards, weaker even than 2. The other cards stay in the same order: A, K, Q, T, 9, 8, 7, 6, 5, 4, 3, 2, J.\nUsing the new joker rule, find the rank of every hand in your set. What are the new total winnings?\n\nHaving the function helped make this quick to write, as could include a new parameter for the Jack as joker. Only thing realised when adding the function in, Jacks could be the most common card but not every card, so needed to add the check, otherwise wouldn’t find the better hand!\n\n\nCode\nget_card_sum(cards, c(\"A\", \"K\", \"Q\", \"T\", 9:1, \"J\"), TRUE)\n\n\n[1] 248909434"
  },
  {
    "objectID": "year_2023/day_08/index.html",
    "href": "year_2023/day_08/index.html",
    "title": "2023 - Day 8: Haunted Wasteland",
    "section": "",
    "text": "You’re still riding a camel across Desert Island when you spot a sandstorm quickly approaching. When you turn to warn the Elf, she disappears before your eyes! To be fair, she had just finished warning you about ghosts a few minutes ago.\nOne of the camel’s pouches is labeled “maps” - sure enough, it’s full of documents (your puzzle input) about how to navigate the desert. At least, you’re pretty sure that’s what they are; one of the documents contains a list of left/right instructions, and the rest of the documents seem to describe some kind of network of labeled nodes.\nIt seems like you’re meant to use the left/right instructions to navigate the network. Perhaps if you have the camel follow the same instructions, you can escape the haunted wasteland!\nAfter examining the maps for a bit, two nodes stick out: AAA and ZZZ. You feel like AAA is where you are now, and you have to follow the left/right instructions until you reach ZZZ."
  },
  {
    "objectID": "year_2023/day_08/index.html#set-up",
    "href": "year_2023/day_08/index.html#set-up",
    "title": "2023 - Day 8: Haunted Wasteland",
    "section": "Set-Up",
    "text": "Set-Up\nFirst day of needing to use scipen! Other than that, the data was in a nice enough structure to hard code the substrings for the columns.\n\n\nCode\noptions(scipen = 999)\nfile_name &lt;- \"input.txt\"\ninstructions &lt;- readLines(file_name, n = 1L) |&gt; strsplit(\"\") |&gt; unlist()\n\npath_info &lt;- readLines(file_name)[-1:-2]\npaths &lt;- data.frame(\n  from = substr(path_info, 1, 3),\n  L = substr(path_info, 8, 10),\n  R = substr(path_info, 13, 15)\n)\nhead(paths)\n\n\n  from   L   R\n1  QRX XNN TCJ\n2  GSM PNH BVG\n3  VDX VSG ZZZ\n4  TGV SHD FVB\n5  PPH MLX CBT\n6  GRP FGH VLK"
  },
  {
    "objectID": "year_2023/day_08/index.html#part-1",
    "href": "year_2023/day_08/index.html#part-1",
    "title": "2023 - Day 8: Haunted Wasteland",
    "section": "Part 1",
    "text": "Part 1\n\nStarting with AAA, you need to look up the next element based on the next left/right instruction in your input.\nOf course, you might not find ZZZ right away. If you run out of left/right instructions, repeat the whole sequence of instructions as necessary: RL really means RLRLRLRLRLRLRLRL... and so on.\nStarting at AAA, follow the left/right instructions. How many steps are required to reach ZZZ?\n\nCreated a small while loop to count the iterations, this was then functionalised for Part 2.\n\n\nCode\ncalculate_niters &lt;- function(path, x = \"AAA\", y = \"ZZZ\") {\n  iter &lt;- 0\n  inst_i &lt;- 1\n  while (!grepl(y, x)) {\n    x &lt;- path[path$from == x, instructions[inst_i]]\n    inst_i &lt;- if (inst_i == length(instructions)) 1 else inst_i + 1\n    iter &lt;- iter + 1\n  }\n  iter\n}\n\ncalculate_niters(paths)\n\n\n[1] 20093"
  },
  {
    "objectID": "year_2023/day_08/index.html#part-2",
    "href": "year_2023/day_08/index.html#part-2",
    "title": "2023 - Day 8: Haunted Wasteland",
    "section": "Part 2",
    "text": "Part 2\n\nThe sandstorm is upon you and you aren’t any closer to escaping the wasteland. You had the camel follow the instructions, but you’ve barely left your starting position. It’s going to take significantly more steps to escape!\nWhat if the map isn’t for people - what if the map is for ghosts? Are ghosts even bound by the laws of spacetime? Only one way to find out.\nAfter examining the maps a bit longer, your attention is drawn to a curious fact: the number of nodes with names ending in A is equal to the number ending in Z! If you were a ghost, you’d probably just start at every node that ends with A and follow all of the paths at the same time until they all simultaneously end up at nodes that end with Z.\n\nFirst read this as needed to convert everything ending in A as 1A, 2A etc (like the example). Was easier to create a function that used the code in part 1 when just needed to know when all ..A were in ..Z. Used the pracma::Lcm function to find the lowest common multiple because was quicker than writing something in base R!\n\n\nCode\nn_steps &lt;- sapply(grep(\"..A\", paths$from, value = TRUE), calculate_niters, path = paths, y = \"..Z\")\nReduce(pracma::Lcm, n_steps)\n\n\n[1] 22103062509257"
  },
  {
    "objectID": "year_2023/day_09/index.html",
    "href": "year_2023/day_09/index.html",
    "title": "2023 - Day 9: Mirage Maintenance",
    "section": "",
    "text": "You ride the camel through the sandstorm and stop where the ghost’s maps told you to stop. The sandstorm subsequently subsides, somehow seeing you standing at an oasis!\nThe camel goes to get some water and you stretch your neck. As you look up, you discover what must be yet another giant floating island, this one made of metal! That must be where the parts to fix the sand machines come from.\nThere’s even a hang glider partially buried in the sand here; once the sun rises and heats up the sand, you might be able to use the glider and the hot air to get all the way up to the metal island!\nWhile you wait for the sun to rise, you admire the oasis hidden here in the middle of Desert Island. It must have a delicate ecosystem; you might as well take some ecological readings while you wait. Maybe you can report any environmental instabilities you find to someone so the oasis can be around for the next sandstorm-worn traveler.\nYou pull out your handy Oasis And Sand Instability Sensor and analyze your surroundings. The OASIS produces a report of many values and how they are changing over time (your puzzle input). Each line in the report contains the history of a single value.\nTo best protect the oasis, your environmental report should include a prediction of the next value in each history. To do this, start by making a new sequence from the difference at each step of your history. If that sequence is not all zeroes, repeat this process, using the sequence you just generated as the input sequence. Once all of the values in your latest sequence are zeroes, you can extrapolate what the next value of the original history should be."
  },
  {
    "objectID": "year_2023/day_09/index.html#set-up",
    "href": "year_2023/day_09/index.html#set-up",
    "title": "2023 - Day 9: Mirage Maintenance",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\nsensors &lt;- read.table(\"input.txt\")\nhead(sensors)\n\n\n  V1  V2  V3  V4  V5  V6  V7   V8   V9  V10   V11   V12   V13    V14    V15\n1 18  34  62 104 162 241 354  541  935 1948  4716 12044 30251  72571 165186\n2 -1   9  31  63 102 139 150   87 -129 -609 -1472 -2740 -4028  -3797   2219\n3 -5 -12 -21 -31 -28  39 297 1010 2680 6225 13298 26846 52051  97846 179258\n4 16  31  55  93 166 327 690 1491 3227 6970 15040 32365 69094 145421 300225\n5 18  23  28  33  38  43  48   53   58   63    68    73    78     83     88\n6 -5   6  29  60  96 153 294  676 1649 3981  9347 21326 47356 102536 217094\n     V16     V17     V18     V19     V20      V21\n1 357653  740584 1475142 2841482 5317016  9700712\n2  24016   82639  219061  508309 1081061  2155578\n3 320897  561985  963402 1617317 2660071  4289086\n4 606225 1196290 2309185 4370163 8136063 14963082\n5     93      98     103     108     113      118\n6 451214  924476 1873567 3762890 7490707 14761961"
  },
  {
    "objectID": "year_2023/day_09/index.html#part-1",
    "href": "year_2023/day_09/index.html#part-1",
    "title": "2023 - Day 9: Mirage Maintenance",
    "section": "Part 1",
    "text": "Part 1\n\nAnalyze your OASIS report and extrapolate the next value for each history. What is the sum of these extrapolated values?\n\n\n\nCode\nfind_next_sensor &lt;- function(x) {\n  if (all(x == 0)) return(0)\n  y &lt;- diff(x)\n  z &lt;- find_next_sensor(y)\n  tail(x, 1) + z\n}\n\nsum(apply(sensors, 1, find_next_sensor))\n\n\n[1] 1731106378"
  },
  {
    "objectID": "year_2023/day_09/index.html#part-2",
    "href": "year_2023/day_09/index.html#part-2",
    "title": "2023 - Day 9: Mirage Maintenance",
    "section": "Part 2",
    "text": "Part 2\n\nOf course, it would be nice to have even more history included in your report. Surely it’s safe to just extrapolate backwards as well, right?\nFor each history, repeat the process of finding differences until the sequence of differences is entirely zero. Then, rather than adding a zero to the end and filling in the next values of each previous sequence, you should instead add a zero to the beginning of your sequence of zeroes, then fill in new first values for each previous sequence.\n\nHooray for one line part 2s!\n\n\nCode\nsum(apply(rev(sensors), 1, find_next_sensor))\n\n\n[1] 1087"
  },
  {
    "objectID": "year_2023/day_10/index.html",
    "href": "year_2023/day_10/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_10/index.html#set-up",
    "href": "year_2023/day_10/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_10/index.html#part-1",
    "href": "year_2023/day_10/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_10/index.html#part-2",
    "href": "year_2023/day_10/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_11/index.html",
    "href": "year_2023/day_11/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_11/index.html#set-up",
    "href": "year_2023/day_11/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_11/index.html#part-1",
    "href": "year_2023/day_11/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_11/index.html#part-2",
    "href": "year_2023/day_11/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_12/index.html",
    "href": "year_2023/day_12/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_12/index.html#set-up",
    "href": "year_2023/day_12/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_12/index.html#part-1",
    "href": "year_2023/day_12/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_12/index.html#part-2",
    "href": "year_2023/day_12/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_13/index.html",
    "href": "year_2023/day_13/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_13/index.html#set-up",
    "href": "year_2023/day_13/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_13/index.html#part-1",
    "href": "year_2023/day_13/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_13/index.html#part-2",
    "href": "year_2023/day_13/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_14/index.html",
    "href": "year_2023/day_14/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_14/index.html#set-up",
    "href": "year_2023/day_14/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_14/index.html#part-1",
    "href": "year_2023/day_14/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_14/index.html#part-2",
    "href": "year_2023/day_14/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_15/index.html",
    "href": "year_2023/day_15/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_15/index.html#set-up",
    "href": "year_2023/day_15/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_15/index.html#part-1",
    "href": "year_2023/day_15/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_15/index.html#part-2",
    "href": "year_2023/day_15/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_16/index.html",
    "href": "year_2023/day_16/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_16/index.html#set-up",
    "href": "year_2023/day_16/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_16/index.html#part-1",
    "href": "year_2023/day_16/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_16/index.html#part-2",
    "href": "year_2023/day_16/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_17/index.html",
    "href": "year_2023/day_17/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_17/index.html#set-up",
    "href": "year_2023/day_17/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_17/index.html#part-1",
    "href": "year_2023/day_17/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_17/index.html#part-2",
    "href": "year_2023/day_17/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_18/index.html",
    "href": "year_2023/day_18/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_18/index.html#set-up",
    "href": "year_2023/day_18/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_18/index.html#part-1",
    "href": "year_2023/day_18/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_18/index.html#part-2",
    "href": "year_2023/day_18/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_19/index.html",
    "href": "year_2023/day_19/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_19/index.html#set-up",
    "href": "year_2023/day_19/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_19/index.html#part-1",
    "href": "year_2023/day_19/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_19/index.html#part-2",
    "href": "year_2023/day_19/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_20/index.html",
    "href": "year_2023/day_20/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_20/index.html#set-up",
    "href": "year_2023/day_20/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_20/index.html#part-1",
    "href": "year_2023/day_20/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_20/index.html#part-2",
    "href": "year_2023/day_20/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_21/index.html",
    "href": "year_2023/day_21/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_21/index.html#set-up",
    "href": "year_2023/day_21/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_21/index.html#part-1",
    "href": "year_2023/day_21/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_21/index.html#part-2",
    "href": "year_2023/day_21/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_22/index.html",
    "href": "year_2023/day_22/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_22/index.html#set-up",
    "href": "year_2023/day_22/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_22/index.html#part-1",
    "href": "year_2023/day_22/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_22/index.html#part-2",
    "href": "year_2023/day_22/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_23/index.html",
    "href": "year_2023/day_23/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_23/index.html#set-up",
    "href": "year_2023/day_23/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_23/index.html#part-1",
    "href": "year_2023/day_23/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_23/index.html#part-2",
    "href": "year_2023/day_23/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_24/index.html",
    "href": "year_2023/day_24/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_24/index.html#set-up",
    "href": "year_2023/day_24/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_24/index.html#part-1",
    "href": "year_2023/day_24/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_24/index.html#part-2",
    "href": "year_2023/day_24/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_25/index.html",
    "href": "year_2023/day_25/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2023/day_25/index.html#set-up",
    "href": "year_2023/day_25/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2023/day_25/index.html#part-1",
    "href": "year_2023/day_25/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2023/day_25/index.html#part-2",
    "href": "year_2023/day_25/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2023/day_02/index.html",
    "href": "year_2023/day_02/index.html",
    "title": "2023 - Day 2",
    "section": "",
    "text": "You’re launched high into the atmosphere! The apex of your trajectory just barely reaches the surface of a large island floating in the sky. You gently land in a fluffy pile of leaves. It’s quite cold, but you don’t see much snow. An Elf runs over to greet you.\nThe Elf explains that you’ve arrived at Snow Island and apologizes for the lack of snow. He’ll be happy to explain the situation, but it’s a bit of a walk, so you have some time. They don’t get many visitors up here; would you like to play a game in the meantime?\nAs you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He’ll do this a few times per game."
  },
  {
    "objectID": "year_2023/day_02/index.html#set-up",
    "href": "year_2023/day_02/index.html#set-up",
    "title": "2023 - Day 2",
    "section": "Set-Up",
    "text": "Set-Up\nGetting the games as a number was useful to get the sum of the IDs, but alternatively could have added a new column that contained the row number. Splitting the results into the separate games makes searching for colours easier.\n\n\nCode\ngames &lt;- read.table(\"input.txt\", sep = \":\", col.names = c(\"game\", \"results\"))\ngames$game &lt;- as.numeric(sub(\".* \", \"\", games$game))\n\nhead(games)\n\n\n  game\n1    1\n2    2\n3    3\n4    4\n5    5\n6    6\n                                                                                                                                   results\n1                                                              10 green, 9 blue, 1 red; 1 red, 7 green; 11 green, 6 blue; 8 blue, 12 green\n2                                        11 red, 7 green, 3 blue; 1 blue, 8 green, 5 red; 2 red, 12 green, 1 blue; 10 green, 5 blue, 7 red\n3                        2 red, 7 green, 1 blue; 1 blue, 8 red; 7 green, 19 red, 5 blue; 1 blue, 10 green, 18 red; 10 red, 6 blue, 4 green\n4                                                                  2 blue, 5 green, 2 red; 7 red, 3 green; 3 blue, 2 red; 16 green, 2 blue\n5  1 blue, 9 red; 5 blue, 9 green, 6 red; 8 red, 10 blue, 3 green; 3 red, 13 green, 4 blue; 5 green, 9 red, 6 blue; 4 green, 8 red, 7 blue\n6                                           1 red, 2 green; 2 red, 1 blue; 5 red, 10 green, 2 blue; 1 blue, 2 green, 3 red; 1 red, 6 green\n\n\nCode\ngames$result_split &lt;- strsplit(games$results, \";\")"
  },
  {
    "objectID": "year_2023/day_03/index.html",
    "href": "year_2023/day_03/index.html",
    "title": "2023 - Day 3: Gear Ratios",
    "section": "",
    "text": "You and the Elf eventually reach a gondola lift station; he says the gondola lift will take you up to the water source, but this is as far as he can bring you. You go inside.\nIt doesn’t take long to find the gondolas, but there seems to be a problem: they’re not moving.\n“Aaah!”\nYou turn around to see a slightly-greasy Elf with a wrench and a look of surprise. “Sorry, I wasn’t expecting anyone! The gondola lift isn’t working right now; it’ll still be a while before I can fix it.” You offer to help.\nThe engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing."
  },
  {
    "objectID": "year_2023/day_03/index.html#set-up",
    "href": "year_2023/day_03/index.html#set-up",
    "title": "2023 - Day 3: Gear Ratios",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\nschema_lines &lt;- readLines(\"input.txt\")\nschema &lt;- do.call(rbind, strsplit(schema_lines, \"\"))\ndims &lt;- dim(schema)"
  },
  {
    "objectID": "year_2021/day_22/index.html#set-up",
    "href": "year_2021/day_22/index.html#set-up",
    "title": "2021 - Day 22",
    "section": "",
    "text": "Code\ninstructions &lt;- readLines(\"input.txt\")\nstr(instructions)\n\n\n chr [1:420] \"on x=-17..30,y=-5..41,z=-33..14\" ...\n\n\nCode\ninst &lt;- as.data.frame(do.call(rbind, regmatches(instructions, gregexpr(\"on|off|(-|)\\\\d+\", instructions))))\nnames(inst) &lt;- c(\"switch\", \"x1\", \"x2\", \"y1\", \"y2\", \"z1\", \"z2\")\ninst[, -1] &lt;- sapply(inst[, -1], as.numeric)\ninst[, -1] &lt;- cbind(\n  x1 = pmin(inst$x1, inst$x2), x2 = pmax(inst$x1, inst$x2),\n  y1 = pmin(inst$y1, inst$y2), y2 = pmax(inst$y1, inst$y2),\n  z1 = pmin(inst$z1, inst$z2), z2 = pmax(inst$z1, inst$z2)\n)"
  },
  {
    "objectID": "year_xxxx/day_24/index.html",
    "href": "year_xxxx/day_24/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_24/index.html#set-up",
    "href": "year_xxxx/day_24/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_22/index.html",
    "href": "year_xxxx/day_22/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_22/index.html#set-up",
    "href": "year_xxxx/day_22/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_20/index.html",
    "href": "year_xxxx/day_20/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_20/index.html#set-up",
    "href": "year_xxxx/day_20/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_18/index.html",
    "href": "year_xxxx/day_18/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_18/index.html#set-up",
    "href": "year_xxxx/day_18/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_16/index.html",
    "href": "year_xxxx/day_16/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_16/index.html#set-up",
    "href": "year_xxxx/day_16/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_14/index.html",
    "href": "year_xxxx/day_14/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_14/index.html#set-up",
    "href": "year_xxxx/day_14/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_12/index.html",
    "href": "year_xxxx/day_12/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_12/index.html#set-up",
    "href": "year_xxxx/day_12/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_10/index.html",
    "href": "year_xxxx/day_10/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_10/index.html#set-up",
    "href": "year_xxxx/day_10/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_08/index.html",
    "href": "year_xxxx/day_08/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_08/index.html#set-up",
    "href": "year_xxxx/day_08/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_06/index.html",
    "href": "year_xxxx/day_06/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_06/index.html#set-up",
    "href": "year_xxxx/day_06/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_04/index.html",
    "href": "year_xxxx/day_04/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_04/index.html#set-up",
    "href": "year_xxxx/day_04/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_25/index.html",
    "href": "year_2024/day_25/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_25/index.html#set-up",
    "href": "year_2024/day_25/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_25/index.html#part-1",
    "href": "year_2024/day_25/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_25/index.html#part-2",
    "href": "year_2024/day_25/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_23/index.html",
    "href": "year_2024/day_23/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_23/index.html#set-up",
    "href": "year_2024/day_23/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_23/index.html#part-1",
    "href": "year_2024/day_23/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_23/index.html#part-2",
    "href": "year_2024/day_23/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_21/index.html",
    "href": "year_2024/day_21/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_21/index.html#set-up",
    "href": "year_2024/day_21/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_21/index.html#part-1",
    "href": "year_2024/day_21/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_21/index.html#part-2",
    "href": "year_2024/day_21/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_19/index.html",
    "href": "year_2024/day_19/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_19/index.html#set-up",
    "href": "year_2024/day_19/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_19/index.html#part-1",
    "href": "year_2024/day_19/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_19/index.html#part-2",
    "href": "year_2024/day_19/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_17/index.html",
    "href": "year_2024/day_17/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_17/index.html#set-up",
    "href": "year_2024/day_17/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_17/index.html#part-1",
    "href": "year_2024/day_17/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_17/index.html#part-2",
    "href": "year_2024/day_17/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_15/index.html",
    "href": "year_2024/day_15/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_15/index.html#set-up",
    "href": "year_2024/day_15/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_15/index.html#part-1",
    "href": "year_2024/day_15/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_15/index.html#part-2",
    "href": "year_2024/day_15/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_13/index.html",
    "href": "year_2024/day_13/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_13/index.html#set-up",
    "href": "year_2024/day_13/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_13/index.html#part-1",
    "href": "year_2024/day_13/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_13/index.html#part-2",
    "href": "year_2024/day_13/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_11/index.html",
    "href": "year_2024/day_11/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_11/index.html#set-up",
    "href": "year_2024/day_11/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_11/index.html#part-1",
    "href": "year_2024/day_11/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_11/index.html#part-2",
    "href": "year_2024/day_11/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_09/index.html",
    "href": "year_2024/day_09/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_09/index.html#set-up",
    "href": "year_2024/day_09/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_09/index.html#part-1",
    "href": "year_2024/day_09/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_09/index.html#part-2",
    "href": "year_2024/day_09/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_07/index.html",
    "href": "year_2024/day_07/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_07/index.html#set-up",
    "href": "year_2024/day_07/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_07/index.html#part-1",
    "href": "year_2024/day_07/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_07/index.html#part-2",
    "href": "year_2024/day_07/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_05/index.html",
    "href": "year_2024/day_05/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_05/index.html#set-up",
    "href": "year_2024/day_05/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_05/index.html#part-1",
    "href": "year_2024/day_05/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_05/index.html#part-2",
    "href": "year_2024/day_05/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_03/index.html#part-1",
    "href": "year_2024/day_03/index.html#part-1",
    "title": "xxxx - Day 3",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_03/index.html#part-2",
    "href": "year_2024/day_03/index.html#part-2",
    "title": "xxxx - Day 3",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_01/index.html",
    "href": "year_2024/day_01/index.html",
    "title": "2024 - Day 1: Historian Hysteria",
    "section": "",
    "text": "You haven’t even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently empty. Eventually, someone decides that the best place to check first would be the Chief Historian’s office.\nUpon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?\nThroughout the Chief’s office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don’t miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.\nThere’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?"
  },
  {
    "objectID": "year_2024/day_01/index.html#set-up",
    "href": "year_2024/day_01/index.html#set-up",
    "title": "2024 - Day 1: Historian Hysteria",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\ninput &lt;- read.table(\"input.txt\")"
  },
  {
    "objectID": "year_2024/day_01/index.html#part-1",
    "href": "year_2024/day_01/index.html#part-1",
    "title": "2024 - Day 1: Historian Hysteria",
    "section": "Part 1",
    "text": "Part 1\n\nMaybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\n\n\n\nCode\n(sort(input$V1) - sort(input$V2)) |&gt; abs() |&gt; sum()\n\n\n[1] 1110981"
  },
  {
    "objectID": "year_2024/day_01/index.html#part-2",
    "href": "year_2024/day_01/index.html#part-2",
    "title": "2024 - Day 1: Historian Hysteria",
    "section": "Part 2",
    "text": "Part 2\n\nYour analysis only confirmed what everyone feared: the two lists of location IDs are indeed very different.\nOr are they?\nThe Historians can’t agree on which group made the mistakes or how to read most of the Chief’s handwriting, but in the commotion you notice an interesting detail: a lot of location IDs appear in both lists! Maybe the other numbers aren’t location IDs at all but rather misinterpreted handwriting.\nThis time, you’ll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.\nOnce again consider your left and right lists. What is their similarity score?\n\n\n\nCode\n(sapply(input$V1, \\(x) sum(x == input$V2)) * input$V1) |&gt; sum()\n\n\n[1] 24869388"
  },
  {
    "objectID": "year_2024/day_02/index.html#part-1",
    "href": "year_2024/day_02/index.html#part-1",
    "title": "2024 - Day 2: Red-Nosed Reports",
    "section": "Part 1",
    "text": "Part 1\n\nThe engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:\n\nThe levels are either all increasing or all decreasing.\nAny two adjacent levels differ by at least one and at most three.\n\nAnalyze the unusual data from the engineers. How many reports are safe?\n\n\n\nCode\nreport_diffs &lt;- lapply(reports, diff)\nis_valid &lt;- \\(x) min(abs(x)) &gt;= 1L && max(abs(x)) &lt;= 3L && length(unique(sign(x))) == 1L\nsapply(report_diffs, is_valid) |&gt; sum()\n\n\n[1] 502"
  },
  {
    "objectID": "year_2024/day_02/index.html#part-2",
    "href": "year_2024/day_02/index.html#part-2",
    "title": "2024 - Day 2: Red-Nosed Reports",
    "section": "Part 2",
    "text": "Part 2\n\nThe engineers are surprised by the low number of safe reports until they realize they forgot to tell you about the Problem Dampener.\nThe Problem Dampener is a reactor-mounted module that lets the reactor safety systems tolerate a single bad level in what would otherwise be a safe report. It’s like the bad level never happened!\nNow, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.\nUpdate your analysis by handling situations where the Problem Dampener can remove a single level from unsafe reports. How many reports are now safe?\n\n\n\nCode\nsapply(reports, \\(x) any(sapply(seq(x), \\(y) is_valid(diff(x[-y]))))) |&gt; sum()\n\n\n[1] 544"
  },
  {
    "objectID": "year_2024/day_04/index.html",
    "href": "year_2024/day_04/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_04/index.html#set-up",
    "href": "year_2024/day_04/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_04/index.html#part-1",
    "href": "year_2024/day_04/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_04/index.html#part-2",
    "href": "year_2024/day_04/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_06/index.html",
    "href": "year_2024/day_06/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_06/index.html#set-up",
    "href": "year_2024/day_06/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_06/index.html#part-1",
    "href": "year_2024/day_06/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_06/index.html#part-2",
    "href": "year_2024/day_06/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_08/index.html",
    "href": "year_2024/day_08/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_08/index.html#set-up",
    "href": "year_2024/day_08/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_08/index.html#part-1",
    "href": "year_2024/day_08/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_08/index.html#part-2",
    "href": "year_2024/day_08/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_10/index.html",
    "href": "year_2024/day_10/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_10/index.html#set-up",
    "href": "year_2024/day_10/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_10/index.html#part-1",
    "href": "year_2024/day_10/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_10/index.html#part-2",
    "href": "year_2024/day_10/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_12/index.html",
    "href": "year_2024/day_12/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_12/index.html#set-up",
    "href": "year_2024/day_12/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_12/index.html#part-1",
    "href": "year_2024/day_12/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_12/index.html#part-2",
    "href": "year_2024/day_12/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_14/index.html",
    "href": "year_2024/day_14/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_14/index.html#set-up",
    "href": "year_2024/day_14/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_14/index.html#part-1",
    "href": "year_2024/day_14/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_14/index.html#part-2",
    "href": "year_2024/day_14/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_16/index.html",
    "href": "year_2024/day_16/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_16/index.html#set-up",
    "href": "year_2024/day_16/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_16/index.html#part-1",
    "href": "year_2024/day_16/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_16/index.html#part-2",
    "href": "year_2024/day_16/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_18/index.html",
    "href": "year_2024/day_18/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_18/index.html#set-up",
    "href": "year_2024/day_18/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_18/index.html#part-1",
    "href": "year_2024/day_18/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_18/index.html#part-2",
    "href": "year_2024/day_18/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_20/index.html",
    "href": "year_2024/day_20/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_20/index.html#set-up",
    "href": "year_2024/day_20/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_20/index.html#part-1",
    "href": "year_2024/day_20/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_20/index.html#part-2",
    "href": "year_2024/day_20/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_22/index.html",
    "href": "year_2024/day_22/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_22/index.html#set-up",
    "href": "year_2024/day_22/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_22/index.html#part-1",
    "href": "year_2024/day_22/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_22/index.html#part-2",
    "href": "year_2024/day_22/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_2024/day_24/index.html",
    "href": "year_2024/day_24/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_2024/day_24/index.html#set-up",
    "href": "year_2024/day_24/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_24/index.html#part-1",
    "href": "year_2024/day_24/index.html#part-1",
    "title": "",
    "section": "Part 1",
    "text": "Part 1"
  },
  {
    "objectID": "year_2024/day_24/index.html#part-2",
    "href": "year_2024/day_24/index.html#part-2",
    "title": "",
    "section": "Part 2",
    "text": "Part 2"
  },
  {
    "objectID": "year_xxxx/day_05/index.html",
    "href": "year_xxxx/day_05/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_05/index.html#set-up",
    "href": "year_xxxx/day_05/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_07/index.html",
    "href": "year_xxxx/day_07/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_07/index.html#set-up",
    "href": "year_xxxx/day_07/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_09/index.html",
    "href": "year_xxxx/day_09/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_09/index.html#set-up",
    "href": "year_xxxx/day_09/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_11/index.html",
    "href": "year_xxxx/day_11/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_11/index.html#set-up",
    "href": "year_xxxx/day_11/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_13/index.html",
    "href": "year_xxxx/day_13/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_13/index.html#set-up",
    "href": "year_xxxx/day_13/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_15/index.html",
    "href": "year_xxxx/day_15/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_15/index.html#set-up",
    "href": "year_xxxx/day_15/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_17/index.html",
    "href": "year_xxxx/day_17/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_17/index.html#set-up",
    "href": "year_xxxx/day_17/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_19/index.html",
    "href": "year_xxxx/day_19/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_19/index.html#set-up",
    "href": "year_xxxx/day_19/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_21/index.html",
    "href": "year_xxxx/day_21/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_21/index.html#set-up",
    "href": "year_xxxx/day_21/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_23/index.html",
    "href": "year_xxxx/day_23/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_23/index.html#set-up",
    "href": "year_xxxx/day_23/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_xxxx/day_25/index.html",
    "href": "year_xxxx/day_25/index.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "year_xxxx/day_25/index.html#set-up",
    "href": "year_xxxx/day_25/index.html#set-up",
    "title": "",
    "section": "Set-Up",
    "text": "Set-Up"
  },
  {
    "objectID": "year_2024/day_02/index.html",
    "href": "year_2024/day_02/index.html",
    "title": "2024 - Day 2: Red-Nosed Reports",
    "section": "",
    "text": "Fortunately, the first location The Historians want to search isn’t a long walk from the Chief Historian’s office.\nWhile the Red-Nosed Reindeer nuclear fusion/fission plant appears to contain no sign of the Chief Historian, the engineers there run up to you as soon as they see you. Apparently, they still talk about the time Rudolph was saved through molecular synthesis from a single electron.\nThey’re quick to add that - since you’re already here - they’d really appreciate your help analyzing some unusual data from the Red-Nosed reactor. You turn to check if The Historians are waiting for you, but they seem to have already divided into groups that are currently searching every corner of the facility. You offer to help with the unusual data.\nThe unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces."
  },
  {
    "objectID": "year_2024/day_02/index.html#set-up",
    "href": "year_2024/day_02/index.html#set-up",
    "title": "2024 - Day 2: Red-Nosed Reports",
    "section": "Set-Up",
    "text": "Set-Up\n\n\nCode\nreports &lt;- readLines(\"input.txt\") |&gt; strsplit(\" \") |&gt; lapply(as.integer)\nprint(reports[[1L]])\n\n\n[1]  6  8  9 10 12 13 12"
  }
]