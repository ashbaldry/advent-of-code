{
  "hash": "362585b473745117fdc75796bac894af",
  "result": {
    "markdown": "---\ntitle: \"2023 - Day 1: Trebuchet?!\"\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n    code-block-bg: true\n    code-block-border-left: \"#AB63BD\"\n---\n\n\n> You try to ask why they can't just use a weather machine (\"not powerful enough\") and where they're even sending you (\"the sky\") and why your map looks mostly blank (\"you sure ask a lot of questions\") and hang on did you just say the sky (\"of course, where do you think snow comes from\") when you realize that the Elves are already loading you into a trebuchet (\"please hold still, we need to strap you in\").\n>\n> As they're making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.\n\n## Set-Up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalues <- readLines(\"input.txt\")\n```\n:::\n\n\n## Part 1\n\n> The newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\n>\n> Consider your entire calibration document. What is the sum of all of the calibration values?\n\nUsing regular expressions to only keep the numbers, can split out using `strsplit` and get the first and last digit, and then convert into numbers ans sum.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngsub(\"[^0-9]\", \"\", values) |>\n  strsplit(\"\") |>\n  sapply(\\(x) paste0(head(x, 1L), tail(x, 1L))) |>\n  as.numeric() |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54632\n```\n:::\n:::\n\n\n## Part 2\n\n> Your calculation isn't quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid \"digits\".\n>\n> What is the sum of all of the calibration values?\n\nThis was a pain as it wasn't clear that overlapping numbers count as both numbers (originally I had used `sub` to replace the first number). \n\nUsing the regular expression to replace the first letter of the word with the number to make it easier to find all the number words in the string. `(?<=.{2})` means that there are two characters to look behind before considering the expression. `substr` would just find the first part of the letter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n\nvalues <- sapply(values, USE.NAMES = FALSE, \\(x) {\n  p <- regexpr(paste(y, collapse = \"|\"), x)\n  while (p > 0) {\n    number <- substr(x, p, p + attr(p, \"match.length\") - 1)\n    x <- sub(\n      paste0(\"(?<=.{\", p - 1, \"})\", substr(number, 1, 1)), \n      match(number, y), \n      x, \n      perl = TRUE\n    )\n    p <- regexpr(paste(y, collapse = \"|\"), x)\n  }\n  x\n})\n\ngsub(\"[^0-9]\", \"\", values) |>\n  strsplit(\"\") |>\n  sapply(\\(x) as.numeric(paste0(head(x, 1L), tail(x, 1L)))) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54019\n```\n:::\n:::\n\n\nThis could be improved to just replace the word except the last character, as the most overlap is the one character.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n\nvalues <- sapply(values, USE.NAMES = FALSE, \\(x) {\n  p <- regexpr(paste(y, collapse = \"|\"), x)\n  while (p > 0) {\n    number <- substr(x, p, p + attr(p, \"match.length\") - 1)\n    x <- sub(\n      substr(number, 1, nchar(number) - 1), \n      match(number, y), \n      x, \n      perl = TRUE\n    )\n    p <- regexpr(paste(y, collapse = \"|\"), x)\n  }\n  x\n})\n\ngsub(\"[^0-9]\", \"\", values) |>\n  strsplit(\"\") |>\n  sapply(\\(x) as.numeric(paste0(head(x, 1L), tail(x, 1L)))) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54019\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}