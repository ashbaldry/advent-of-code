{
  "hash": "b47b5ec26ab17696656ab205f66ebe21",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2023 - Day 6: Wait For It\"\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n    code-block-bg: true\n    code-block-border-left: \"#AB63BD\"\n---\n\n\n\n\n> The ferry quickly brings you across Island Island. After asking around, you discover that there is indeed normally a large pile of sand somewhere near here, but you don't see anything besides lots of water and the small island where the ferry has docked.\n>\n> As you try to figure out what to do next, you notice a poster on a wall near the ferry dock. \"Boat races! Open to the public! Grand prize is an all-expenses-paid trip to Desert Island!\" That must be where the sand comes from! Best of all, the boat races are starting in just a few minutes.\n>\n> You manage to sign up as a competitor in the boat races just in time. The organizer explains that it's not really a traditional race - instead, you will get a fixed amount of time during which your boat has to travel as far as it can, and you win if your boat goes the farthest.\n>\n> As part of signing up, you get a sheet of paper (your puzzle input) that lists the time allowed for each race and also the best distance ever recorded in that race. To guarantee you win the grand prize, you need to make sure you go farther in each race than the current record holder.\n>\n> The organizer brings you over to the area where the boat races are held. The boats are much smaller than you expected - they're actually toy boats, each with a big button on top. Holding down the button charges the boat, and releasing the button allows the boat to move. Boats move faster if their button was held longer, but time spent holding the button counts against the total race time. You can only hold the button at the start of the race, and boats don't move until the button is released.\n\n## Set-Up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraces <- read.table(\"input.txt\")\n```\n:::\n\n\n\n\n## Part 1\n\n> To see how much margin of error you have, determine the number of ways you can beat the record in each race. Determine the number of ways you could beat the record in each race. What do you get if you multiply these numbers together?\n\nCreated a nice function to apply over the races (that was _definitely_ vectorised before running Part 2 and _not_ using a `sapply` to iterate).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_winning_races <- function(x) {\n  time <- x[1]; distance <- x[2]\n  times <- seq(time)\n  distances <- (time - times) * times\n  sum(distances > distance)\n}\n\nwinning_times <- sapply(races[, -1], find_winning_races)\nprod(winning_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 128700\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\n> As the race is about to start, you realize the piece of paper with race times and record distances you got earlier actually just has very bad kerning. There's really only one race - ignore the spaces between the numbers on each line.\n>\n> How many ways can you beat the record in this one much longer race?\n\nA one liner! Using the function from Part 1, realised I got caught in the inefficient function, vectorised and was a __lot__ quicker.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_winning_races(as.numeric(apply(races[, -1], 1, paste0, collapse = \"\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 39594072\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}