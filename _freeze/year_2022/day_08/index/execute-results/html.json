{
  "hash": "b6efad994271022882a334b7503a029c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2022 - Day 8\"\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n    code-block-bg: true\n    code-block-border-left: \"#AB63BD\"\n---\n\n\n\n\n> The expedition comes across a peculiar patch of tall trees all planted carefully in a grid. The Elves explain that a previous expedition planted these trees as a reforestation effort. Now, they're curious if this would be a good location for a tree house.\n>\n> First, determine whether there is enough tree cover here to keep a tree house hidden. To do this, you need to count the number of trees that are visible from outside the grid when looking directly along a row or column.\n>\n> The Elves have already launched a quadcopter to generate a map with the height of each tree (your puzzle input).\n\n\n## Set-Up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheights <- readLines(\"input.txt\") |> strsplit(\"\") |> lapply(as.integer) |> do.call(what = rbind)\nhead(heights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]\n[1,]    2    1    1    3    3    2    2    1    3     0     3     3     1     0\n[2,]    3    1    1    0    2    3    3    2    0     2     4     2     0     3\n[3,]    0    0    1    2    2    3    2    0    4     4     3     3     0     2\n[4,]    0    1    3    1    3    2    2    3    3     0     1     2     3     4\n[5,]    1    2    3    2    0    3    2    1    3     2     0     0     4     1\n[6,]    3    0    0    3    1    4    3    3    4     3     0     3     2     0\n     [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26]\n[1,]     1     1     2     4     1     3     0     1     1     0     4     1\n[2,]     0     1     1     2     0     3     3     3     5     4     2     0\n[3,]     2     0     1     3     1     0     3     3     0     5     4     1\n[4,]     4     2     2     5     5     3     5     0     3     3     3     0\n[5,]     4     1     1     3     4     3     1     3     2     4     0     5\n[6,]     0     3     2     4     1     1     0     0     0     1     0     1\n     [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38]\n[1,]     0     0     2     5     4     0     4     0     3     5     3     2\n[2,]     5     5     3     3     0     0     3     1     0     0     2     2\n[3,]     0     2     2     2     3     1     5     5     5     4     0     3\n[4,]     4     1     1     2     2     5     3     2     0     1     3     0\n[5,]     1     0     2     4     4     3     5     2     6     5     6     0\n[6,]     1     0     6     5     0     5     0     6     2     4     1     3\n     [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50]\n[1,]     4     5     4     0     5     0     6     4     6     5     5     2\n[2,]     4     1     6     6     3     5     4     2     3     3     5     5\n[3,]     2     3     6     6     5     0     6     0     2     1     4     0\n[4,]     3     4     2     1     5     6     3     4     2     2     6     2\n[5,]     6     0     5     6     2     0     6     2     2     0     3     3\n[6,]     6     6     5     4     0     4     4     0     3     0     0     6\n     [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]\n[1,]     2     4     2     4     3     2     5     0     2     5     4     4\n[2,]     4     6     3     4     2     2     1     0     4     1     6     3\n[3,]     5     0     0     2     3     1     5     0     4     4     4     6\n[4,]     3     3     0     5     0     2     1     2     0     4     6     0\n[5,]     0     3     5     3     4     0     5     6     6     4     4     1\n[6,]     1     6     2     0     0     5     0     0     4     2     3     1\n     [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74]\n[1,]     2     4     2     3     2     0     5     3     2     2     1     4\n[2,]     5     2     3     0     0     5     1     4     1     0     3     4\n[3,]     3     4     2     0     0     5     1     0     3     3     3     0\n[4,]     5     5     4     3     6     2     1     0     4     4     5     4\n[5,]     3     2     5     2     1     2     1     2     4     1     3     4\n[6,]     4     2     5     2     6     3     2     6     3     3     3     2\n     [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86]\n[1,]     4     2     0     1     1     1     4     0     3     2     4     3\n[2,]     3     2     3     5     3     4     2     4     3     2     1     1\n[3,]     2     2     0     1     2     5     5     1     3     3     1     4\n[4,]     4     2     1     0     3     5     2     3     3     0     4     1\n[5,]     0     0     1     4     0     2     1     5     0     4     0     4\n[6,]     5     0     1     1     0     3     4     0     2     1     5     2\n     [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98]\n[1,]     3     1     0     2     2     2     3     1     3     3     3     0\n[2,]     2     4     3     4     0     3     4     0     3     0     1     0\n[3,]     3     1     2     4     4     2     0     4     1     2     1     2\n[4,]     2     2     1     2     4     0     1     0     1     2     1     3\n[5,]     3     3     2     2     0     2     2     4     0     4     3     2\n[6,]     1     2     1     0     0     2     2     4     4     2     2     1\n     [,99]\n[1,]     1\n[2,]     0\n[3,]     2\n[4,]     1\n[5,]     2\n[6,]     3\n```\n\n\n:::\n:::\n\n\n\n\n## Part 1\n\n> Each tree is represented as a single digit whose value is its height, where 0 is the shortest and 9 is the tallest.\n>\n> A tree is visible if all of the other trees between it and an edge of the grid are shorter than it. Only consider trees in the same row or column; that is, only look up, down, left, or right from any given tree.\n>\n> Consider your map; how many trees are visible from outside the grid?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisible <- matrix(TRUE, nrow(heights), ncol(heights))\nfor (i in seq_len(nrow(heights))) {\n  for (j in seq_len(ncol(heights))) {\n    if (any(c(i, j) %in% c(1, nrow(heights)))) next\n\n    curr_pos <- heights[i, j]\n    visible[i, j] <- any(\n      all(curr_pos > heights[seq(i - 1), j]),\n      all(curr_pos > heights[seq(i + 1, 99), j]),\n      all(curr_pos > heights[i, seq(j - 1)]),\n      all(curr_pos > heights[i, seq(j + 1, 99)])\n    )\n  }\n}\n\nsum(visible)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1688\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\n> Content with the amount of tree cover available, the Elves just need to know the best spot to build their tree house: they would like to be able to see a lot of trees.\n>\n> To measure the viewing distance from a given tree, look up, down, left, and right from that tree; stop if you reach an edge or at the first tree that is the same height or taller than the tree under consideration. (If a tree is right on the edge, at least one of its viewing distances will be zero.)\n>\n> The Elves don't care about distant trees taller than those found by the rules above; the proposed tree house has large eaves to keep it dry, so they wouldn't be able to see higher than the tree house anyway.\n>\n> A tree's scenic score is found by multiplying together its viewing distance in each of the four directions.\n>\n> Consider each tree on your map. What is the highest scenic score possible for any tree?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscenic <- matrix(0, nrow(heights), ncol(heights))\nfor (i in seq_len(nrow(heights))) {\n  for (j in seq_len(ncol(heights))) {\n    if (any(c(i, j) %in% c(1, nrow(heights)))) next\n\n    curr_pos <- heights[i, j]\n    left <- curr_pos <= heights[rev(seq(i - 1)), j]\n    right <- curr_pos <= heights[seq(i + 1, 99), j]\n    top <- curr_pos <= heights[i, rev(seq(j - 1))]\n    bottom <- curr_pos <= heights[i, seq(j + 1, 99)]\n    scenic[i, j] <- prod(\n      sum(cumsum(left) == 0) + any(left),\n      sum(cumsum(right) == 0) + any(right),\n      sum(cumsum(top) == 0) + any(top),\n      sum(cumsum(bottom) == 0) + any(bottom)\n    )\n  }\n}\n\nmax(scenic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 410400\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}