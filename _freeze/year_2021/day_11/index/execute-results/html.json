{
  "hash": "b64c43967632e10cc939bb9258c2bc2b",
  "result": {
    "markdown": "---\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n    code-block-bg: true\n    code-block-border-left: \"#AB63BD\"\n---\n\n\n## Set-Up\n\n\n::: {.cell}\n\n```{.r .cell-code}\noctopi <- read.fwf(\"input.txt\", widths = rep(1, 10))\noctopi <- as.matrix(octopi)\nstr(octopi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:10, 1:10] 5 3 4 3 3 8 7 1 6 4 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : chr [1:10] \"V1\" \"V2\" \"V3\" \"V4\" ...\n```\n:::\n:::\n\n\n## Part 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountNFlashes <- function(octopi, n = 100, i = 1, flashes = 0) {\n  octopi <- octopi + 1\n\n  new_flashing_octopi <- flashing_octopi <- octopi > 9\n  while (any(new_flashing_octopi)) {\n    new_locations <- which(new_flashing_octopi, arr.ind = TRUE)\n    updating_octopi <- apply(new_locations, 1, findSurroundingOctopi, simplify = FALSE)\n\n    for (j in seq_along(updating_octopi)) {\n      octopi[updating_octopi[[j]]] <- octopi[updating_octopi[[j]]] + 1\n    }\n\n    new_flashing_octopi <- octopi > 9 & !flashing_octopi\n    flashing_octopi <- octopi > 9\n  }\n\n  flashes <- flashes + sum(octopi > 9)\n  octopi[flashing_octopi] <- 0\n\n  if (i == n) {\n    flashes\n  } else {\n    countNFlashes(octopi, n, i + 1, flashes)\n  }\n}\n\nfindSurroundingOctopi <- function(x) {\n  # Getting box of locations\n  boxLocations <- \\(x) max(1, x - 1):min(10, x + 1)\n  rows <- boxLocations(x[1])\n  cols <- boxLocations(x[2])\n  cbind(row = rep(rows, times = length(cols)), col = rep(cols, each = length(rows)))\n}\n\ncountNFlashes(octopi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1785\n```\n:::\n:::\n\n\n## Part 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfindAllFlashes <- function(octopi, i = 1) {\n  octopi <- octopi + 1\n\n  new_flashing_octopi <- flashing_octopi <- octopi > 9\n  while (any(new_flashing_octopi)) {\n    new_locations <- which(new_flashing_octopi, arr.ind = TRUE)\n    updating_octopi <- apply(new_locations, 1, findSurroundingOctopi, simplify = FALSE)\n\n    for (j in seq_along(updating_octopi)) {\n      octopi[updating_octopi[[j]]] <- octopi[updating_octopi[[j]]] + 1\n    }\n\n    new_flashing_octopi <- octopi > 9 & !flashing_octopi\n    flashing_octopi <- octopi > 9\n  }\n\n  octopi[flashing_octopi] <- 0\n\n  if (all(flashing_octopi)) {\n    i\n  } else {\n    findAllFlashes(octopi, i + 1)\n  }\n}\n\nfindAllFlashes(octopi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 354\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}