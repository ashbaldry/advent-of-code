{
  "hash": "24e530b31817c6f5e1c0efdd7a2410c7",
  "result": {
    "markdown": "---\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n    code-block-bg: true\n    code-block-border-left: \"#AB63BD\"\n---\n\n\n## Set-Up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlines <- read.delim(\"input.txt\", sep = \"-\", header = FALSE, col.names = c(\"a\", \"b\"))\nstr(lines)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t21 obs. of  2 variables:\n $ a: chr  \"mx\" \"mx\" \"xq\" \"start\" ...\n $ b: chr  \"IQ\" \"HO\" \"start\" \"HO\" ...\n```\n:::\n\n```{.r .cell-code}\npoints <- unique(unlist(lines))\nvalid_points <- setNames(rep(TRUE, length(points)), points)\nvisits <- setNames(rep(0, length(points)), points)\n```\n:::\n\n\n### Helper Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetNPaths <- function(lines, valid_points, visits, start = \"start\", finish = \"end\", max_visits = 1) {\n  # If at the end then can finish the path\n  if (start == finish) return(1)\n\n  # Cannot revisit lowercase points more than max_visits times\n  if (tolower(start) == start) {\n    if (start == \"start\") valid_points[start] <- FALSE\n    visits[start] <- visits[start] + 1\n    if (visits[start] == max_visits) {\n      valid_points[names(visits[visits >= 1])] <- FALSE\n    } else if (any(visits == max_visits)) {\n      valid_points[start] <- FALSE\n    }\n  }\n\n  next_vertices <- c(lines$a[lines$b == start], lines$b[lines$a == start])\n  next_vertices <- next_vertices[next_vertices %in% points[valid_points]]\n\n  if (length(next_vertices) == 0) {\n    0\n  } else {\n    sum(sapply(\n      next_vertices, getNPaths, lines = lines, visits = visits,\n      valid_points = valid_points, finish = finish, max_visits = max_visits\n    ))\n  }\n}\n```\n:::\n\n\n## Part 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetNPaths(lines, valid_points, visits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4749\n```\n:::\n:::\n\n\n## Part 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetNPaths(lines, valid_points, visits, max_visits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123054\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}