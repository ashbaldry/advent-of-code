{
  "hash": "df2e101aaf5242503fa66673bfab3892",
  "result": {
    "markdown": "---\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n    code-block-bg: true\n    code-block-border-left: \"#AB63BD\"\n---\n\n\n## Set-Up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstring <- scan(\"input.txt\", 1, what = character(), sep = \"\")\nstr(string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr \"OHFNNCKCVOBHSSHONBNF\"\n```\n:::\n\n```{.r .cell-code}\ninsertions <- read.delim(\n  \"input.txt\", \n  sep = \" \", \n  skip = 2, \n  header = FALSE, \n  col.names = c(\"a\", \"x\", \"b\")\n)\nstr(insertions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t100 obs. of  3 variables:\n $ a: chr  \"SV\" \"KP\" \"FP\" \"VP\" ...\n $ x: chr  \"->\" \"->\" \"->\" \"->\" ...\n $ b: chr  \"O\" \"H\" \"B\" \"V\" ...\n```\n:::\n\n```{.r .cell-code}\ninsertions <- insertions[order(insertions$a), ]\ninsertions$ab <- paste0(substr(insertions$a, 1, 1), insertions$b)\ninsertions$ba <- paste0(insertions$b, substr(insertions$a, 2, 2))\n```\n:::\n\n\n## Part 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninsertCharacters <- function(x, i = 1, n = 10) {\n  nchars <- nchar(x)\n  combs <- sapply(seq(nchars - 1), \\(y) substr(x, y, y + 1))\n  combs2 <- sapply(combs, \\(y) if (y %in% insertions$a) insertions$ab[insertions$a == y] else substr(y, 1, 1))\n  y <- paste0(c(combs2, substr(x, nchars, nchars)), collapse = \"\")\n\n  if (i == n) {\n    y\n  } else {\n    insertCharacters(y, i + 1, n)\n  }\n}\n\nfull_string <- insertCharacters(string)\nstring_count <- table(strsplit(full_string, \"\")[[1]])\nmax(string_count) - min(string_count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2590\n```\n:::\n:::\n\n\n## Part 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfindCharacterCounts <- function(x, n = 10) {\n  nchars <- nchar(x)\n  combs <- sapply(seq(nchars - 1), \\(y) substr(x, y, y + 1))\n  combs <- factor(combs, sort(insertions$a))\n  counts <- table(combs)\n\n  for (i in 1:n) counts <- addStrings(counts)\n\n  string_count <- sapply(\n    sort(unique(insertions$b)),\n    \\(y) sum(counts[grepl(paste0(y, \"$\"), names(counts))]) + as.numeric(y == substr(x, 1, 1))\n  )\n  max(string_count) - min(string_count)\n}\n\naddStrings <- function(x) {\n  x <- tapply(rep(as.numeric(x), times = 2), c(insertions$ab, insertions$ba), sum)\n  x <- setNames(x[insertions$a], insertions$a)\n  x[is.na(x)] <- 0\n  x\n}\n\nfindCharacterCounts(string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2590\n```\n:::\n\n```{.r .cell-code}\nfindCharacterCounts(string, 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.875665e+12\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}