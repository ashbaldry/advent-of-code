{
  "hash": "f5f05754a3a4bcf501c2eec6d6ebff07",
  "result": {
    "markdown": "---\ntitle: \"2021 - Day 18\"\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n    code-block-bg: true\n    code-block-border-left: \"#AB63BD\"\n---\n\n\n## Set-Up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnailfish <- readLines(\"input.txt\")\nstr(snailfish)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:100] \"[[6,[[9,4],[5,1]]],[[[6,5],[9,4]],2]]\" ...\n```\n:::\n:::\n\n\n### Helper Functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfindReduction <- function(x) {\n  explode_loc <- findExplodeLocations(x)\n  split_loc <- findSplitLocations(x)\n\n  if (length(explode_loc) > 0) {\n    explodePair(x, explode_loc[1])\n  } else if (length(split_loc) > 0) {\n    splitPair(x, split_loc[1])\n  } else {\n    x\n  }\n}\n\nfindExplodeLocations <- function(x, depth = 4) {\n  pairs <- gregexpr(\"\\\\[\\\\d+,\\\\d+\\\\]\", x)[[1]]\n  opens <- cumsum((strsplit(x, \"\")[[1]] == \"[\") - (strsplit(x, \"\")[[1]] == \"]\"))\n  pairs[opens[pairs] > depth]\n}\n\nfindSplitLocations <- function(x) setdiff(as.numeric(gregexpr(\"\\\\d{2}\", x)[[1]]), -1)\n\nexplodePair <- function(x, pair_loc, recurse = TRUE) {\n  num1 <- num2 <- 0\n  init_str <- substr(x, 1, pair_loc - 1)\n  pair_str <- sub(\"(.?\\\\]).*\", \"\\\\1\", substr(x, pair_loc, nchar(x)))\n  first_num <- as.numeric(sub(\"\\\\[(\\\\d+),.*\", \"\\\\1\", pair_str))\n  second_num <- as.numeric(sub(\"\\\\[.*,(\\\\d+)\\\\]\", \"\\\\1\", pair_str))\n  end_str <- sub(pair_str, \"\", fixed = TRUE, substr(x, pair_loc, nchar(x)))\n\n  if (grepl(\"\\\\d\", init_str)) {\n    num1 <- as.numeric(sub(\".*[^0-9](\\\\d+)(?=[^0-9]+$).*\", \"\\\\1\", init_str, perl = TRUE)) + first_num\n    init_str <- sub(\"(?!<[^0-9])(\\\\d+)(?=[^0-9]+$)\", num1, init_str, perl = TRUE)\n  }\n\n  if (grepl(\"\\\\d\", end_str)) {\n    num2 <- as.numeric(regmatches(end_str, regexpr(\"\\\\d+\", end_str))) + second_num\n    end_str <- sub(\"\\\\d+\", num2, end_str)\n  }\n\n  findReduction(paste0(init_str, 0, end_str))\n}\n\nsplitPair <- function(x, number_loc, recurse = TRUE) {\n  init_str <- substr(x, 1, number_loc - 1)\n  end_str <- substr(x, number_loc + 2, nchar(x))\n  number <- as.numeric(substr(x, number_loc, number_loc + 1))\n\n  findReduction(paste0(init_str, \"[\", floor(number / 2), \",\", ceiling(number / 2), \"]\", end_str))\n}\n\nsumFish <- function(x) {\n  pairs <- gregexpr(\"\\\\[\\\\d+,\\\\d+\\\\]\", x)\n  pair_str <- regmatches(x, pairs)[[1]]\n  pair_num <- as.numeric(sub(\"^.?(\\\\d+).*\", \"\\\\1\", pair_str)) * 3 +\n    as.numeric(sub(\".*,(\\\\d+)\\\\]\", \"\\\\1\", pair_str)) * 2\n  new_x <- paste0(strsplit(x, \"\\\\[\\\\d+,\\\\d+\\\\]\")[[1]], c(pair_num, \"\"), collapse = \"\")\n  if (grepl(\"^\\\\[\", new_x)) new_x <- sumFish(new_x)\n  as.numeric(new_x)\n}\n```\n:::\n\n\n## Part 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_sum <- snailfish[1]\nfor (i in seq_along(snailfish)[-1]) {\n  fish_sum <- findReduction(paste0(\"[\", fish_sum, \",\", snailfish[i], \"]\"))\n}\nsumFish(fish_sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4008\n```\n:::\n:::\n\n\n## Part 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombinations <- cbind(rep(snailfish, each = 100), rep(snailfish, times = 100))\ncombinations <- combinations[combinations[, 1] != combinations[, 2], ]\ncombinations_str <- paste0(\"[\", combinations[, 1], \",\", combinations[, 2], \"]\")\n\ndifferences <- sapply(combinations_str, \\(x) sumFish(findReduction(x)))\nmax(differences)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4667\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}