---
title: "2022 - Day 7"
format:
  html:
    code-fold: show
    code-tools: true
    code-block-bg: true
    code-block-border-left: "#AB63BD"
---

> You can hear birds chirping and raindrops hitting leaves as the expedition proceeds. Occasionally, you can even hear much louder sounds in the distance; how big do the animals get out here, anyway?
>
> The device the Elves gave you has problems with more than just its communication system. You try to run a system update:
>
> ` $ system-update --please --pretty-please-with-sugar-on-top`
> `Error: No space left on device`
>
> Perhaps you can delete some files to make space for the update?
>
> You browse around the filesystem to assess the situation and save the resulting terminal output (your puzzle input).
>
> The filesystem consists of a tree of files (plain data) and directories (which can contain other directories or files). The outermost directory is called /. You can navigate around the filesystem, moving into or out of directories and listing the contents of the directory you're currently in.

## Set-Up

Here reading in the data as a table as it splits out the three potential commands quite nicely:

- `$` means that will either look for `cd` or `ls` in the second column.
  - `cd` means that the directory will either enter the subdirectory or if the third column is `".."` then move up into the parent column. At no point will we need to move above the home directory.
  - `ls`, printing the current directory contents, is a red herring and can be ignored
- `dir` means that a new directory needs to be created in the current directory
- All other commands are new files of size in the first column

```{r setup}
str(readLines("input.txt"))
commands <- read.table("input.txt", sep = " ", fill = TRUE, header = FALSE)
```

This is the first time helper functions have been needed. This first one finds the directory to move to. I store the active directory as a vector of folder names, with the home directory being `character(0)` (this did have its own issues, however made some indexing handy in the future)

```{r helpers}
change_dir <- function(files, dir, curr_dir = character(0)) {
  if (dir == "..") head(curr_dir, -1) else if (dir == "/") character(0) else c(curr_dir, dir)
}
```

This second helper went iteratively through the commands, and updated the current file structure and the active directory location. Using `[[curr_dir]]` on nested lists was really useful, as `list[[c("a", "b", "c")]]` was a very simple way of finding the subdirectory `a -> b -> c`.

It returns a nested list of the file tree of the data.

```{r helpers_2}
follow_commands <- function(commands, files = list(), curr_dir = character(0)) {
  command <- commands[1, ]

  if (command$V1 == "$") {
    if (command$V2 == "cd") {
      curr_dir <- change_dir(files, command$V3, curr_dir)
    }
  } else {
    if (command$V1 == "dir") {
      new_file <- setNames(list(list()), command$V2)
    } else {
      new_file <- setNames(list(as.numeric(command$V1)), command$V2)
    }

    if (length(curr_dir) > 0) {
      files[[curr_dir]] <- append(files[[curr_dir]], new_file)
    } else {
      files <- append(files, new_file)
    }
  }

  if (nrow(commands) == 1) {
    files
  } else {
    follow_commands(commands[-1, ], files = files, curr_dir = curr_dir)
  }
}

files <- follow_commands(commands)
str(files, 1)
```

## Part 1

> Since the disk is full, your first step should probably be to find directories that are good candidates for deletion. To do this, you need to determine the total size of each directory. The total size of a directory is the sum of the sizes of the files it contains, directly or indirectly. (Directories themselves do not count as having any intrinsic size.)
>
> Find all of the directories with a total size of at most 100000. What is the sum of the total sizes of those directories?

The last helper function is required here. Now we have the file tree, we need to recursively sum up all children files. Here I create a recursive function to grab all of the sub-directories and find their total sizes. Either way, a sum of the directory is calculated.

The list is then squashed into a vector to easily find the small directories.

```{r part_1}
get_dir_size <- function(files) {
  dirs <- sapply(files, is.list)
  if (any(dirs)) {
    c(
      directory = sum(unlist(files, recursive = TRUE)),
      lapply(files[dirs], get_dir_size)
    )
  } else {
    sum(unlist(files, recursive = TRUE))
  }
}

dir_sizes <- get_dir_size(files)
str(dir_sizes, 2)

dir_size_flat <- unlist(dir_sizes, recursive = TRUE)
sum(dir_size_flat[dir_size_flat <= 100000])
```

## Part 2

> Now, you're ready to choose a directory to delete.
>
> The total disk space available to the filesystem is 70000000. To run the update, you need unused space of at least 30000000. You need to find a directory you can delete that will free up enough space to run the update.
>
> Find the smallest directory that, if deleted, would free up enough space on the filesystem to run the update. What is the total size of that directory?

```{r part_2}
min(dir_size_flat[dir_size_flat >= dir_size_flat[[1]] - 40000000])
```
