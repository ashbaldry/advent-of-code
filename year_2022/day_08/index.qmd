---
title: "2022 - Day 8"
format:
  html:
    code-fold: show
    code-tools: true
    code-block-bg: true
    code-block-border-left: "#AB63BD"
---

> The expedition comes across a peculiar patch of tall trees all planted carefully in a grid. The Elves explain that a previous expedition planted these trees as a reforestation effort. Now, they're curious if this would be a good location for a tree house.
>
> First, determine whether there is enough tree cover here to keep a tree house hidden. To do this, you need to count the number of trees that are visible from outside the grid when looking directly along a row or column.
>
> The Elves have already launched a quadcopter to generate a map with the height of each tree (your puzzle input).


## Set-Up

```{r setup}
heights <- readLines("input.txt") |> strsplit("") |> lapply(as.integer) |> do.call(what = rbind)
head(heights)
```

## Part 1

> Each tree is represented as a single digit whose value is its height, where 0 is the shortest and 9 is the tallest.
>
> A tree is visible if all of the other trees between it and an edge of the grid are shorter than it. Only consider trees in the same row or column; that is, only look up, down, left, or right from any given tree.
>
> Consider your map; how many trees are visible from outside the grid?

```{r part_1}
visible <- matrix(TRUE, nrow(heights), ncol(heights))
for (i in seq_len(nrow(heights))) {
  for (j in seq_len(ncol(heights))) {
    if (any(c(i, j) %in% c(1, nrow(heights)))) next

    curr_pos <- heights[i, j]
    visible[i, j] <- any(
      all(curr_pos > heights[seq(i - 1), j]),
      all(curr_pos > heights[seq(i + 1, 99), j]),
      all(curr_pos > heights[i, seq(j - 1)]),
      all(curr_pos > heights[i, seq(j + 1, 99)])
    )
  }
}

sum(visible)
```

## Part 2

> Content with the amount of tree cover available, the Elves just need to know the best spot to build their tree house: they would like to be able to see a lot of trees.
>
> To measure the viewing distance from a given tree, look up, down, left, and right from that tree; stop if you reach an edge or at the first tree that is the same height or taller than the tree under consideration. (If a tree is right on the edge, at least one of its viewing distances will be zero.)
>
> The Elves don't care about distant trees taller than those found by the rules above; the proposed tree house has large eaves to keep it dry, so they wouldn't be able to see higher than the tree house anyway.
>
> A tree's scenic score is found by multiplying together its viewing distance in each of the four directions.
>
> Consider each tree on your map. What is the highest scenic score possible for any tree?

```{r part_2}
scenic <- matrix(0, nrow(heights), ncol(heights))
for (i in seq_len(nrow(heights))) {
  for (j in seq_len(ncol(heights))) {
    if (any(c(i, j) %in% c(1, nrow(heights)))) next

    curr_pos <- heights[i, j]
    left <- curr_pos <= heights[rev(seq(i - 1)), j]
    right <- curr_pos <= heights[seq(i + 1, 99), j]
    top <- curr_pos <= heights[i, rev(seq(j - 1))]
    bottom <- curr_pos <= heights[i, seq(j + 1, 99)]
    scenic[i, j] <- prod(
      sum(cumsum(left) == 0) + any(left),
      sum(cumsum(right) == 0) + any(right),
      sum(cumsum(top) == 0) + any(top),
      sum(cumsum(bottom) == 0) + any(bottom)
    )
  }
}

max(scenic)
```
